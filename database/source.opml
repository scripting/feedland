<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- OPML generated by OPML Editor v10.1b19 on Fri, 06 Jun 2025 15:42:06 GMT -->

<!-- 
   Hi this is Dave Winer. I write all my project code in an outliner, which 
   generates all the files that make up this GitHub project. You'll see a 
   source.opml file like this in each of my projects. It contains the outline 
   source that the repo files were generated from. This is the most logical place 
   to store them. You can read the code in any outliner that supports OPML, which 
   includes https://drummer.land. You can use the Open URL command in 
   Drummer's File menu to open the "raw" version of this file straight from the 
   GitHub repo.
 -->

<opml version="2.0">
	<head>
		<title>nodeEditor: feedlandDatabase</title>
		<dateCreated>Mon, 27 Jun 2022 13:56:38 GMT</dateCreated>
		<dateModified>Fri, 06 Jun 2025 15:42:05 GMT</dateModified>
		<ownerName>Dave Winer</ownerName>
		<ownerId>http://davewiner.com/</ownerId>
		<expansionState>1, 2, 3, 43, 73, 74, 86, 221, 222, 224, 225, 227, 252, 256, 260, 261, 277, 280, 295, 296, 306, 308, 320, 321, 324, 328, 350, 351, 353, 354, 356, 367, 374, 381, 386, 388, 389, 391, 392, 409, 410, 411, 415, 429, 430, 434, 460, 477, 479, 481, 499, 505, 509, 510, 512, 516, 520, 522, 523, 584, 587, 589, 598, 600, 602, 629</expansionState>
		<vertScrollState>1</vertScrollState>
		<windowTop>236</windowTop>
		<windowLeft>436</windowLeft>
		<windowBottom>1253</windowBottom>
		<windowRight>1809</windowRight>
		</head>
	<body>
		<outline text="/scripting.com/code/feedland/database/">
			<outline text="worknotes.md" created="Mon, 27 Jun 2022 15:00:43 GMT">
				<outline text="#### 6/6/25; 11:41:22 AM by DW" created="Fri, 06 Jun 2025 15:41:21 GMT">
					<outline text="When checking items for changes, we weren't checking outlineJsontext." created="Fri, 06 Jun 2025 15:41:22 GMT"/>
					</outline>
				<outline text="#### 6/2/25; 11:54:16 AM by DW -- v0.8.0" created="Mon, 02 Jun 2025 15:54:15 GMT">
					<outline text="We incorrectly assumed that incoming feed records will have image attributes laid out like this:" created="Mon, 02 Jun 2025 15:44:44 GMT">
						<outline text="* theFeed = {imageUrl, imageTitle, imageLink, imageWidth, imageHeight, imageDescription};" created="Mon, 02 Jun 2025 15:45:07 GMT"/>
						</outline>
					<outline text="But that isn't the way it works. Instead what comes in is this:" created="Mon, 02 Jun 2025 15:46:28 GMT">
						<outline text="* theFeed = {image: {url, title, link, width, height, description}}" created="Mon, 02 Jun 2025 15:45:07 GMT"/>
						</outline>
					<outline text="We do the conversion in setupNewFeedRec." created="Mon, 02 Jun 2025 15:47:40 GMT"/>
					</outline>
				<outline text="#### 5/31/25; 2:18:18 PM by DW" created="Sat, 31 May 2025 18:18:18 GMT">
					<outline text="New config option, legalTags, configures what HTML you allow to pass from a feed into the database. The default is to let through &lt;p&gt; and &lt;br&gt;." created="Sat, 31 May 2025 18:18:19 GMT"/>
					</outline>
				<outline text="#### 6/28/24; 11:23:10 AM by DW" created="Fri, 28 Jun 2024 15:23:09 GMT">
					<outline text="Remove debugging code added to checkReadingList to track down breaking change fix yesterday." created="Fri, 28 Jun 2024 15:23:11 GMT"/>
					</outline>
				<outline text="#### 6/27/24; 9:09:57 AM by DW" created="Thu, 27 Jun 2024 13:09:56 GMT">
					<outline text="Breaking change in the move to mysql2, it changed the way it deals with JSON objects in tables, it parses them. " created="Fri, 28 Jun 2024 15:21:43 GMT">
						<outline text="https://github.com/scripting/feedlandInstall/issues/60" created="Fri, 28 Jun 2024 15:22:09 GMT"/>
						</outline>
					<outline text="Added a long comment at the head of checkReadingList explaining what it does and how it works. " created="Thu, 27 Jun 2024 13:09:57 GMT"/>
					<outline text="New function -- addFeedIfNecessary -- called it from addFeedsIfNecessary. Does the minimum necessary to be sure the feed is in the database." created="Thu, 27 Jun 2024 13:29:35 GMT"/>
					<outline text="Added lots of debugging code." created="Fri, 28 Jun 2024 15:21:34 GMT"/>
					</outline>
				<outline text="#### 6/24/24; 9:29:48 AM by DW" created="Mon, 24 Jun 2024 13:29:48 GMT">
					<outline text="Formatting change for title and description in OPML subscription lists we generate. See getUserOpmlSubscriptions." created="Mon, 24 Jun 2024 13:29:49 GMT"/>
					</outline>
				<outline text="#### 6/20/24; 8:51:33 AM by DW" created="Thu, 20 Jun 2024 12:51:33 GMT">
					<outline text="Fixed a crashing bug in subscribeToReadingList. " created="Thu, 20 Jun 2024 12:51:33 GMT"/>
					</outline>
				<outline text="#### 4/29/24; 9:26:53 AM by DW" created="Mon, 29 Apr 2024 13:26:52 GMT">
					<outline text="One of my servers was using up space at an alarming rate. I investigated and found it was accumulating a lot of files in the feedland &lt;i&gt;data&lt;/i&gt; folder, &lt;i&gt;riverBuildLogs&lt;/i&gt; sub-folder." created="Mon, 29 Apr 2024 13:26:53 GMT"/>
					<outline text="It felt familiar, like we had been here before, and we did on on 10/20/23. The &lt;a href=&quot;https://github.com/scripting/feedland/blob/main/database/worknotes.md#102023-112957-am-by-dw&quot;&gt;worknote&lt;/a&gt; says that &lt;i&gt;config.flRiverBuildLogEnabled&lt;/i&gt; would now default to false, but I checked the code, and it's still defaulting to true. " created="Mon, 29 Apr 2024 13:27:57 GMT"/>
					<outline text="This time I changed it for real, I hope, and any servers out there that are writing lots of files that are only useful for a certain kind of debugging, will stop doing so on the next restart. " created="Mon, 29 Apr 2024 13:28:58 GMT"/>
					<outline text="BTW, you might want to look in the &lt;i&gt;data/riverBuildLogs&lt;/i&gt; folder and delete the files." created="Mon, 29 Apr 2024 13:32:23 GMT"/>
					</outline>
				<outline text="#### 3/17/24; 10:51:07 AM by DW" created="Sun, 17 Mar 2024 14:51:06 GMT">
					<outline text="The logging message in checkOneFeed now says how many seconds it took."/>
					</outline>
				<outline text="#### 3/9/24; 10:59:19 AM by DW" created="Sat, 09 Mar 2024 15:59:19 GMT">
					<outline text="In addSubscription, we assumed feedId can't be null, but the value passed to us is sometimes null, due to an earlier coding error when we quickly added feedId's as an experiment. We went crazy there. Still paying for it, fixing a bug that was added over a month ago. " created="Sat, 09 Mar 2024 16:19:28 GMT"/>
					<outline text="Fixed crashing bug when we were saving a new feed. It was in some debugging code I added to debug another feature. Still paying for the attempt to quickly add feedId. Not a good thing to try when your attention is not in DatabaseLand. " created="Sat, 09 Mar 2024 15:59:20 GMT">
						<outline text="Commented out the console.log statement. " created="Sat, 09 Mar 2024 16:00:29 GMT"/>
						</outline>
					</outline>
				<outline text="#### 3/4/24; 4:53:53 PM by DW" created="Mon, 04 Mar 2024 21:53:52 GMT">
					<outline text="feedland.org is running really slowly, and the slowness is traced to using &lt;i&gt;index (feedId)&lt;/i&gt; in the query in getRiver. " created="Mon, 04 Mar 2024 21:53:53 GMT"/>
					<outline text="we didn't know what we were doing when we were trying out new queries earlier this year. " created="Mon, 04 Mar 2024 21:54:23 GMT"/>
					<outline text="must remember to treat this app with more respect in the future. " created="Mon, 04 Mar 2024 21:54:56 GMT"/>
					</outline>
				<outline text="#### 3/2/24; 12:07:02 PM by DW" created="Sat, 02 Mar 2024 17:07:00 GMT">
					<outline text="getRiverFromEverything was broken. The fix was in getRiver." created="Sat, 02 Mar 2024 17:07:02 GMT"/>
					</outline>
				<outline text="#### 3/2/24; 9:58:45 AM by DW" created="Sat, 02 Mar 2024 14:58:44 GMT">
					<outline text="Rewrote saveFeed function." created="Sat, 02 Mar 2024 15:05:33 GMT">
						<outline text="https://github.com/scripting/feedlandDev/issues/7" created="Sat, 02 Mar 2024 15:04:51 GMT"/>
						</outline>
					</outline>
				<outline text="#### 2/26/24; 1:02:16 PM by DW" created="Mon, 26 Feb 2024 18:02:16 GMT">
					<outline text="New config setting -- config.flCanUseFeedIds, defaults to true." created="Mon, 26 Feb 2024 18:02:17 GMT"/>
					<outline text="I suspect the code that uses feedId's to build rivers. It was never necessary on Digital Ocean servers, and did not improve performance on VIP. " created="Mon, 26 Feb 2024 18:02:31 GMT"/>
					<outline text="Even so we leave the default at true. I want to try setting it false on my new test server and see what happens. " created="Mon, 26 Feb 2024 18:08:03 GMT"/>
					</outline>
				<outline text="#### 2/22/24; 9:13:25 AM by DW" created="Thu, 22 Feb 2024 14:13:25 GMT">
					<outline text="I added some test code when it was building the All category for user davewiner. " created="Sun, 25 Feb 2024 15:02:18 GMT"/>
					<outline text="The hope was it would make the query run faster, but it actually ran slower, so I commented the test code. " created="Sun, 25 Feb 2024 15:02:42 GMT"/>
					<outline text="Notes on the idea are below." created="Sun, 25 Feb 2024 15:02:19 GMT"/>
					<outline text="For at least a month we've been trying to figure out why my &lt;i&gt;All&lt;/i&gt; category takes 18 seconds to render where it used to take less than one second, as do all my other categories. This takes people focusing on it from the FeedLand point of view and from the OS/SQL standpoint. We haven't gotten together on this, and it doesn't seem likely we will in the near future. In the meantime I can't help but come up with my own ideas about how to work around this problem. Limit the number of feeds in a category? Or -- my current thought -- include feeds that have updated in the last 48 hours say. That's another query, but I think it might work! Or another approach, limit it to the 200 feeds that have updated most recently. 200 seemed to be a magic number. If I cut the All category down to 200 feeds it got a lot faster. " created="Thu, 22 Feb 2024 14:13:26 GMT">
						<outline text="https://github.com/scripting/feedlandDev/issues/4" created="Thu, 22 Feb 2024 14:16:26 GMT"/>
						</outline>
					<outline text="So I'm going to give it a try now." created="Thu, 22 Feb 2024 14:17:00 GMT"/>
					</outline>
				<outline text="#### 2/12/24; 2:01:27 PM by DW" created="Mon, 12 Feb 2024 19:01:26 GMT">
					<outline text="Using a different index in getRiver." created="Mon, 12 Feb 2024 19:01:27 GMT"/>
					</outline>
				<outline text="#### 2/7/24; 4:18:17 PM by DW" created="Wed, 07 Feb 2024 21:18:16 GMT">
					<outline text="Trying to speed up river building by limiting results from a river to a configurable number of days. " created="Wed, 07 Feb 2024 21:18:17 GMT">
						<outline text="confi" created="Wed, 07 Feb 2024 21:18:58 GMT"/>
						</outline>
					</outline>
				<outline text="#### 2/3/24; 4:29:40 PM by DW" created="Sat, 03 Feb 2024 21:29:40 GMT">
					<outline text="Converted getRiver and getRiverFromCategory to use feedIds if they're available." created="Sat, 03 Feb 2024 21:29:41 GMT"/>
					</outline>
				<outline text="#### 2/3/24; 10:21:32 AM by DW" created="Sat, 03 Feb 2024 15:21:32 GMT">
					<outline text="These are the changes needed to get the server running again after transitioning to having a feedId column for the three main tables: feeds, items and subscriptions. " created="Sat, 03 Feb 2024 16:22:32 GMT">
						<outline text="1. When we create a new subscription, set the &lt;i&gt;feedId&lt;/i&gt; for the subscription record. " created="Sat, 03 Feb 2024 15:21:45 GMT"/>
						<outline text="2. When we create a new item, set the &lt;i&gt;feedId&lt;/i&gt; for the item record. " created="Sat, 03 Feb 2024 15:22:15 GMT"/>
						</outline>
					<outline text="The trickiest part was handling new subscriptions made by new feeds appearing in a reading list. That should be carefully tested to make sure the new subscription record has a feedId value properly set. " created="Sat, 03 Feb 2024 16:23:24 GMT"/>
					</outline>
				<outline text="#### 1/31/24; 10:46:24 AM by DW" created="Wed, 31 Jan 2024 15:46:24 GMT">
					<outline text="As part of the conversion for config.flFeedsHaveIds, in getFeedsInCategory, we request f.feedId so it's returned to the client for each feed, so it can construct queries that use the feedId in place of feedUrl. " created="Wed, 31 Jan 2024 15:46:24 GMT"/>
					<outline text="Added code to return f.feedId in getStandardFeedElements. " created="Wed, 31 Jan 2024 20:05:20 GMT"/>
					</outline>
				<outline text="#### 12/16/23; 12:07:17 PM by DW" created="Sat, 16 Dec 2023 17:07:17 GMT">
					<outline text="Disabled the deleteItem call, we don't respect flDeleted att on items. So this is pointless. " created="Sat, 16 Dec 2023 17:07:18 GMT"/>
					</outline>
				<outline text="#### 12/14/23; 11:41:07 AM by DW" created="Thu, 14 Dec 2023 16:41:07 GMT">
					<outline text="Fixed a problem, when we discover a new feed in a reading list, we set its category string incorrectly. It needed to be surrounded by commas. " created="Thu, 14 Dec 2023 16:41:08 GMT"/>
					<outline text="We encountered and fixed this problem before on 11/19/23." created="Thu, 14 Dec 2023 16:41:40 GMT"/>
					</outline>
				<outline text="#### 12/13/23; 12:32:40 PM by DW" created="Wed, 13 Dec 2023 17:32:38 GMT">
					<outline text="Fixed bugs in reading list code. " created="Wed, 13 Dec 2023 17:32:40 GMT"/>
					</outline>
				<outline text="#### 12/1/23; 12:18:34 PM by DW" created="Fri, 01 Dec 2023 17:18:33 GMT">
					<outline text="What do we do when a user subscribes to a reading list? " created="Fri, 01 Dec 2023 17:18:35 GMT"/>
					<outline text="We return before doing it all." created="Fri, 01 Dec 2023 17:18:51 GMT"/>
					<outline text="And we do less -- just checking if each of the feeds in the list are in the database if they exist. " created="Fri, 01 Dec 2023 17:19:02 GMT"/>
					<outline text="We want the readouts in feedlandHome to look correct as soon as possible." created="Fri, 01 Dec 2023 17:19:20 GMT"/>
					<outline text="The truth is subscribing to a new reading list takes as much time as subscribing from a list, and that can take a second for each feed. " created="Fri, 01 Dec 2023 17:19:37 GMT"/>
					<outline text="There is an art to this, we're still not doing it right in some circumstances. " created="Fri, 01 Dec 2023 17:20:35 GMT"/>
					</outline>
				<outline text="#### 11/30/23; 4:12:41 PM by DW" created="Thu, 30 Nov 2023 21:12:40 GMT">
					<outline text="Fixed problem with importing reading list feeds that don't have any categories. We were assigning the value of category in the database as " created="Thu, 30 Nov 2023 21:12:41 GMT">
						<outline text=",undefined," created="Thu, 30 Nov 2023 21:13:14 GMT"/>
						</outline>
					<outline text="Instead we return undefined which should be represented in the database as NULL." created="Thu, 30 Nov 2023 21:13:18 GMT"/>
					<outline text="To find the code search for getCategoriesFor." created="Thu, 30 Nov 2023 21:16:29 GMT"/>
					</outline>
				<outline text="#### 11/28/23; 2:13:35 PM by DW" created="Wed, 29 Nov 2023 13:13:34 GMT">
					<outline text="Implement support for source:cloud element. " created="Wed, 29 Nov 2023 13:13:51 GMT"/>
					</outline>
				<outline text="#### 11/28/23; 11:47:16 AM by DW" created="Tue, 28 Nov 2023 16:47:13 GMT">
					<outline text="Subscribing to new reading list, we were failing to add most of the feeds to the feeds table in the database. " created="Tue, 28 Nov 2023 16:47:17 GMT"/>
					<outline text="The debugging work is narrated in &lt;a href=&quot;https://github.com/scripting/a8c-FeedLand-Support/issues/67&quot;&gt;this thread&lt;/a&gt;  on GitHub." created="Tue, 28 Nov 2023 16:47:59 GMT"/>
					</outline>
				<outline text="#### 11/20/23; 8:47:30 AM by DW" created="Mon, 20 Nov 2023 13:47:30 GMT">
					<outline text="Removing checks for flDeleted for a performance boost. " created="Mon, 20 Nov 2023 13:47:31 GMT">
						<outline text="https://github.com/scripting/feedlandInstall/issues/51" created="Mon, 20 Nov 2023 13:47:45 GMT"/>
						</outline>
					<outline text="Being cautious, I made it easy to turn this back on, with config.flCheckForDeleted which defaults false. " created="Mon, 20 Nov 2023 13:48:48 GMT"/>
					<outline text="But I recommend when and if this feature needs to come back, we implement it by actually deleting the item in the database. " created="Mon, 20 Nov 2023 13:49:46 GMT"/>
					</outline>
				<outline text="#### 11/19/23; 9:33:55 AM by DW" created="Sun, 19 Nov 2023 14:33:54 GMT">
					<outline text="When we create the subscription record, we stored the categories incorrectly. They need to be surrounded by commas, or they won't be found when building a river based on categories. I wrote up the process in this &lt;a href=&quot;https://github.com/scripting/a8c-FeedLand-Support/issues/67&quot;&gt;thread.&lt;/a&gt;" created="Sun, 19 Nov 2023 14:33:55 GMT"/>
					</outline>
				<outline text="#### 11/5/23; 11:26:37 AM by DW" created="Sun, 05 Nov 2023 16:26:37 GMT">
					<outline text="When you add a field to the users table, you have to add a line of code to setUserPrefs. Otherwise the new thing will fall back to its default value every time prefs are changed. " created="Sun, 05 Nov 2023 16:26:38 GMT"/>
					</outline>
				<outline text="#### 10/23/23; 9:42:27 AM by DW" created="Mon, 23 Oct 2023 13:42:24 GMT">
					<outline text="When checking if a feed changed it's possible for a comparison to fail, not sure which field, or why. " created="Mon, 23 Oct 2023 13:42:27 GMT"/>
					<outline text="I wrapped the check in a try statement so that should take care of the error. " created="Mon, 23 Oct 2023 13:42:56 GMT"/>
					</outline>
				<outline text="#### 10/20/23; 11:29:57 AM by DW" created="Fri, 20 Oct 2023 15:29:57 GMT">
					<outline text="config.flRiverBuildLogEnabled was defaulting true, and used up all the disk space on the feedland.org server. This was a mistake. I changed it to default to false. " created="Fri, 20 Oct 2023 15:29:58 GMT"/>
					</outline>
				<outline text="#### 10/20/23; 10:15:18 AM by DW" created="Fri, 20 Oct 2023 14:15:17 GMT">
					<outline text="If you try to subscribe to a feed but it's not a feed, it's html, we look for a &lt;link&gt; element in the html that points to an RSS or Atom feed, and use that instead." created="Fri, 20 Oct 2023 14:15:18 GMT"/>
					</outline>
				<outline text="#### 10/16/23; 11:31:41 AM by DW" created="Mon, 16 Oct 2023 15:31:40 GMT">
					<outline text="Fixed bug where urlReadingList would be undefined, would cause the server to crash." created="Mon, 16 Oct 2023 15:31:41 GMT"/>
					</outline>
				<outline text="#### 10/12/23; 8:55:00 AM by DW" created="Mon, 09 Oct 2023 21:56:10 GMT">
					<outline text="Support for reading lists is ready." created="Mon, 09 Oct 2023 21:56:11 GMT"/>
					</outline>
				<outline text="#### 10/4/23; 12:07:22 PM by DW" created="Wed, 04 Oct 2023 16:07:21 GMT">
					<outline text="Don't call clearCachedRivers if config.flUseSqlForSockets is true." created="Wed, 04 Oct 2023 16:07:22 GMT"/>
					</outline>
				<outline text="#### 10/3/23; 4:28:08 PM by DW" created="Tue, 03 Oct 2023 20:28:05 GMT">
					<outline text="Added debugging code for the river cache. " created="Tue, 03 Oct 2023 20:28:09 GMT"/>
					<outline text="We now log when we add a river to the cache, or delete a river because a feed it uses updated, or because it aged-out. " created="Tue, 03 Oct 2023 20:28:23 GMT"/>
					<outline text="The names of the routines should tell you which is happening." created="Tue, 03 Oct 2023 20:28:59 GMT"/>
					</outline>
				<outline text="#### 10/1/23; 10:19:34 AM by DW -- v0.6.25" created="Sun, 01 Oct 2023 14:19:34 GMT">
					<outline text="Export clearCachedRivers so it can be called from the SQL socket subscriber code." created="Sun, 01 Oct 2023 14:19:34 GMT"/>
					<outline text="When we send notification to users that a feed has updated, we can also send that info to the river cache, so we can turn caching back on." created="Sun, 01 Oct 2023 14:19:50 GMT"/>
					</outline>
				<outline text="#### 9/30/23; 10:32:11 AM by DW" isComment="true" created="Sat, 30 Sep 2023 14:32:10 GMT">
					<outline text="Didn't do this -- feature would have required major overhaul. " created="Sun, 01 Oct 2023 14:22:47 GMT">
						<outline text="New columns in subscriptions table: myTitle and myDescription." created="Sat, 30 Sep 2023 14:32:11 GMT"/>
						<outline text="Every time we generate a list of feeds for a user, we use their title and description according to the subscription record." created="Sat, 30 Sep 2023 14:32:49 GMT"/>
						</outline>
					</outline>
				<outline text="#### 9/27/23 AM by DW -- v0.6.24" created="Wed, 27 Sep 2023 15:41:55 GMT">
					<outline text="Exported convertItemList, needed it in the code for the SQL based websocket notifications. " created="Wed, 27 Sep 2023 15:42:00 GMT"/>
					</outline>
				<outline text="#### 9/13/23 by DW" created="Wed, 13 Sep 2023 13:55:05 GMT">
					<outline text="two new config values:" created="Wed, 13 Sep 2023 13:55:06 GMT">
						<outline text="flUseRiverCache, ctSecsLifeRiverCache" created="Wed, 13 Sep 2023 13:55:22 GMT"/>
						<outline text="they used to be internal constants with values true and 15 * 60 (15 minutes)." created="Wed, 13 Sep 2023 13:55:40 GMT"/>
						<outline text="i want it to be possible to turn the cache off altogether, and make each river query go to the database, or to make the lifetime much shorter, so we can get closer to real time updates. " created="Wed, 13 Sep 2023 13:56:24 GMT"/>
						</outline>
					</outline>
				<outline text="#### 8/18/23 by DW" created="Fri, 18 Aug 2023 16:22:15 GMT">
					<outline text="Started adding back console.log calls. " created="Fri, 18 Aug 2023 16:22:19 GMT">
						<outline text="checkOneFeed" created="Fri, 18 Aug 2023 16:22:52 GMT"/>
						<outline text="rssCloudRenew" created="Fri, 18 Aug 2023 17:09:49 GMT"/>
						</outline>
					</outline>
				<outline text="#### 7/14/23 by DW -- v0.6.14" created="Fri, 14 Jul 2023 15:45:30 GMT">
					<outline text="New -- config.maxGetAllUsers -- it's the number of users database.getAllUsers will return." created="Fri, 14 Jul 2023 15:45:31 GMT"/>
					</outline>
				<outline text="#### 6/8/23 by DW" created="Thu, 08 Jun 2023 14:37:08 GMT">
					<outline text="In getFeedlistFromOpml, return an error if the OPML file has no feeds." created="Thu, 08 Jun 2023 14:37:09 GMT"/>
					</outline>
				<outline text="#### 5/27/23 by DW" created="Sat, 27 May 2023 11:47:42 GMT">
					<outline text="When saving an item, remove null values before generating the query. " created="Sat, 27 May 2023 11:47:44 GMT"/>
					</outline>
				<outline text="#### 5/25/23 by DW -- v0.6.0" created="Thu, 25 May 2023 14:50:43 GMT">
					<outline text="added a new column to the user table for user prefs -- apps."/>
					<outline text="new apps must have a way of storing stuff on the server, start moving away from prefs.json file."/>
					<outline text="alter table users add apps json;"/>
					</outline>
				<outline text="#### 5/11/23 by DW" created="Thu, 11 May 2023 17:16:03 GMT">
					<outline text="Fixed all kinds of problems in setUserPrefs. See comment at the head of the routine. " created="Thu, 11 May 2023 17:16:04 GMT"/>
					</outline>
				<outline text="#### 5/7/23 by DW" created="Sun, 07 May 2023 14:58:43 GMT">
					<outline text="Major change to setUserPrefs." created="Sun, 07 May 2023 14:58:47 GMT"/>
					<outline text="Previously we would assign to all columns in a users table record, even if the caller only provided a few values." created="Sun, 07 May 2023 14:59:27 GMT"/>
					<outline text="This comes up in marktwain because it doesn't do anything with tabs and categories, for example, or news products." created="Sun, 07 May 2023 15:00:10 GMT"/>
					<outline text="If an element of an object has the value undefined, when we encode the values, it is changed to NULL and that overwrites whatever was in that column." created="Sun, 07 May 2023 15:00:39 GMT"/>
					<outline text="Now we add to the userRec more carefully, only adding values that are provided in the object provided by the caller." created="Sun, 07 May 2023 15:01:18 GMT"/>
					</outline>
				<outline text="#### 4/25/23 by DW" created="Tue, 25 Apr 2023 17:02:28 GMT">
					<outline text="New routine -- getRiverFromScreenname." created="Tue, 25 Apr 2023 18:01:42 GMT">
						<outline text="See this thread for the reason this was needed." created="Tue, 25 Apr 2023 18:01:48 GMT">
							<outline text="https://github.com/scripting/feedlandInstall/issues/31" created="Tue, 25 Apr 2023 18:02:04 GMT"/>
							</outline>
						</outline>
					<outline text="Turned off GitHub nightly backup by default." created="Tue, 25 Apr 2023 17:02:38 GMT">
						<outline text="config.githubBackup.enabled" created="Tue, 25 Apr 2023 17:03:02 GMT"/>
						</outline>
					</outline>
				<outline text="#### 3/21/23 by DW" created="Tue, 21 Mar 2023 13:51:05 GMT">
					<outline text="In likes feeds, the listname is not a twitter identifier." created="Tue, 21 Mar 2023 13:51:06 GMT"/>
					</outline>
				<outline text="#### 1/22/23 by DW -- 0.5.3" created="Sun, 22 Jan 2023 18:09:19 GMT">
					<outline text="If config.flLikesFeeds is false don't build likes feeds." created="Sun, 22 Jan 2023 18:09:20 GMT"/>
					</outline>
				<outline text="#### 10/24/22 by DW" created="Mon, 24 Oct 2022 14:30:29 GMT">
					<outline text="getAllUsers now returns ctSubs for each user." created="Mon, 24 Oct 2022 14:30:39 GMT"/>
					</outline>
				<outline text="#### 10/15/22 by DW" created="Sat, 15 Oct 2022 15:39:48 GMT">
					<outline text="alter table items add likes text;" created="Mon, 26 Sep 2022 19:22:34 GMT"/>
					</outline>
				<outline text="#### 9/26/22 by DW -- 0.4.20" created="Mon, 26 Sep 2022 19:53:54 GMT">
					<outline text="Added news product prefs to users table." created="Mon, 26 Sep 2022 19:53:55 GMT">
						<outline text="alter table users add newsproductCategoryList text;" created="Mon, 26 Sep 2022 19:22:34 GMT"/>
						<outline text="alter table users add newsproductTitle text;" created="Mon, 26 Sep 2022 19:22:34 GMT"/>
						<outline text="alter table users add newsproductDescription text;" created="Mon, 26 Sep 2022 19:22:34 GMT"/>
						<outline text="alter table users add newsproductImage text;" created="Mon, 26 Sep 2022 19:22:34 GMT"/>
						<outline text="alter table users add newsproductStyle text;" created="Mon, 26 Sep 2022 19:22:34 GMT"/>
						<outline text="alter table users add newsproductScript text;" created="Mon, 26 Sep 2022 19:22:34 GMT"/>
						</outline>
					</outline>
				<outline text="#### 9/23/22 by DW" created="Fri, 23 Sep 2022 16:37:37 GMT">
					<outline text="Backup the hotlist every night. " created="Fri, 23 Sep 2022 16:37:46 GMT"/>
					</outline>
				<outline text="#### 9/18/22 by DW" created="Sun, 18 Sep 2022 22:11:08 GMT">
					<outline text="select * from likes order by whenCreated desc limit 25;" created="Sun, 18 Sep 2022 22:11:16 GMT"/>
					</outline>
				<outline text="#### 9/17/22 by DW" created="Sat, 17 Sep 2022 13:22:04 GMT">
					<outline text="new fields for users" created="Sat, 17 Sep 2022 16:15:19 GMT">
						<outline text="* alter table users add ctStartups int default 0;" created="Sat, 17 Sep 2022 13:22:05 GMT"/>
						<outline text="* alter table users add whenLastStartup datetime;" created="Sat, 17 Sep 2022 13:22:05 GMT"/>
						<outline text="* alter table users add whenCreated datetime;" created="Sat, 17 Sep 2022 13:22:05 GMT"/>
						</outline>
					<outline text="&lt;i&gt;likes&lt;/i&gt; move into feedlanddatabase.js" created="Sat, 17 Sep 2022 16:14:59 GMT"/>
					<outline text="buildLikesFeed function in the interface" created="Sat, 17 Sep 2022 16:15:09 GMT"/>
					</outline>
				<outline text="#### 9/6/22 by DW -- 0.4.18" created="Tue, 06 Sep 2022 16:12:53 GMT">
					<outline text="pulling out a category for a user" created="Tue, 06 Sep 2022 16:53:32 GMT">
						<outline text="* select * from subscriptions where listname = 'davewiner' and categories like '%tech,%';" created="Tue, 06 Sep 2022 16:51:30 GMT"/>
						<outline text="* select * from subscriptions where categories like '%tech,%';" created="Tue, 06 Sep 2022 16:51:30 GMT"/>
						</outline>
					<outline text="Includes all the code that was previously in viewer.js." created="Tue, 06 Sep 2022 16:13:38 GMT">
						<outline text="* getSubscriptions" created="Thu, 28 Apr 2022 17:23:45 GMT"/>
						<outline text="* getUsersOpmlUrl" created="Thu, 28 Apr 2022 17:23:45 GMT"/>
						<outline text="* getUserOpmlSubscriptions" created="Thu, 28 Apr 2022 17:23:45 GMT"/>
						<outline text="* getHotlist" created="Fri, 27 May 2022 14:58:32 GMT"/>
						<outline text="* getHotlistOpml" created="Fri, 27 May 2022 14:58:32 GMT"/>
						</outline>
					</outline>
				<outline text="#### 8/30/22 by DW -- 0.4.16" created="Tue, 30 Aug 2022 15:21:33 GMT">
					<outline text="Started private &lt;a href=&quot;https://github.com/scripting/feedlandDatabase&quot;&gt;feedlandDatabase&lt;/a&gt; repo on GitHub." created="Tue, 30 Aug 2022 15:21:34 GMT"/>
					<outline text="Lots of work done since 8/19, no notes. Sorry. ;-)" created="Tue, 30 Aug 2022 15:21:57 GMT"/>
					</outline>
				<outline text="#### 8/19/22 by DW" created="Fri, 19 Aug 2022 15:17:10 GMT">
					<outline text="Subscribing is too slow. Trying an experiment, to return before all the items are checked. Let that happen in an independent thread." created="Fri, 19 Aug 2022 15:17:18 GMT"/>
					</outline>
				<outline text="#### 7/23/22 by DW" created="Sat, 23 Jul 2022 16:20:33 GMT">
					<outline text="New function: getRecentSubscriptions for the log page." created="Sat, 23 Jul 2022 16:20:44 GMT"/>
					</outline>
				<outline text="#### 7/20/22 by DW" created="Wed, 20 Jul 2022 15:07:16 GMT">
					<outline text="Add new column to feeds whoFirstSubscribed." created="Wed, 20 Jul 2022 15:07:30 GMT"/>
					<outline text="config.maxNewFeedSubscriptions says how many new subscriptions a user can do. no limit to the number of subscriptions overall." created="Wed, 20 Jul 2022 15:07:48 GMT"/>
					</outline>
				<outline text="#### 7/12/22 by DW" created="Tue, 12 Jul 2022 15:50:32 GMT">
					<outline text="Lots of changes with no notes, sorry." created="Tue, 12 Jul 2022 15:50:47 GMT"/>
					</outline>
				<outline text="#### 7/3/22 by DW -- 0.4.15" created="Sun, 03 Jul 2022 15:31:58 GMT">
					<outline text="Left out the &lt;i&gt;readWholeFile&lt;/i&gt; config callback linking to daveappserver, added. " created="Sun, 03 Jul 2022 15:32:08 GMT"/>
					<outline text="We're no longer maintaining feeds.opml. via config.flMaintainFeedsOpml. You should not turn it on, it won't work. It was there so that when you subscribed to a single feed, it would automatically be added to the user's feeds.opml file. But that was before we switched to using the simpler feed editor. It's still possible to use an outliner to edit your feed list, but it is no longer integrated with the database system. " created="Sun, 03 Jul 2022 17:10:13 GMT"/>
					</outline>
				<outline text="#### 7/2/22 by DW -- 0.4.11" created="Sat, 02 Jul 2022 17:19:28 GMT">
					<outline text="When looking for the next feed to check, only consider feeds with 1 or more subscribers." created="Sat, 02 Jul 2022 17:19:29 GMT"/>
					<outline text="The new version of the reallySimple package tells us how many seconds it took to read the feed, so we no longer have to figure that out for ourselves. " created="Sat, 02 Jul 2022 17:55:31 GMT"/>
					</outline>
				<outline text="#### 7/1/22 by DW -- 0.4.7" created="Fri, 01 Jul 2022 15:17:14 GMT">
					<outline text="When recording an error we were't setting whenLastError in the feedrec." created="Fri, 01 Jul 2022 15:17:15 GMT"/>
					<outline text="Fixed a bug that broke the ctSecs value in a feedrec." created="Fri, 01 Jul 2022 15:46:43 GMT"/>
					<outline text="Fixed a bug in ctConsecutiveErrors in a feedrec. It wasn't being reset to 0 when there was no error." created="Fri, 01 Jul 2022 15:55:30 GMT"/>
					<outline text="Log when we check a feed. I need to be able to see this." created="Fri, 01 Jul 2022 16:15:40 GMT"/>
					<outline text="ctSecs in the feedRec wasn't being set if the feed didn't change. " created="Sat, 02 Jul 2022 01:45:54 GMT"/>
					</outline>
				<outline text="#### 6/30/22 by DW" created="Thu, 30 Jun 2022 16:59:12 GMT">
					<outline text="Change to processSubscriptionList." created="Thu, 30 Jun 2022 16:59:13 GMT"/>
					<outline text="New optional param, flDeleteEnabled. Defaults true, which is the original behavior. It syncs the OPML text provided with your subscriptions. Any feeds that are present are subscribed to, any that are not are unsubbed. " created="Thu, 30 Jun 2022 16:59:28 GMT"/>
					<outline text="Set it false if you want to import an OPML list, not sync." created="Thu, 30 Jun 2022 17:00:19 GMT"/>
					</outline>
				<outline text="#### 6/27/22 by DW" created="Mon, 27 Jun 2022 15:00:45 GMT">
					<outline text="Pulled out of main project to be a standalone package, so you can build apps that access the database with a different or no user interface." created="Mon, 27 Jun 2022 15:00:46 GMT"/>
					<outline text="Calls to other modules, daveappserver and viewers, transitioned to callbacks in the options object passed to database.start." created="Mon, 27 Jun 2022 15:01:18 GMT"/>
					</outline>
				</outline>
			<outline text="package.json">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;feedlanddatabase&quot;,"/>
					<outline text="&quot;description&quot;: &quot;FeedLand code that manages the tables for users, feeds, items, subscriptions, likes.&quot;," created="Sun, 22 Jan 2023 15:46:22 GMT"/>
					<outline text="&quot;version&quot;: &quot;0.8.1&quot;,"/>
					<outline text="&quot;author&quot;: &quot;Dave Winer &lt;dave@scripting.com&gt;&quot;,"/>
					<outline text="&quot;main&quot;: &quot;database.js&quot;,"/>
					<outline text="&quot;license&quot;: &quot;GPLV2&quot;," created="Wed, 18 Jan 2023 17:19:16 GMT"/>
					<outline text="&quot;files&quot;: [" created="Thu, 24 Feb 2022 17:55:44 GMT">
						<outline text="&quot;database.js&quot;," created="Thu, 24 Feb 2022 17:55:59 GMT"/>
						<outline text="&quot;worknotes.md&quot;," created="Tue, 30 Aug 2022 15:28:09 GMT"/>
						<outline text="&quot;database.md&quot;" created="Tue, 30 Aug 2022 15:28:09 GMT"/>
						<outline text="]," created="Thu, 24 Feb 2022 17:55:50 GMT"/>
						</outline>
					<outline text="&quot;repository&quot;: {">
						<outline text="&quot;type&quot;: &quot;git&quot;,"/>
						<outline text="&quot;url&quot;: &quot;https://github.com/scripting/feedland/tree/main/database&quot;"/>
						<outline text="},"/>
						</outline>
					<outline text="&quot;peerDependencies&quot;: {" created="Fri, 22 Sep 2023 14:00:59 GMT">
						<outline text="&quot;davesql&quot;: &quot;^0.6.0&quot;"/>
						<outline text="}," created="Fri, 22 Sep 2023 14:01:04 GMT"/>
						</outline>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;request&quot;: &quot;*&quot;,"/>
						<outline text="&quot;md5&quot;: &quot;*&quot;,"/>
						<outline text="&quot;sanitize-html&quot;: &quot;*&quot;," created="Mon, 08 Mar 2021 15:15:44 GMT"/>
						<outline text="&quot;marked&quot;: &quot;3.0.8&quot;,"/>
						<outline text="&quot;daveutils&quot;: &quot;*&quot;,"/>
						<outline text="&quot;davetwitter&quot;: &quot;*&quot;," isComment="true"/>
						<outline text="&quot;daveappserver&quot;: &quot;*&quot;," isComment="true"/>
						<outline text="&quot;daverss&quot;: &quot;^0.6.4&quot;,"/>
						<outline text="&quot;daves3&quot;: &quot;*&quot;,"/>
						<outline text="&quot;nodejs-websocket&quot;: &quot;*&quot;,"/>
						<outline text="&quot;davegithub&quot;: &quot;*&quot;," created="Fri, 30 Sep 2022 12:39:57 GMT"/>
						<outline text="&quot;reallysimple&quot;: &quot;^0.4.26&quot;,"/>
						<outline text="&quot;feedhunter&quot;: &quot;*&quot;," created="Wed, 08 Nov 2023 19:57:11 GMT"/>
						<outline text="&quot;xml2js&quot;: &quot;*&quot;,"/>
						<outline text="&quot;opml&quot;: &quot;*&quot;" created="Fri, 19 Nov 2021 17:19:34 GMT"/>
						<outline text="} "/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="database.js" created="Mon, 27 Jun 2022 13:56:59 GMT">
				<outline text="var myProductName = &quot;feedlandDatabase&quot;, myVersion = &quot;0.8.1&quot;;  " created="Mon, 03 Feb 2014 03:21:03 GMT" pgfnum="36831"/>
				<outline text="" created="Mon, 27 Jun 2022 14:09:14 GMT"/>
				<outline text="exports.start = start;"/>
				<outline text="exports.addSubscription = addSubscription;"/>
				<outline text="exports.deleteSubscription = deleteSubscription;"/>
				<outline text="exports.getUserSubcriptions = getUserSubcriptions;"/>
				<outline text="exports.checkFeedAndItems = checkFeedAndItems;"/>
				<outline text="exports.checkOneFeed = checkOneFeed;" created="Sun, 03 Apr 2022 15:12:18 GMT"/>
				<outline text="exports.processSubscriptionList = processSubscriptionList;"/>
				<outline text="exports.updateNextFeedIfReady = updateNextFeedIfReady;"/>
				<outline text="exports.getUpdatedFeed = getUpdatedFeed;"/>
				<outline text="exports.getDatabaseFeed = getDatabaseFeed;"/>
				<outline text="exports.getFeed = getFeed;"/>
				<outline text="exports.getRiver = getRiver;"/>
				<outline text="exports.deleteItem = deleteItem; //4/22/22 by DW" created="Fri, 22 Apr 2022 14:03:53 GMT"/>
				<outline text="exports.saveFeed = saveFeed; //4/28/22 by DW" created="Fri, 22 Apr 2022 14:03:53 GMT"/>
				<outline text="exports.saveItem = saveItem; " created="Fri, 22 Apr 2022 14:03:53 GMT"/>
				<outline text="exports.convertDatabaseFeed = convertDatabaseFeed;" created="Thu, 28 Apr 2022 17:23:45 GMT"/>
				<outline text="exports.convertDatabaseItem = convertDatabaseItem;" created="Thu, 28 Apr 2022 17:23:45 GMT"/>
				<outline text="exports.convertItemList = convertItemList; //9/26/23 by DW" created="Thu, 28 Apr 2022 17:23:45 GMT"/>
				<outline text="exports.isFeedInDatabase = isFeedInDatabase;" created="Thu, 28 Apr 2022 19:30:33 GMT"/>
				<outline text="exports.isItemInDatabase = isItemInDatabase;" created="Thu, 28 Apr 2022 19:30:33 GMT"/>
				<outline text="exports.updateSocketSubscribers = updateSocketSubscribers;" created="Fri, 29 Apr 2022 14:07:38 GMT"/>
				<outline text="exports.getNexItemtId = getNexItemtId;" created="Sat, 19 Mar 2022 14:52:26 GMT"/>
				<outline text="exports.getItemFromDatabase = getItemFromDatabase; //5/7/22 by DW" created="Sat, 19 Mar 2022 14:52:26 GMT"/>
				<outline text="exports.getFollowers = getFollowers; //5/18/22 by DW" created="Sat, 19 Mar 2022 14:52:26 GMT"/>
				<outline text="exports.isUserSubscribed = isUserSubscribed; //5/18/22 by DW" created="Sat, 19 Mar 2022 14:52:26 GMT"/>
				<outline text="exports.setFeedSubsCount = setFeedSubsCount; //5/21/22 by DW" created="Sat, 19 Mar 2022 14:52:26 GMT"/>
				<outline text="exports.subscribeToFeed = subscribeToFeed; //5/27/22 by DW" created="Fri, 27 May 2022 14:58:32 GMT"/>
				<outline text="exports.getRecentSubscriptions = getRecentSubscriptions; //7/23/22 by DW" created="Fri, 27 May 2022 14:58:32 GMT"/>
				<outline text="exports.getRiverFromList = getRiverFromList; //8/3/22 by DW" created="Fri, 27 May 2022 14:58:32 GMT"/>
				<outline text="exports.getRiverFromOpml = getRiverFromOpml; //8/21/22 by DW" created="Fri, 27 May 2022 14:58:32 GMT"/>
				<outline text="exports.getRiverFromScreenname = getRiverFromScreenname; //4/25/23 by DW" created="Tue, 25 Apr 2023 18:02:30 GMT"/>
				<outline text="exports.getRiverFromReadingList = getRiverFromReadingList; //11/12/23 by DW" created="Sun, 12 Nov 2023 15:25:38 GMT"/>
				<outline text="" created="Tue, 25 Apr 2023 18:02:31 GMT"/>
				<outline text="exports.backupDatabase = backupDatabase; //8/22/22 by DW" created="Mon, 22 Aug 2022 18:35:01 GMT"/>
				<outline text="exports.getFeedItems = getFeedItems; //8/31/22 by DW" created="Wed, 31 Aug 2022 14:44:28 GMT"/>
				<outline text="exports.setCategoriesForSubscription = setCategoriesForSubscription; //9/4/22 by DW" created="Sun, 04 Sep 2022 21:47:54 GMT"/>
				<outline text="" created="Tue, 06 Sep 2022 15:43:06 GMT"/>
				<outline text="exports.getSubscriptions = getSubscriptions; //moved from viewers.js -- 9/6/22 by DW" created="Thu, 28 Apr 2022 17:23:45 GMT"/>
				<outline text="exports.getUsersOpmlUrl = getUsersOpmlUrl; //moved from viewers.js -- 9/6/22 by DW" created="Thu, 28 Apr 2022 17:23:45 GMT"/>
				<outline text="exports.getUserOpmlSubscriptions = getUserOpmlSubscriptions; //moved from viewers.js -- 9/6/22 by DW" created="Thu, 28 Apr 2022 17:23:45 GMT"/>
				<outline text="exports.getHotlist = getHotlist; //moved from viewers.js -- 9/6/22 by DW" created="Fri, 27 May 2022 14:58:32 GMT"/>
				<outline text="exports.getHotlistOpml = getHotlistOpml; //moved from viewers.js -- 9/6/22 by DW" created="Fri, 27 May 2022 14:58:32 GMT"/>
				<outline text="exports.getFeedSearch = getFeedSearch; //12/26/22 by DW" created="Mon, 26 Dec 2022 17:12:44 GMT"/>
				<outline text="" created="Tue, 06 Sep 2022 16:55:46 GMT"/>
				<outline text="exports.findUserWithScreenname = findUserWithScreenname; //9/16/22 by DW" created="Tue, 06 Sep 2022 17:15:44 GMT"/>
				<outline text="exports.findUserWithEmail = findUserWithEmail; //11/4/23 by DW" created="Sat, 04 Nov 2023 14:52:08 GMT"/>
				<outline text="" created="Sat, 04 Nov 2023 14:52:03 GMT"/>
				<outline text="exports.setUserPrefs = setUserPrefs; //9/16/22 by DW" created="Tue, 06 Sep 2022 16:55:46 GMT"/>
				<outline text="exports.getAllUsers = getAllUsers; //9/16/22 by DW" created="Tue, 06 Sep 2022 17:15:44 GMT"/>
				<outline text="exports.getUserCategories = getUserCategories; //9/19/22 by DW" created="Mon, 19 Sep 2022 13:47:28 GMT"/>
				<outline text="exports.getUserPrefs = getUserPrefs; //9/26/22 by DW" created="Mon, 26 Sep 2022 19:53:05 GMT"/>
				<outline text="exports.getUserInfo = getUserInfo; //11/10/23 by DW" created="Fri, 10 Nov 2023 16:05:31 GMT"/>
				<outline text="" created="Thu, 15 Sep 2022 16:14:35 GMT"/>
				<outline text="exports.getRiverFromCategory = getRiverFromCategory; //9/15/22 by DW" created="Tue, 06 Sep 2022 17:15:44 GMT"/>
				<outline text="exports.getFeedsInCategory = getFeedsInCategory; //9/19/22 by DW" created="Mon, 19 Sep 2022 18:38:38 GMT"/>
				<outline text="exports.getRiverFromEverything = getRiverFromEverything; //10/14/22 by DW" created="Mon, 19 Sep 2022 18:38:38 GMT"/>
				<outline text="exports.getRiverFromHotlist = getRiverFromHotlist; //10/15/22 by DW" created="Mon, 19 Sep 2022 18:38:38 GMT"/>
				<outline text="exports.getRiverFromUserFeeds = getRiverFromUserFeeds; //12/3/22 by DW" created="Mon, 19 Sep 2022 18:38:38 GMT"/>
				<outline text="exports.clearCachedRivers = clearCachedRivers; //10/1/23 by DW" created="Sun, 01 Oct 2023 14:19:18 GMT"/>
				<outline text="" created="Sat, 17 Sep 2022 15:00:29 GMT"/>
				<outline text="exports.isLiked = isLiked; //9/17/22 by DW"/>
				<outline text="exports.toggleItemLike = toggleItemLike; //9/17/22 by DW"/>
				<outline text="exports.getLikes = getLikes; //9/17/22 by DW"/>
				<outline text="exports.getALotOLikes = getALotOLikes; //9/17/22 by DW" isComment="true"/>
				<outline text="exports.buildLikesFeed = buildLikesFeed; //9/17/22 by DW" created="Sat, 17 Sep 2022 16:15:53 GMT"/>
				<outline text="" created="Sun, 09 Oct 2022 14:41:29 GMT"/>
				<outline text="exports.renewNextSubscriptionIfReady = renewNextSubscriptionIfReady; //10/9/22 by DW" created="Sun, 09 Oct 2022 14:41:30 GMT"/>
				<outline text="exports.renewFeedNow = renewFeedNow; //10/9/22 by DW" created="Sun, 09 Oct 2022 14:41:30 GMT"/>
				<outline text="" created="Mon, 10 Oct 2022 14:43:57 GMT"/>
				<outline text="exports.getCurrentRiverBuildLog = getCurrentRiverBuildLog; //10/10/22 by DW" created="Mon, 10 Oct 2022 14:43:57 GMT"/>
				<outline text="exports.isFeedInRiver = isFeedInRiver; //2/1/23 by DW" created="Wed, 01 Feb 2023 14:37:27 GMT"/>
				<outline text="" created="Thu, 25 May 2023 14:50:25 GMT"/>
				<outline text="exports.getPrefsFromJson = getPrefsFromJson; //5/25/23 by DW" isComment="true" created="Thu, 25 May 2023 14:49:40 GMT"/>
				<outline text="exports.setPrefsInJson = setPrefsInJson; //5/25/23 by DW" isComment="true" created="Thu, 25 May 2023 14:49:40 GMT"/>
				<outline text="" created="Thu, 01 Jun 2023 18:46:26 GMT"/>
				<outline text="exports.getFeedlistFromOpml = getFeedlistFromOpml; //6/1/23 by DW" created="Thu, 01 Jun 2023 18:46:26 GMT"/>
				<outline text="" created="Mon, 09 Oct 2023 21:55:27 GMT"/>
				<outline text="exports.checkReadingList = checkReadingList; //10/9/23 by DW" created="Mon, 09 Oct 2023 21:55:28 GMT"/>
				<outline text="exports.subscribeToReadingList = subscribeToReadingList; //10/9/23 by DW" created="Mon, 09 Oct 2023 21:55:28 GMT"/>
				<outline text="exports.checkNextReadingListfReady = checkNextReadingListfReady; //10/10/23 by DW" created="Tue, 10 Oct 2023 21:34:51 GMT"/>
				<outline text="exports.getReadingListSubscriptions = getReadingListSubscriptions; //10/13/23 by DW" created="Fri, 13 Oct 2023 13:42:20 GMT"/>
				<outline text="exports.deleteReadingListSubscription = deleteReadingListSubscription; //10/13/23 by DW" created="Fri, 13 Oct 2023 13:42:20 GMT"/>
				<outline text="exports.getReadingListsInfo = getReadingListsInfo; //10/19/23 by DW" created="Fri, 13 Oct 2023 14:14:21 GMT"/>
				<outline text="exports.getReadingListFollowers = getReadingListFollowers; //10/28/23 by DW" created="Sat, 28 Oct 2023 22:27:34 GMT"/>
				<outline text="exports.checkSubsForOneUserAndOneReadingList = checkSubsForOneUserAndOneReadingList; //12/13/23 by DW" created="Sat, 28 Oct 2023 22:27:34 GMT"/>
				<outline text="" created="Fri, 01 Dec 2023 14:22:03 GMT"/>
				<outline text="exports.addMacroToPagetable = addMacroToPagetable; //12/1/23 by DW" created="Fri, 01 Dec 2023 14:22:04 GMT"/>
				<outline text="" created="Sun, 21 Aug 2022 18:07:17 GMT"/>
				<outline text="const fs = require (&quot;fs&quot;);" created="Sat, 20 Feb 2021 22:03:12 GMT"/>
				<outline text="const md5 = require (&quot;md5&quot;);"/>
				<outline text="const marked = require (&quot;marked&quot;); //8/25/22 by DW"/>
				<outline text="const sanitizeHtml = require (&quot;sanitize-html&quot;); //9/11/22 by DW" created="Sun, 11 Sep 2022 13:12:17 GMT"/>
				<outline text="const utils = require (&quot;daveutils&quot;);" created="Sat, 20 Feb 2021 22:03:12 GMT"/>
				<outline text="const davesql = require (&quot;davesql&quot;);"/>
				<outline text="const opml = require (&quot;opml&quot;);" created="Sat, 20 Feb 2021 22:03:12 GMT"/>
				<outline text="const daveappserver = require (&quot;daveappserver&quot;); " isComment="true"/>
				<outline text="const daveappserver = require (&quot;./lib/daveappserver&quot;); " isComment="true"/>
				<outline text="const reallysimple = require (&quot;reallysimple&quot;);" created="Sat, 20 Feb 2021 22:03:12 GMT"/>
				<outline text="const request = require (&quot;request&quot;); //8/21/22 by DW" created="Sat, 20 Feb 2021 22:03:12 GMT"/>
				<outline text="const viewers = require (&quot;./viewers.js&quot;);" isComment="true" created="Fri, 20 May 2022 13:58:56 GMT"/>
				<outline text="const rss = require (&quot;daverss&quot;); //9/17/22 by DW" created="Sat, 20 Feb 2021 22:03:12 GMT"/>
				<outline text="const s3 = require (&quot;daves3&quot;);"/>
				<outline text="const davegithub = require (&quot;davegithub&quot;); //9/30/22 by DW"/>
				<outline text="const davegithub = require (&quot;../lib/davegithub.js&quot;); //9/30/22 by DW" isComment="true"/>
				<outline text="const feedhunter = require (&quot;feedhunter&quot;); //11/8/23 by DW"/>
				<outline text="const xml2js = require (&quot;xml2js&quot;); //11/17/23 by DW"/>
				<outline text="" created="Sat, 19 Mar 2022 14:37:27 GMT"/>
				<outline text="var config = {" created="Sat, 19 Mar 2022 14:52:27 GMT">
					<outline text="flEnableNewUsers: true, //12/12/22 by DW" created="Mon, 12 Dec 2022 14:23:47 GMT"/>
					<outline text="maxRiverItems: 100," created="Wed, 23 Mar 2022 14:17:16 GMT"/>
					<outline text="maxFeedUrlLength: 512,"/>
					<outline text="flUpdateFeedsInBackground: true,"/>
					<outline text="minSecsBetwIndividualFeedCheck: 60 * 5, //7/7/22 by DW" created="Thu, 07 Jul 2022 16:00:05 GMT"/>
					<outline text="maxLengthFeedTitle: 255,"/>
					<outline text="maxLengthFeedDescription: 512, "/>
					<outline text="maxFeedMetadata: 255, //copyright, generator, language, managingEditor, etc" created="Wed, 30 Mar 2022 13:53:41 GMT"/>
					<outline text="maxGuidLength: 255,"/>
					<outline text="maxListNameLength: 255,"/>
					<outline text="flSkipDuplicateTitles: true,"/>
					<outline text="flMaintainFeedsOpml: false, //7/3/22 by DW" created="Sun, 03 Jul 2022 17:09:46 GMT"/>
					<outline text="maxNewFeedSubscriptions: 100, //7/20/22 by DW" created="Wed, 20 Jul 2022 15:08:54 GMT"/>
					<outline text="maxRecentSubscriptions: 250, //7/23/22 by DW" created="Sat, 23 Jul 2022 16:24:00 GMT"/>
					<outline text="backupFolder: &quot;data/backups/&quot;, //8/22/22 by DW" created="Mon, 22 Aug 2022 18:29:40 GMT"/>
					<outline text="" created="Wed, 31 Aug 2022 12:38:01 GMT"/>
					<outline text="flCheckZeroSubsFeeds: true, //8/31/22 by DW" created="Wed, 31 Aug 2022 12:38:01 GMT"/>
					<outline text="" created="Sat, 17 Sep 2022 16:42:31 GMT"/>
					<outline text="maxRssItems: 25, //9/17/22 by DW" created="Sat, 17 Sep 2022 16:42:31 GMT"/>
					<outline text="" created="Thu, 27 Oct 2022 17:31:50 GMT"/>
					<outline text="s3LikesPath: &quot;/data.feedland.org/likes/&quot;, //10/27/22 by DW" created="Thu, 27 Oct 2022 17:26:18 GMT"/>
					<outline text="s3PathLikesFeed: &quot;/data.feedland.org/likes.xml&quot;," isComment="true" created="Sat, 17 Sep 2022 16:55:31 GMT"/>
					<outline text="urlPathLikesFeed: &quot;http://data.feedland.org/likes.xml&quot;," isComment="true" created="Sat, 17 Sep 2022 16:55:31 GMT"/>
					<outline text="" created="Fri, 30 Sep 2022 12:14:16 GMT"/>
					<outline text="githubBackup: { //9/30/22 by DW" created="Fri, 30 Sep 2022 12:14:16 GMT">
						<outline text="enabled: false, //4/25/23 by DW" created="Fri, 30 Sep 2022 13:33:44 GMT"/>
						<outline text="username: &quot;scripting&quot;,"/>
						<outline text="repo: &quot;test1&quot;,"/>
						<outline text="basepath: &quot;server/&quot;,"/>
						<outline text="password: &quot;&quot;, //overwritten when we load config.json"/>
						<outline text="committer: {">
							<outline text="name: &quot;Dave Winer&quot;,"/>
							<outline text="email: &quot;dave.winer@gmail.com&quot;"/>
							<outline text="},"/>
							</outline>
						<outline text="message: &quot;Backup of FeedLand server&quot;,"/>
						<outline text="userAgent: &quot;&quot;"/>
						<outline text="}," created="Fri, 30 Sep 2022 12:14:23 GMT"/>
						</outline>
					<outline text="flRiverBuildLogEnabled: false, //4/29/24 by DW" created="Mon, 10 Oct 2022 13:50:15 GMT"/>
					<outline text="riverBuildLogFolder: &quot;data/riverBuildLogs/&quot;," created="Mon, 22 Aug 2022 18:29:40 GMT"/>
					<outline text="" created="Sat, 10 Dec 2022 00:41:16 GMT"/>
					<outline text="blockedUsers: [" created="Sat, 10 Dec 2022 00:41:17 GMT">
						<outline text="]," created="Sat, 10 Dec 2022 00:41:24 GMT"/>
						</outline>
					<outline text="" created="Wed, 31 Aug 2022 12:38:01 GMT"/>
					<outline text="maxGetAllUsers: 100, //7/14/23 by DW" created="Fri, 14 Jul 2023 15:45:11 GMT"/>
					<outline text="" created="Wed, 13 Sep 2023 13:57:30 GMT"/>
					<outline text="flUseRiverCache: true, //9/13/23 by DW" created="Wed, 13 Sep 2023 13:57:30 GMT"/>
					<outline text="ctSecsLifeRiverCache: 5 * 60, //9/13/23 by DW" created="Wed, 13 Sep 2023 13:57:39 GMT"/>
					<outline text="" created="Mon, 20 Nov 2023 13:48:27 GMT"/>
					<outline text="flCheckForDeleted: false, //11/20/23 by DW" created="Mon, 20 Nov 2023 13:48:27 GMT"/>
					<outline text="ctRiverCutoffDays: 365, //2/7/24 by DW" created="Wed, 07 Feb 2024 21:19:31 GMT"/>
					<outline text="flLogCheckFeed: true, //2/28/24 by DW" created="Wed, 28 Feb 2024 17:25:50 GMT"/>
					<outline text="" created="Sat, 31 May 2025 18:17:03 GMT"/>
					<outline text="legalTags: { //5/31/25 by DW" created="Sun, 11 Sep 2022 14:15:43 GMT">
						<outline text="allowedTags: [" created="Sun, 11 Sep 2022 14:16:06 GMT">
							<outline text="&quot;p&quot;, &quot;br&quot;" created="Sun, 11 Sep 2022 14:18:05 GMT"/>
							<outline text="]," created="Sun, 11 Sep 2022 14:17:09 GMT"/>
							</outline>
						<outline text="allowedAttributes: {" created="Sun, 11 Sep 2022 14:16:17 GMT">
							<outline text="}" created="Sun, 11 Sep 2022 14:16:27 GMT"/>
							</outline>
						<outline text="}," created="Sun, 11 Sep 2022 14:15:53 GMT"/>
						</outline>
					<outline text="" created="Fri, 14 Jul 2023 15:45:17 GMT"/>
					<outline text="getUserOpmlSubscriptions: function (username, catname, callback) { //6/27/22 by DW" created="Mon, 27 Jun 2022 14:53:39 GMT">
						<outline text="}," created="Mon, 27 Jun 2022 14:53:55 GMT"/>
						</outline>
					<outline text="getStats: function () { //6/27/22 by DW" created="Mon, 27 Jun 2022 14:56:36 GMT">
						<outline text="return ({});" created="Mon, 27 Jun 2022 14:56:53 GMT"/>
						<outline text="}," created="Mon, 27 Jun 2022 14:56:49 GMT"/>
						</outline>
					<outline text="notifySocketSubscribers: function (verb, payload, flPayloadIsString, callbackToQualify) { //6/27/22 by DW" created="Mon, 27 Jun 2022 14:57:54 GMT">
						<outline text="}," created="Mon, 27 Jun 2022 14:58:00 GMT"/>
						</outline>
					<outline text="saveStats: function (theStats) { //6/27/22 by DW" created="Mon, 27 Jun 2022 14:57:54 GMT">
						<outline text="}," created="Mon, 27 Jun 2022 14:58:00 GMT"/>
						</outline>
					<outline text="writeWholeFile: function (screenname, relpath, filetext, callback) { //6/27/22 by DW" created="Mon, 27 Jun 2022 14:57:54 GMT">
						<outline text="callback ();" created="Sun, 03 Jul 2022 15:29:24 GMT"/>
						<outline text="}," created="Mon, 27 Jun 2022 14:58:00 GMT"/>
						</outline>
					<outline text="readWholeFile: function (screenname, relpath, callback) { //7/3/22 by DW" created="Sun, 03 Jul 2022 15:28:34 GMT">
						<outline text="callback ({message: &quot;The file was not read.&quot;});" created="Sun, 03 Jul 2022 15:29:24 GMT"/>
						<outline text="}," created="Sun, 03 Jul 2022 15:29:00 GMT"/>
						</outline>
					<outline text="buildUsersFeed: function (screenname, callback) { //11/6/22 by DW" created="Sun, 06 Nov 2022 17:01:02 GMT">
						<outline text="if (callback !== undefined) {" created="Sun, 06 Nov 2022 17:02:13 GMT">
							<outline text="callback (undefined);" created="Sun, 06 Nov 2022 17:02:05 GMT"/>
							<outline text="}" created="Sun, 06 Nov 2022 17:02:18 GMT"/>
							</outline>
						<outline text="}" created="Sun, 06 Nov 2022 17:01:45 GMT"/>
						</outline>
					<outline text="};" created="Sat, 19 Mar 2022 14:52:29 GMT"/>
					</outline>
				<outline text="var stats = {" created="Mon, 21 Mar 2022 14:41:26 GMT">
					<outline text="itemSerialNum: 1"/>
					<outline text="};" created="Mon, 21 Mar 2022 14:41:30 GMT"/>
					</outline>
				<outline text="" created="Mon, 22 Aug 2022 13:26:41 GMT"/>
				<outline text="var riverCache = new Object (); //8/22/22 by DW" created="Mon, 22 Aug 2022 12:37:25 GMT"/>
				<outline text="const flUseRiverCache = true; //9/14/22 by DW -- https://github.com/scripting/feedlandSupport/issues/54" isComment="true" created="Wed, 14 Sep 2022 13:41:46 GMT"/>
				<outline text="const ctSecsLifeRiverCache = 15 * 60; //cached rivers age-out after 60 minutes -- changed from 15 minutes -- 2/2/23 by DW" isComment="true" created="Thu, 15 Sep 2022 14:02:58 GMT"/>
				<outline text="" created="Mon, 10 Oct 2022 13:51:06 GMT"/>
				<outline text="var riverBuildLog = new Array (); //10/10/22 by DW" created="Mon, 10 Oct 2022 13:44:37 GMT"/>
				<outline text="var flRiverBuildLogChanged = false;" created="Mon, 10 Oct 2022 14:02:34 GMT"/>
				<outline text="" created="Sat, 19 Mar 2022 14:38:09 GMT"/>
				<outline text="function initStats () {" created="Mon, 21 Mar 2022 16:30:12 GMT">
					<outline text="const appStats = config.getStats ();" created="Mon, 21 Mar 2022 16:30:19 GMT"/>
					<outline text="if (appStats.itemSerialNum !== undefined) {" created="Mon, 21 Mar 2022 16:31:06 GMT">
						<outline text="stats.itemSerialNum = appStats.itemSerialNum;" created="Mon, 21 Mar 2022 16:30:31 GMT"/>
						<outline text="}" created="Mon, 21 Mar 2022 16:31:12 GMT"/>
						</outline>
					<outline text="}" created="Mon, 21 Mar 2022 16:30:36 GMT"/>
					</outline>
				<outline text="function myConsoleLog (theLogMessage) { //10/11/23 by DW" created="Wed, 11 Oct 2023 12:20:38 GMT">
					<outline text="const whenstring = new Date ().toLocaleTimeString([], {hour: '2-digit', minute: '2-digit'}); //6/28/24 by DW" created="Tue, 24 May 2022 16:37:58 GMT"/>
					<outline text="const whenstring = new Date ().toLocaleTimeString ();" isComment="true" created="Wed, 11 Oct 2023 12:22:28 GMT"/>
					<outline text="console.log (whenstring + &quot;: &quot; + theLogMessage);" created="Wed, 11 Oct 2023 12:21:06 GMT"/>
					<outline text="}" created="Wed, 11 Oct 2023 12:20:54 GMT"/>
					</outline>
				<outline text="function notNull (val) {" created="Wed, 23 Mar 2022 14:49:40 GMT">
					<outline text="if (val === undefined) {" created="Wed, 23 Mar 2022 14:49:56 GMT">
						<outline text="return (false);" created="Wed, 23 Mar 2022 14:50:04 GMT"/>
						<outline text="}" created="Wed, 23 Mar 2022 14:50:07 GMT"/>
						</outline>
					<outline text="if (val == null) {" created="Wed, 23 Mar 2022 14:50:12 GMT">
						<outline text="return (false);" created="Wed, 23 Mar 2022 14:50:22 GMT"/>
						<outline text="}" created="Wed, 23 Mar 2022 14:50:27 GMT"/>
						</outline>
					<outline text="return (true);" created="Wed, 23 Mar 2022 14:50:28 GMT"/>
					<outline text="}" created="Wed, 23 Mar 2022 14:49:48 GMT"/>
					</outline>
				<outline text="function checkNull (val) {" created="Wed, 23 Mar 2022 14:51:36 GMT">
					<outline text="if (notNull (val)) {" created="Wed, 23 Mar 2022 14:51:49 GMT">
						<outline text="return (val);" created="Wed, 23 Mar 2022 14:52:03 GMT"/>
						<outline text="}" created="Wed, 23 Mar 2022 14:51:57 GMT"/>
						</outline>
					<outline text="return (undefined);" created="Wed, 23 Mar 2022 14:52:12 GMT"/>
					<outline text="}" created="Wed, 23 Mar 2022 14:51:45 GMT"/>
					</outline>
				<outline text="function removeNullValuesFromObject (obj) { //9/26/22 by DW" created="Sat, 30 Jul 2022 15:30:50 GMT">
					<outline text="Changes" isComment="true" created="Sat, 30 Jul 2022 15:31:26 GMT">
						<outline text="9/26/22; 3:51:41 PM by DW" created="Sat, 30 Jul 2022 15:31:28 GMT">
							<outline text="Change null values to undefined -- I don't want to pass null values through the API." created="Sat, 30 Jul 2022 15:31:29 GMT"/>
							</outline>
						</outline>
					<outline text="for (var x in obj) { " created="Sat, 21 May 2022 14:00:35 GMT">
						<outline text="if (obj [x] == null) {" created="Sat, 21 May 2022 14:00:41 GMT">
							<outline text="obj [x] = undefined;" created="Sat, 21 May 2022 14:00:51 GMT"/>
							<outline text="}" created="Sat, 21 May 2022 14:01:02 GMT"/>
							</outline>
						<outline text="}" created="Sat, 21 May 2022 14:00:41 GMT"/>
						</outline>
					<outline text="return (obj);" created="Mon, 26 Sep 2022 20:04:14 GMT"/>
					<outline text="}" created="Sat, 30 Jul 2022 15:31:07 GMT"/>
					</outline>
				<outline text="function removeNullValues (result) { //9/6/22 by DW" created="Sat, 30 Jul 2022 15:30:50 GMT">
					<outline text="Changes" isComment="true" created="Sat, 30 Jul 2022 15:31:26 GMT">
						<outline text="10/13/23; 9:54:22 AM by DW" created="Fri, 13 Oct 2023 13:54:22 GMT">
							<outline text="Return the result, I used it this way, in error, but it makes sense! ;-)" created="Fri, 13 Oct 2023 13:54:22 GMT"/>
							</outline>
						<outline text="7/30/22; 11:31:28 AM by DW" created="Sat, 30 Jul 2022 15:31:28 GMT">
							<outline text="Change null values to undefined -- I don't want to pass null values through the API." created="Sat, 30 Jul 2022 15:31:29 GMT"/>
							</outline>
						</outline>
					<outline text="result.forEach (function (sub) {">
						<outline text="for (var x in sub) { " created="Sat, 21 May 2022 14:00:35 GMT">
							<outline text="if (sub [x] == null) {" created="Sat, 21 May 2022 14:00:41 GMT">
								<outline text="sub [x] = undefined;" created="Sat, 21 May 2022 14:00:51 GMT"/>
								<outline text="}" created="Sat, 21 May 2022 14:01:02 GMT"/>
								</outline>
							<outline text="}" created="Sat, 21 May 2022 14:00:41 GMT"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="return (result); //10/13/23 by DW" created="Fri, 13 Oct 2023 13:54:41 GMT"/>
					<outline text="}" created="Sat, 30 Jul 2022 15:31:07 GMT"/>
					</outline>
				<outline text="function buildParamList (paramtable) { //12/10/22 by DW" created="Sat, 09 Aug 2014 15:39:08 GMT" pgfnum="43181">
					<outline text="Changes" isComment="true" created="Wed, 04 Aug 2021 14:47:01 GMT">
						<outline text="12/10/22; 10:20:59 AM by DW" created="Sat, 10 Dec 2022 15:20:59 GMT">
							<outline text="Cribbed from feedToMasto." created="Sat, 10 Dec 2022 15:20:59 GMT"/>
							</outline>
						<outline text="8/4/21; 10:47:04 AM by DW" created="Wed, 04 Aug 2021 14:47:03 GMT">
							<outline text="Copied twBuildParamList. If an element of params is undefined, don't include it. We were encoding it as a string, &quot;undefined&quot; and all of a sudden on the other side, in davetwitter, it was calling it an error. It is pretty errorish, but why it started now, that's a mystery." created="Wed, 04 Aug 2021 14:47:04 GMT"/>
							</outline>
						</outline>
					<outline text="if (paramtable === undefined) {" created="Sun, 04 Dec 2022 13:46:26 GMT">
						<outline text="return (&quot;&quot;);" created="Sun, 04 Dec 2022 13:46:32 GMT"/>
						<outline text="}" created="Sun, 04 Dec 2022 13:46:35 GMT"/>
						</outline>
					<outline text="else {" created="Sun, 04 Dec 2022 13:46:37 GMT">
						<outline text="var s = &quot;&quot;;" created="Sat, 09 Aug 2014 15:39:47 GMT" pgfnum="43188"/>
						<outline text="for (var x in paramtable) {" created="Sat, 09 Aug 2014 15:39:38 GMT" pgfnum="43186">
							<outline text="if (paramtable [x] !== undefined) { //8/4/21 by DW" created="Wed, 04 Aug 2021 14:48:52 GMT">
								<outline text="if (s.length &gt; 0) {" created="Sat, 09 Aug 2014 15:40:02 GMT" pgfnum="43189">
									<outline text="s += &quot;&amp;&quot;;" created="Sat, 09 Aug 2014 15:40:08 GMT" pgfnum="43190"/>
									<outline text="}" created="Sat, 09 Aug 2014 15:40:14 GMT" pgfnum="43191"/>
									</outline>
								<outline text="s += x + &quot;=&quot; + encodeURIComponent (paramtable [x]);" created="Sat, 09 Aug 2014 15:40:19 GMT" pgfnum="43192"/>
								<outline text="}" created="Wed, 04 Aug 2021 14:49:01 GMT"/>
								</outline>
							<outline text="}" created="Sat, 09 Aug 2014 15:39:43 GMT" pgfnum="43187"/>
							</outline>
						<outline text="return (s);" created="Sat, 09 Aug 2014 15:40:54 GMT" pgfnum="43193"/>
						<outline text="}" created="Sun, 04 Dec 2022 13:46:40 GMT"/>
						</outline>
					<outline text="}" created="Sat, 09 Aug 2014 15:39:35 GMT" pgfnum="43185"/>
					</outline>
				<outline text="function convertCategories (sub) { //9/6/22 by DW" created="Tue, 06 Sep 2022 15:47:13 GMT">
					<outline text="Changes" isComment="true" created="Sat, 10 Sep 2022 16:04:22 GMT">
						<outline text="9/10/22; 12:04:26 PM by DW" created="Sat, 10 Sep 2022 16:04:25 GMT">
							<outline text="When categories were null or undefined, previously we'd return [&quot;all&quot;]." created="Sat, 10 Sep 2022 16:04:26 GMT"/>
							<outline text="But -- why would a subscription be required to have one category set. Why couldn't it have none? " created="Sat, 10 Sep 2022 16:04:46 GMT"/>
							</outline>
						</outline>
					<outline text="if ((sub.categories === undefined) || (sub.categories === null)) { ">
						<outline text="sub.categories = JSON.stringify ([]);" created="Mon, 05 Sep 2022 15:21:26 GMT"/>
						<outline text="sub.categories = JSON.stringify ([&quot;all&quot;]);" isComment="true" created="Mon, 05 Sep 2022 15:21:26 GMT"/>
						<outline text="}"/>
						</outline>
					<outline text="else {" created="Mon, 05 Sep 2022 15:21:05 GMT">
						<outline text="var splits = sub.categories.split (&quot;,&quot;), catsarray = new Array ();" created="Mon, 05 Sep 2022 13:47:16 GMT"/>
						<outline text="splits.forEach (function (cat) {" created="Mon, 05 Sep 2022 13:48:05 GMT">
							<outline text="if (cat.length &gt; 0) {" created="Mon, 05 Sep 2022 13:48:31 GMT">
								<outline text="catsarray.push (cat);" created="Mon, 05 Sep 2022 13:48:39 GMT"/>
								<outline text="}" created="Mon, 05 Sep 2022 13:48:36 GMT"/>
								</outline>
							<outline text="});" created="Mon, 05 Sep 2022 13:48:20 GMT"/>
							</outline>
						<outline text="sub.categories = JSON.stringify (catsarray);" created="Mon, 05 Sep 2022 13:49:20 GMT"/>
						<outline text="}" created="Mon, 05 Sep 2022 15:21:07 GMT"/>
						</outline>
					<outline text="return (sub);" created="Tue, 06 Sep 2022 15:56:02 GMT"/>
					<outline text="}" created="Tue, 06 Sep 2022 15:47:18 GMT"/>
					</outline>
				<outline text="function markdownProcess (markdowntext) { //8/25/22 by DW">
					<outline text="var htmltext = marked.parse (markdowntext);"/>
					<outline text="return (htmltext);" created="Sat, 19 Feb 2022 15:43:00 GMT"/>
					<outline text="}"/>
					</outline>
				<outline text="function dateDaysBefore (ctDays, d) { //2/7/24 by DW" created="Wed, 07 Feb 2024 21:07:42 GMT">
					<outline text="//return a date ctDays days before d" created="Wed, 07 Feb 2024 21:17:29 GMT"/>
					<outline text="if (d === undefined) {" created="Wed, 07 Feb 2024 21:07:59 GMT">
						<outline text="d = new Date ();" created="Wed, 07 Feb 2024 21:10:11 GMT"/>
						<outline text="}" created="Wed, 07 Feb 2024 21:10:15 GMT"/>
						</outline>
					<outline text="else {" created="Wed, 07 Feb 2024 21:11:20 GMT">
						<outline text="d = new Date (d);" created="Wed, 07 Feb 2024 21:10:48 GMT"/>
						<outline text="}" created="Wed, 07 Feb 2024 21:11:22 GMT"/>
						</outline>
					<outline text="const thePastDate = new Date (d - (ctDays * 24 * 60 * 60 * 1000));" created="Wed, 07 Feb 2024 21:08:00 GMT"/>
					<outline text="return (thePastDate);" created="Wed, 07 Feb 2024 21:12:08 GMT"/>
					<outline text="}" created="Wed, 07 Feb 2024 21:07:48 GMT"/>
					</outline>
				<outline text="" created="Fri, 01 Dec 2023 14:20:57 GMT"/>
				<outline text="function addMacroToPagetable (pagetable) { //12/1/23 by DW" created="Fri, 01 Dec 2023 14:20:57 GMT">
					<outline text="pagetable.feedlandDatabaseVersion = myVersion; //allows it to appear in About dialog in feedlandHome." created="Fri, 01 Dec 2023 14:21:09 GMT"/>
					<outline text="}" created="Fri, 01 Dec 2023 14:21:04 GMT"/>
					</outline>
				<outline text="" created="Fri, 01 Dec 2023 14:20:57 GMT"/>
				<outline text="function httpReadUrl (url, callback) { //8/21/22 by DW" created="Mon, 20 Jan 2014 17:26:34 GMT" pgfnum="36035">
					<outline text="request (url, function (err, response, data) {">
						<outline text="if (err) {">
							<outline text="callback (err);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="if (response.statusCode != 200) {">
								<outline text="const errstruct = {">
									<outline text="message: &quot;Can't read the URL, \&quot;&quot; + url + &quot;\&quot; because we received a status code of &quot; + response.statusCode + &quot;.&quot;,"/>
									<outline text="statusCode: response.statusCode"/>
									<outline text="};"/>
									</outline>
								<outline text="callback (errstruct);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="callback (undefined, data);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}" created="Mon, 20 Jan 2014 17:26:49 GMT" pgfnum="36038"/>
					</outline>
				<outline text="function requestWithRedirect (theRequest, callback) { //12/11/22 by DW" created="Wed, 28 Sep 2022 17:11:16 GMT">
					<outline text="Changes" isComment="true" created="Sun, 11 Dec 2022 15:02:32 GMT">
						<outline text="1/1/23; 2:56:16 PM by DW" created="Sun, 01 Jan 2023 19:56:16 GMT">
							<outline text="Check for err before assuming there's a response. " created="Sun, 01 Jan 2023 19:56:17 GMT"/>
							</outline>
						<outline text="12/11/22; 10:02:34 AM by DW" created="Sun, 11 Dec 2022 15:02:34 GMT">
							<outline text="Andrew Shell says that request doesn't pass through the body of a request through callbacks. So we created a version of request that does." created="Sun, 11 Dec 2022 15:02:35 GMT">
								<outline text="https://gist.github.com/andrewshell/8b57f96bf62a1dea9fa1a8137e13951a?permalink_comment_id=4398360#gistcomment-4398360" created="Sun, 11 Dec 2022 15:03:35 GMT"/>
								</outline>
							<outline text="Andrew's version is below..." created="Sun, 11 Dec 2022 15:03:10 GMT">
								<outline text="function requestFollowRedirects(theRequest, callback) {">
									<outline text="theRequest.followAllRedirects = false;"/>
									<outline text="request (theRequest, function (err, response, body) {">
										<outline text="if (parseInt(theRequest.maxRedirects) &gt; 0 &amp;&amp; [301, 320].includes(response.statusCode) &amp;&amp; response.headers.location != null) {">
											<outline text="const newRequest = Object.assign({}, theRequest, { url: response.headers.location });"/>
											<outline text="newRequest.maxRedirects--;"/>
											<outline text="requestFollowRedirects (newRequest, callback);"/>
											<outline text="}"/>
											</outline>
										<outline text="callback (err, response, body)"/>
										<outline text="});"/>
										</outline>
									<outline text="}"/>
									</outline>
								</outline>
							</outline>
						</outline>
					<outline text="var myRequest = new Object ();" created="Sun, 11 Dec 2022 15:14:24 GMT"/>
					<outline text="for (var x in theRequest) {" created="Sun, 11 Dec 2022 15:14:41 GMT">
						<outline text="myRequest [x] = theRequest [x];" created="Sun, 11 Dec 2022 15:14:47 GMT"/>
						<outline text="}" created="Sun, 11 Dec 2022 15:14:55 GMT"/>
						</outline>
					<outline text="myRequest.followAllRedirects = false; //we're doing this ourselves"/>
					<outline text="myRequest.maxRedirects = (myRequest.maxRedirects === undefined) ? 0 : myRequest.maxRedirects;" created="Sun, 11 Dec 2022 15:17:25 GMT"/>
					<outline text="request (myRequest, function (err, response, body) {" created="Sun, 11 Dec 2022 14:56:02 GMT">
						<outline text="if (err) { //1/1/23 by DW" created="Sun, 01 Jan 2023 19:55:34 GMT">
							<outline text="callback (err, response, body);" created="Sun, 11 Dec 2022 15:02:09 GMT"/>
							<outline text="}" created="Sun, 01 Jan 2023 19:55:37 GMT"/>
							</outline>
						<outline text="else {" created="Sun, 01 Jan 2023 19:55:38 GMT">
							<outline text="const code = response.statusCode;" created="Sun, 11 Dec 2022 14:57:09 GMT"/>
							<outline text="if ((code == 301) || (code == 302)) { //redirect" created="Sun, 11 Dec 2022 14:57:18 GMT">
								<outline text="if (myRequest.maxRedirects == 0) {" created="Sun, 11 Dec 2022 15:00:40 GMT">
									<outline text="callback (err, response, body);" created="Sun, 11 Dec 2022 15:00:55 GMT"/>
									<outline text="}" created="Sun, 11 Dec 2022 15:00:52 GMT"/>
									</outline>
								<outline text="else {" created="Sun, 11 Dec 2022 15:01:24 GMT">
									<outline text="myRequest.maxRedirects--;" created="Sun, 11 Dec 2022 15:01:30 GMT"/>
									<outline text="myRequest.url = response.headers.location;" created="Sun, 11 Dec 2022 15:12:05 GMT"/>
									<outline text="requestWithRedirect (myRequest, callback);" created="Sun, 11 Dec 2022 15:01:38 GMT"/>
									<outline text="}" created="Sun, 11 Dec 2022 15:01:26 GMT"/>
									</outline>
								<outline text="}" created="Sun, 11 Dec 2022 14:57:33 GMT"/>
								</outline>
							<outline text="else {" created="Sun, 11 Dec 2022 15:02:08 GMT">
								<outline text="callback (err, response, body);" created="Sun, 11 Dec 2022 15:02:09 GMT"/>
								<outline text="}" created="Sun, 11 Dec 2022 15:10:23 GMT"/>
								</outline>
							<outline text="}" created="Sun, 01 Jan 2023 19:55:40 GMT"/>
							</outline>
						<outline text="});" created="Sun, 11 Dec 2022 14:56:02 GMT"/>
						</outline>
					<outline text="}" created="Sun, 11 Dec 2022 14:55:31 GMT"/>
					</outline>
				<outline text="function getOutlineFromOpml (urlOpml, callback) { //8/21/22 by DW" created="Sun, 21 Aug 2022 17:53:43 GMT">
					<outline text="httpReadUrl (urlOpml, function (err, opmltext) {">
						<outline text="if (err) {">
							<outline text="callback (err);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="opml.parse (opmltext, function (err, theOutline) {">
								<outline text="if (err) {">
									<outline text="callback (err);" created="Sat, 28 May 2022 19:07:43 GMT"/>
									<outline text="}"/>
									</outline>
								<outline text="else {" created="Sat, 28 May 2022 19:02:01 GMT">
									<outline text="callback (undefined, theOutline);" created="Sat, 28 May 2022 19:07:43 GMT"/>
									<outline text="}" created="Sat, 28 May 2022 19:02:03 GMT"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}" created="Sun, 21 Aug 2022 17:54:03 GMT"/>
					</outline>
				<outline text="function getNodeArrayFromOpml (urlOpml, callback) { //10/11/23 by DW" created="Thu, 01 Jun 2023 18:06:06 GMT">
					<outline text="Changes" isComment="true" created="Wed, 11 Oct 2023 20:01:29 GMT">
						<outline text="10/11/23; 4:01:35 PM by DW" created="Wed, 11 Oct 2023 20:01:33 GMT">
							<outline text="getUrlArrayFromOpml, below, returns an array of URLs. this function returns an array of nodes, so we get all the attributes of the type &quot;rss&quot; node in the outline. " created="Wed, 11 Oct 2023 20:01:35 GMT"/>
							<outline text="needed this to get at the category elements in a reading list. might prove useful for other metadata. " created="Wed, 11 Oct 2023 20:02:14 GMT"/>
							</outline>
						</outline>
					<outline text="getOutlineFromOpml (urlOpml, function (err, theOutline) {" created="Sun, 21 Aug 2022 17:44:05 GMT">
						<outline text="if (err) {" created="Sun, 21 Aug 2022 18:23:58 GMT">
							<outline text="callback (err);" created="Sun, 21 Aug 2022 18:24:00 GMT"/>
							<outline text="}" created="Sun, 21 Aug 2022 18:24:04 GMT"/>
							</outline>
						<outline text="else {" created="Sun, 21 Aug 2022 18:24:04 GMT">
							<outline text="var nodeList = new Array ();" created="Sun, 21 Aug 2022 17:58:14 GMT"/>
							<outline text="opml.visitAll (theOutline, function (node) {" created="Sat, 03 Jul 2021 19:31:57 GMT">
								<outline text="if (notComment (node)) {" created="Sat, 20 Aug 2022 14:11:54 GMT">
									<outline text="if (node.type == &quot;rss&quot;) {" created="Sun, 21 Aug 2022 18:00:29 GMT">
										<outline text="if (node.xmlUrl !== undefined) {" created="Sat, 20 Aug 2022 14:12:11 GMT">
											<outline text="nodeList.push (node);" created="Mon, 08 Aug 2022 21:01:47 GMT"/>
											<outline text="}" created="Sat, 20 Aug 2022 14:12:16 GMT"/>
											</outline>
										<outline text="}" created="Sun, 21 Aug 2022 18:00:33 GMT"/>
										</outline>
									<outline text="}" created="Sat, 20 Aug 2022 14:11:56 GMT"/>
									</outline>
								<outline text="return (true); //keep visiting" created="Sat, 03 Jul 2021 19:32:47 GMT"/>
								<outline text="});" created="Sat, 03 Jul 2021 19:32:16 GMT"/>
								</outline>
							<outline text="callback (undefined, nodeList, theOutline);" created="Thu, 01 Jun 2023 18:07:25 GMT"/>
							<outline text="}" created="Sun, 21 Aug 2022 18:24:06 GMT"/>
							</outline>
						<outline text="});" created="Sun, 21 Aug 2022 17:56:53 GMT"/>
						</outline>
					<outline text="}" created="Thu, 01 Jun 2023 18:06:28 GMT"/>
					</outline>
				<outline text="function getUrlArrayFromOutline (theOutline) { //10/28/23 by DW" created="Sat, 28 Oct 2023 14:31:39 GMT">
					<outline text="var feedUrlList = new Array ();" created="Sun, 21 Aug 2022 17:58:14 GMT"/>
					<outline text="opml.visitAll (theOutline, function (node) {" created="Sat, 03 Jul 2021 19:31:57 GMT">
						<outline text="if (notComment (node)) {" created="Sat, 20 Aug 2022 14:11:54 GMT">
							<outline text="if (node.type == &quot;rss&quot;) {" created="Sun, 21 Aug 2022 18:00:29 GMT">
								<outline text="if (node.xmlUrl !== undefined) {" created="Sat, 20 Aug 2022 14:12:11 GMT">
									<outline text="feedUrlList.push (node.xmlUrl);" created="Mon, 08 Aug 2022 21:01:47 GMT"/>
									<outline text="}" created="Sat, 20 Aug 2022 14:12:16 GMT"/>
									</outline>
								<outline text="}" created="Sun, 21 Aug 2022 18:00:33 GMT"/>
								</outline>
							<outline text="}" created="Sat, 20 Aug 2022 14:11:56 GMT"/>
							</outline>
						<outline text="return (true); //keep visiting" created="Sat, 03 Jul 2021 19:32:47 GMT"/>
						<outline text="});" created="Sat, 03 Jul 2021 19:32:16 GMT"/>
						</outline>
					<outline text="return (feedUrlList);" created="Thu, 01 Jun 2023 18:07:25 GMT"/>
					<outline text="}" created="Sat, 28 Oct 2023 14:31:50 GMT"/>
					</outline>
				<outline text="function getUrlArrayFromOpml (urlOpml, callback) { //6/1/23 by DW" created="Thu, 01 Jun 2023 18:06:06 GMT">
					<outline text="getOutlineFromOpml (urlOpml, function (err, theOutline) {" created="Sun, 21 Aug 2022 17:44:05 GMT">
						<outline text="if (err) {" created="Sun, 21 Aug 2022 18:23:58 GMT">
							<outline text="callback (err);" created="Sun, 21 Aug 2022 18:24:00 GMT"/>
							<outline text="}" created="Sun, 21 Aug 2022 18:24:04 GMT"/>
							</outline>
						<outline text="else {" created="Sun, 21 Aug 2022 18:24:04 GMT">
							<outline text="var feedUrlList = getUrlArrayFromOutline (theOutline);" created="Sun, 21 Aug 2022 17:58:14 GMT"/>
							<outline text="var feedUrlList = new Array ();" isComment="true" created="Sun, 21 Aug 2022 17:58:14 GMT"/>
							<outline text="opml.visitAll (theOutline, function (node) {" isComment="true" created="Sat, 03 Jul 2021 19:31:57 GMT">
								<outline text="if (notComment (node)) {" created="Sat, 20 Aug 2022 14:11:54 GMT">
									<outline text="if (node.type == &quot;rss&quot;) {" created="Sun, 21 Aug 2022 18:00:29 GMT">
										<outline text="if (node.xmlUrl !== undefined) {" created="Sat, 20 Aug 2022 14:12:11 GMT">
											<outline text="feedUrlList.push (node.xmlUrl);" created="Mon, 08 Aug 2022 21:01:47 GMT"/>
											<outline text="}" created="Sat, 20 Aug 2022 14:12:16 GMT"/>
											</outline>
										<outline text="}" created="Sun, 21 Aug 2022 18:00:33 GMT"/>
										</outline>
									<outline text="}" created="Sat, 20 Aug 2022 14:11:56 GMT"/>
									</outline>
								<outline text="return (true); //keep visiting" created="Sat, 03 Jul 2021 19:32:47 GMT"/>
								<outline text="});" created="Sat, 03 Jul 2021 19:32:16 GMT"/>
								</outline>
							<outline text="callback (undefined, feedUrlList, theOutline);" created="Thu, 01 Jun 2023 18:07:25 GMT"/>
							<outline text="}" created="Sun, 21 Aug 2022 18:24:06 GMT"/>
							</outline>
						<outline text="});" created="Sun, 21 Aug 2022 17:56:53 GMT"/>
						</outline>
					<outline text="}" created="Thu, 01 Jun 2023 18:06:28 GMT"/>
					</outline>
				<outline text="function notComment (item) { //8/21/22 by DW">
					<outline text="return (!utils.getBoolean (item.isComment));"/>
					<outline text="}"/>
					</outline>
				<outline text="function maxStringLength (theString, max) {">
					<outline text="if ((theString === undefined) || (theString === null)) {">
						<outline text="theString = &quot;&quot;;"/>
						<outline text="}"/>
						</outline>
					<outline text="if (theString.length &gt; max) { //1/27/19 by DW">
						<outline text="theString = utils.stringMid (theString, 1, max);"/>
						<outline text="}"/>
						</outline>
					<outline text="return (theString);"/>
					<outline text="}"/>
					</outline>
				<outline text="function updateSocketSubscribers (verb, jstruct, callback) {" created="Sun, 20 Mar 2022 22:51:47 GMT">
					<outline text="const jsontext = utils.jsonStringify (jstruct);" created="Sun, 20 Mar 2022 22:55:09 GMT"/>
					<outline text="console.log (&quot;updateSocketSubscribers: verb == &quot; + verb + &quot;, jstruct == &quot; + utils.jsonStringify (jstruct));" isComment="true" created="Fri, 01 Apr 2022 15:02:52 GMT"/>
					<outline text="config.notifySocketSubscribers (verb, jsontext, true, function (conn) {">
						<outline text="return (true); //we're sending every update to every user, later we could narrow this to users who are subscribed" created="Sun, 20 Mar 2022 22:54:31 GMT"/>
						<outline text="});" created="Sat, 06 Mar 2021 20:24:58 GMT"/>
						</outline>
					<outline text="}" created="Sun, 20 Mar 2022 22:52:02 GMT"/>
					</outline>
				<outline text="function getItemGuid (item) {">
					<outline text="var guid = &quot;&quot;;" created="Sun, 20 Mar 2022 15:09:07 GMT"/>
					<outline text="function ok (val) {">
						<outline text="if (val !== undefined) {">
							<outline text="if (val != &quot;null&quot;) {">
								<outline text="return (true);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="return (false);"/>
						<outline text="}"/>
						</outline>
					<outline text="if (ok (item.guid)) {">
						<outline text="guid = item.guid;"/>
						<outline text="}"/>
						</outline>
					<outline text="else {" created="Sun, 20 Mar 2022 15:09:24 GMT">
						<outline text="if (ok (item.pubDate)) {">
							<outline text="guid += item.pubDate;"/>
							<outline text="}"/>
							</outline>
						<outline text="if (ok (item.link)) {">
							<outline text="guid += item.link;"/>
							<outline text="}"/>
							</outline>
						<outline text="if (ok (item.title)) {">
							<outline text="guid += item.title;"/>
							<outline text="}"/>
							</outline>
						<outline text="if (guid.length &gt; 0) {">
							<outline text="guid = md5 (guid);"/>
							<outline text="}"/>
							</outline>
						<outline text="}" created="Sun, 20 Mar 2022 15:09:25 GMT"/>
						</outline>
					<outline text="guid = maxStringLength (guid, config.maxGuidLength);"/>
					<outline text="return (guid);"/>
					<outline text="}"/>
					</outline>
				<outline text="function stripMarkup (s) { //9/11/22 by DW" created="Sun, 11 Sep 2022 14:42:58 GMT">
					<outline text="Changes" isComment="true" created="Sun, 11 Sep 2022 15:17:49 GMT">
						<outline text="5/31/25; 2:16:33 PM by DW" created="Sat, 31 May 2025 18:16:33 GMT">
							<outline text="legalTags is now a configuration option." created="Sat, 31 May 2025 18:16:33 GMT"/>
							</outline>
						<outline text="9/16/22; 11:47:29 AM by DW" created="Fri, 16 Sep 2022 15:47:27 GMT">
							<outline text="Added &lt;br&gt; to the list of legal tags." created="Fri, 16 Sep 2022 15:47:30 GMT"/>
							</outline>
						<outline text="9/11/22; 11:17:52 AM by DW" created="Sun, 11 Sep 2022 15:17:51 GMT">
							<outline text="See this blog post." created="Sun, 11 Sep 2022 15:17:53 GMT">
								<outline text="http://scripting.com/2022/09/11/145550.html?title=newStrategyForFeedText" created="Sun, 11 Sep 2022 15:17:56 GMT"/>
								</outline>
							</outline>
						</outline>
					<outline text="const legalTags = {" isComment="true" created="Sun, 11 Sep 2022 14:15:43 GMT">
						<outline text="allowedTags: [" created="Sun, 11 Sep 2022 14:16:06 GMT">
							<outline text="&quot;p&quot;, &quot;br&quot;" created="Sun, 11 Sep 2022 14:18:05 GMT"/>
							<outline text="]," created="Sun, 11 Sep 2022 14:17:09 GMT"/>
							</outline>
						<outline text="allowedAttributes: {" created="Sun, 11 Sep 2022 14:16:17 GMT">
							<outline text="}" created="Sun, 11 Sep 2022 14:16:27 GMT"/>
							</outline>
						<outline text="};" created="Sun, 11 Sep 2022 14:15:53 GMT"/>
						</outline>
					<outline text="if ((s === undefined) || (s == null) || (s.length == 0)) {">
						<outline text="return (&quot;&quot;);"/>
						<outline text="}"/>
						</outline>
					<outline text="return (sanitizeHtml (s, config.legalTags));" created="Sun, 11 Sep 2022 13:31:43 GMT"/>
					<outline text="}" created="Sun, 11 Sep 2022 14:43:06 GMT"/>
					</outline>
				<outline text="function getItemDescription (item) { //5/28/22 by DW" created="Sat, 28 May 2022 17:13:34 GMT">
					<outline text="Changes " isComment="true" created="Sat, 10 Sep 2022 17:36:20 GMT">
						<outline text="11/8/22; 12:42:40 PM by DW" created="Tue, 08 Nov 2022 17:42:40 GMT">
							<outline text="No longer wrap descriptions in a div of class divMdText. I don't understand the purpose of it, and can't document it. " created="Tue, 08 Nov 2022 17:42:41 GMT"/>
							</outline>
						<outline text="9/11/22; 10:44:24 AM by DW" created="Sun, 11 Sep 2022 14:44:24 GMT">
							<outline text="We're using our own markup stripper now. " created="Sun, 11 Sep 2022 14:44:25 GMT"/>
							</outline>
						<outline text="9/10/22; 1:36:24 PM by DW" created="Sat, 10 Sep 2022 17:36:23 GMT">
							<outline text="I asked for help in a braintrust query, and got a recommendation from Michael McEniry. let's try using it for a while. " created="Sat, 10 Sep 2022 17:36:24 GMT">
								<outline text="https://github.com/scripting/Scripting-News/issues/215#issuecomment-1242765509" created="Sat, 10 Sep 2022 17:37:44 GMT"/>
								</outline>
							</outline>
						</outline>
					<outline text="var description;" created="Sat, 28 May 2022 17:13:55 GMT"/>
					<outline text="if (item.markdowntext === undefined) {" created="Thu, 25 Aug 2022 16:50:36 GMT">
						<outline text="description = item.description;" created="Sat, 28 May 2022 17:13:55 GMT"/>
						<outline text="description = stripMarkup (description); //9/11/22 by DW"/>
						<outline text="description = utils.stripMarkup (description);" isComment="true"/>
						<outline text="description = utils.trimWhitespace (description);"/>
						<outline text="}" created="Thu, 25 Aug 2022 16:50:44 GMT"/>
						</outline>
					<outline text="else {" created="Thu, 25 Aug 2022 16:50:45 GMT">
						<outline text="description = markdownProcess (item.markdowntext); //11/8/22 by DW" created="Thu, 25 Aug 2022 16:51:51 GMT"/>
						<outline text="description = &quot;&lt;div class=\&quot;divMdText\&quot;&gt;&quot; + markdownProcess (item.markdowntext) + &quot;&lt;/div&gt;&quot;;" isComment="true" created="Thu, 25 Aug 2022 16:51:51 GMT"/>
						<outline text="}" created="Thu, 25 Aug 2022 16:50:46 GMT"/>
						</outline>
					<outline text="return (description);" created="Sat, 28 May 2022 17:13:55 GMT"/>
					<outline text="}" created="Sat, 28 May 2022 17:13:44 GMT"/>
					</outline>
				<outline text="function getItemPubdate (pubDate) { //8/26/22 by DW" created="Fri, 26 Aug 2022 16:07:16 GMT">
					<outline text="if (pubDate === undefined) {" created="Fri, 26 Aug 2022 16:07:54 GMT">
						<outline text="pubDate = now;" created="Fri, 26 Aug 2022 16:08:25 GMT"/>
						<outline text="}" created="Fri, 26 Aug 2022 16:08:03 GMT"/>
						</outline>
					<outline text="else {" created="Fri, 26 Aug 2022 16:08:36 GMT">
						<outline text="var now = new Date ();" created="Fri, 26 Aug 2022 16:07:47 GMT"/>
						<outline text="pubDate = new Date (pubDate);" created="Fri, 26 Aug 2022 16:08:45 GMT"/>
						<outline text="if (pubDate &gt; now) {" created="Fri, 26 Aug 2022 16:13:35 GMT">
							<outline text="pubDate = now;" created="Fri, 26 Aug 2022 16:14:01 GMT"/>
							<outline text="}" created="Fri, 26 Aug 2022 16:13:52 GMT"/>
							</outline>
						<outline text="}" created="Fri, 26 Aug 2022 16:08:39 GMT"/>
						</outline>
					<outline text="return (pubDate);" created="Fri, 26 Aug 2022 16:14:21 GMT"/>
					<outline text="}" created="Fri, 26 Aug 2022 16:07:29 GMT"/>
					</outline>
				<outline text="function getDatabaseFeed (feedUrl, callback) {" created="Tue, 22 Mar 2022 15:36:36 GMT">
					<outline text="Changes" isComment="true" created="Wed, 30 Mar 2022 20:04:20 GMT">
						<outline text="3/30/22; 4:04:25 PM by DW" created="Wed, 30 Mar 2022 20:04:22 GMT">
							<outline text="Return everything we have in the database for the feed, but no items." created="Wed, 30 Mar 2022 20:04:25 GMT"/>
							</outline>
						</outline>
					<outline text="var sqltext = &quot;select * from feeds where feedUrl=&quot; + davesql.encode (feedUrl) + &quot;;&quot;;"/>
					<outline text="davesql.runSqltext (sqltext, function (err, result) {">
						<outline text="if (err) {">
							<outline text="callback (err);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="if (result.length == 0) {">
								<outline text="callback ({&quot;message&quot;: &quot;The feed is not in the database.&quot;});"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="callback (undefined, result [0]);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}" created="Tue, 22 Mar 2022 15:36:50 GMT"/>
					</outline>
				<outline text="function changeDatabaseFeed (feedRec, callback) {" created="Tue, 22 Mar 2022 15:38:47 GMT">
					<outline text="const sqltext = &quot;replace into feeds &quot; + davesql.encodeValues (feedRec);"/>
					<outline text="davesql.runSqltext (sqltext, callback);"/>
					<outline text="}" created="Tue, 22 Mar 2022 15:41:15 GMT"/>
					</outline>
				<outline text="function isItemInDatabase (feedUrl, guid, callback) {">
					<outline text="var sqltext = &quot;select * from items where guid=&quot; + davesql.encode (guid) + &quot; and feedUrl=&quot; + davesql.encode (feedUrl) + &quot;;&quot;;"/>
					<outline text="davesql.runSqltext (sqltext, function (err, result) {">
						<outline text="if (err) {">
							<outline text="callback (false);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="if (result.length == 0) {">
								<outline text="callback (false);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="callback (true, result [0]);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function isFeedInDatabase (feedUrl, callback) {">
					<outline text="var sqltext = &quot;select * from feeds where feedUrl=&quot; + davesql.encode (feedUrl) + &quot;;&quot;;"/>
					<outline text="davesql.runSqltext (sqltext, function (err, result) {">
						<outline text="if (err) {">
							<outline text="callback (false);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="if (result.length == 0) {">
								<outline text="callback (false);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="callback (true, result [0]);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function addSubscription (screenname, feedUrl, feedId, callback) {">
					<outline text="Changes" isComment="true" created="Sat, 21 May 2022 15:11:38 GMT">
						<outline text="3/9/24; 11:16:56 AM by DW" created="Sat, 09 Mar 2024 16:16:56 GMT">
							<outline text="We're still paying for the feedId mistake. It can be null and the way we've declared this it's an error for it to be null, and when we do this feedland crashes. " created="Sat, 09 Mar 2024 16:16:57 GMT"/>
							</outline>
						<outline text="2/3/24; 10:56:58 AM by DW" created="Sat, 03 Feb 2024 15:56:58 GMT">
							<outline text="New param, feedId." created="Sat, 03 Feb 2024 15:56:59 GMT"/>
							</outline>
						<outline text="9/11/22; 5:14:43 PM by DW" created="Sun, 11 Sep 2022 21:14:43 GMT">
							<outline text="Initialize categories to ,all," created="Sun, 11 Sep 2022 21:14:44 GMT"/>
							</outline>
						<outline text="5/21/22; 11:11:41 AM by DW" created="Sat, 21 May 2022 15:11:40 GMT">
							<outline text="Update the ctSubs field of the feed." created="Sat, 21 May 2022 15:11:42 GMT"/>
							</outline>
						</outline>
					<outline text="var subsRec = {">
						<outline text="listName: maxStringLength (screenname, config.maxListNameLength),"/>
						<outline text="feedUrl: maxStringLength (feedUrl, config.maxFeedUrlLength),"/>
						<outline text="feedId, //2/3/24 by DW" isComment="true" created="Sat, 03 Feb 2024 15:24:47 GMT"/>
						<outline text="categories: &quot;,all,&quot;, //9/11/22 by DW" created="Sun, 11 Sep 2022 21:13:11 GMT"/>
						<outline text="whenUpdated: new Date ()"/>
						<outline text="};"/>
						</outline>
					<outline text="" created="Sat, 09 Mar 2024 16:17:58 GMT"/>
					<outline text="if (notNull (feedId)) { //3/9/24 by DW" created="Sat, 02 Mar 2024 15:22:26 GMT">
						<outline text="subsRec.feedId = feedId;" created="Sat, 09 Mar 2024 16:18:31 GMT"/>
						<outline text="}" created="Sat, 02 Mar 2024 15:23:40 GMT"/>
						</outline>
					<outline text="" created="Sat, 09 Mar 2024 16:17:59 GMT"/>
					<outline text="var sqltext = &quot;replace into subscriptions &quot; + davesql.encodeValues (subsRec);"/>
					<outline text="davesql.runSqltext (sqltext, function (err, result) {">
						<outline text="setFeedSubsCount (feedUrl, function (err, ctSubs) {" created="Sat, 21 May 2022 15:09:52 GMT">
							<outline text="if (callback !== undefined) {">
								<outline text="if (err) {" created="Fri, 18 Mar 2022 15:46:18 GMT">
									<outline text="callback (err);" created="Fri, 18 Mar 2022 15:46:22 GMT"/>
									<outline text="}" created="Fri, 18 Mar 2022 15:46:25 GMT"/>
									</outline>
								<outline text="else {" created="Fri, 18 Mar 2022 15:46:27 GMT">
									<outline text="myConsoleLog (&quot;addSubscription: screenname == &quot; + screenname + &quot;, feedUrl == &quot; + feedUrl);" created="Sat, 19 Mar 2022 14:48:47 GMT"/>
									<outline text="callback (undefined, result [0]);" created="Fri, 18 Mar 2022 15:46:28 GMT"/>
									<outline text="}" created="Fri, 18 Mar 2022 15:46:34 GMT"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});" created="Sat, 21 May 2022 15:09:59 GMT"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function deleteSubscription (screenname, feedUrl, callback) {" created="Fri, 18 Mar 2022 15:57:47 GMT">
					<outline text="Changes" isComment="true" created="Sat, 21 May 2022 15:11:38 GMT">
						<outline text="9/13/22; 11:51:23 AM by DW" created="Tue, 13 Sep 2022 15:51:22 GMT">
							<outline text="Don't return the result of the query, just return true. " created="Tue, 13 Sep 2022 15:51:23 GMT"/>
							</outline>
						<outline text="5/21/22; 11:11:41 AM by DW" created="Sat, 21 May 2022 15:11:40 GMT">
							<outline text="Update the ctSubs field of the feed." created="Sat, 21 May 2022 15:11:42 GMT"/>
							</outline>
						</outline>
					<outline text="var sqltext = &quot;delete from subscriptions where listName=&quot; + davesql.encode (screenname) + &quot; and feedUrl=&quot; + davesql.encode (feedUrl) + &quot;;&quot;;"/>
					<outline text="davesql.runSqltext (sqltext, function (err, result) {">
						<outline text="setFeedSubsCount (feedUrl, function (err, ctSubs) {" created="Sat, 21 May 2022 15:10:47 GMT">
							<outline text="if (callback !== undefined) {">
								<outline text="if (err) {" created="Fri, 18 Mar 2022 15:46:18 GMT">
									<outline text="callback (err);" created="Fri, 18 Mar 2022 15:46:22 GMT"/>
									<outline text="}" created="Fri, 18 Mar 2022 15:46:25 GMT"/>
									</outline>
								<outline text="else {" created="Fri, 18 Mar 2022 15:46:27 GMT">
									<outline text="console.log (&quot;deleteSubscription: screenname == &quot; + screenname + &quot;, feedUrl == &quot; + feedUrl);" isComment="true" created="Sat, 19 Mar 2022 14:48:47 GMT"/>
									<outline text="callback (undefined, true);" created="Fri, 18 Mar 2022 15:46:28 GMT"/>
									<outline text="}" created="Fri, 18 Mar 2022 15:46:34 GMT"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});" created="Sat, 21 May 2022 15:10:47 GMT"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}" created="Fri, 18 Mar 2022 15:58:07 GMT"/>
					</outline>
				<outline text="function getUserSubcriptions (screenname, callback) {" created="Fri, 18 Mar 2022 15:10:14 GMT">
					<outline text="var sqltext = &quot;select * from subscriptions where listName=&quot; + davesql.encode (screenname) + &quot;;&quot;;"/>
					<outline text="davesql.runSqltext (sqltext, function (err, result) {">
						<outline text="if (err) {">
							<outline text="console.log (&quot;getUserSubcriptions: err.message == &quot; + err.message);"/>
							<outline text="if (callback !== undefined) {">
								<outline text="callback (err);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="callback (undefined, result);"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}" created="Fri, 18 Mar 2022 15:10:30 GMT"/>
					</outline>
				<outline text="function getNexItemtId () { //5/3/22 by DW" created="Tue, 03 May 2022 14:50:09 GMT">
					<outline text="var theId = stats.itemSerialNum++;" created="Mon, 21 Mar 2022 14:43:56 GMT"/>
					<outline text="config.saveStats (stats);"/>
					<outline text="return (theId);" created="Tue, 03 May 2022 14:50:41 GMT"/>
					<outline text="}" created="Tue, 03 May 2022 14:50:19 GMT"/>
					</outline>
				<outline text="function saveItem (itemRec, callback) { " created="Sun, 20 Mar 2022 16:32:13 GMT">
					<outline text="Changes" isComment="true" created="Thu, 28 Apr 2022 16:43:47 GMT">
						<outline text="3/2/24; 11:42:29 AM by DW" created="Sat, 02 Mar 2024 16:42:29 GMT">
							<outline text="The new feedId column does not allow it be null. " created="Sat, 02 Mar 2024 16:42:30 GMT"/>
							<outline text="It's weird because it's actually coming in with the value undefined. " created="Sat, 02 Mar 2024 16:43:00 GMT"/>
							</outline>
						<outline text="5/27/23; 7:52:34 AM by DW" created="Sat, 27 May 2023 11:52:34 GMT">
							<outline text="Remove null values from object before dealing with it. " created="Sat, 27 May 2023 11:52:35 GMT"/>
							</outline>
						<outline text="1/10/23; 10:51:00 AM by DW" created="Tue, 10 Jan 2023 15:51:00 GMT">
							<outline text="Only do yesterday's check if the itemRec has an enclosureLength." created="Tue, 10 Jan 2023 15:51:00 GMT"/>
							</outline>
						<outline text="1/9/23; 11:51:48 AM by DW" created="Mon, 09 Jan 2023 16:51:47 GMT">
							<outline text="We're getting errors with enclosureLength, as a string, having a length of zero." created="Mon, 09 Jan 2023 16:51:48 GMT"/>
							</outline>
						<outline text="10/16/22; 9:18:23 AM by DW" created="Sun, 16 Oct 2022 13:18:23 GMT">
							<outline text="Clear the river cache of any rivers that include items from the feed that this item is from." created="Sun, 16 Oct 2022 13:18:24 GMT"/>
							</outline>
						<outline text="7/12/22; 1:40:44 PM by DW" created="Tue, 12 Jul 2022 17:40:44 GMT">
							<outline text="If we're saving the item for the first time, the id won't be set. " created="Tue, 12 Jul 2022 17:40:45 GMT"/>
							<outline text="We set it on the way out for the caller." created="Tue, 12 Jul 2022 17:40:58 GMT"/>
							</outline>
						<outline text="7/9/22; 4:25:41 PM by DW" created="Sat, 09 Jul 2022 20:25:41 GMT">
							<outline text="We no longer check if id has been defined, it's an auto-increment field, the system takes care of giving it a unique value." created="Sat, 09 Jul 2022 20:25:41 GMT"/>
							</outline>
						<outline text="4/28/22; 12:43:50 PM by DW" created="Thu, 28 Apr 2022 16:43:48 GMT">
							<outline text="Check if id is defined, if not, assign it here." created="Thu, 28 Apr 2022 16:43:50 GMT"/>
							</outline>
						</outline>
					<outline text="itemRec = removeNullValuesFromObject (itemRec); //5/27/23 by DW" created="Sat, 27 May 2023 11:51:37 GMT"/>
					<outline text="" created="Sat, 02 Mar 2024 16:45:56 GMT"/>
					<outline text="if (itemRec.feedId === undefined) { //3/2/24 by DW" created="Sat, 02 Mar 2024 16:45:56 GMT">
						<outline text="delete itemRec.feedId;" created="Sat, 02 Mar 2024 16:46:39 GMT"/>
						<outline text="}" created="Sat, 02 Mar 2024 16:46:05 GMT"/>
						</outline>
					<outline text="" created="Sat, 27 May 2023 11:52:40 GMT"/>
					<outline text="if (itemRec.enclosureLength !== undefined) { //1/10/23 by DW" created="Tue, 10 Jan 2023 15:50:25 GMT">
						<outline text="if (typeof itemRec.enclosureLength == &quot;string&quot;) {" created="Tue, 10 Jan 2023 22:26:06 GMT">
							<outline text="if (itemRec.enclosureLength.length == 0) {" created="Mon, 09 Jan 2023 16:51:16 GMT">
								<outline text="itemRec.enclosureLength = 0;" created="Mon, 09 Jan 2023 16:51:32 GMT"/>
								<outline text="}" created="Mon, 09 Jan 2023 16:51:28 GMT"/>
								</outline>
							<outline text="}" created="Tue, 10 Jan 2023 22:26:22 GMT"/>
							</outline>
						<outline text="}" created="Tue, 10 Jan 2023 15:50:48 GMT"/>
						</outline>
					<outline text="" created="Tue, 10 Jan 2023 15:50:25 GMT"/>
					<outline text="var sqltext = &quot;replace into items &quot; + davesql.encodeValues (itemRec);"/>
					<outline text="davesql.runSqltext (sqltext, function (err, result) {">
						<outline text="if (err) {" created="Tue, 12 Jul 2022 17:39:31 GMT">
							<outline text="callback (err);" created="Tue, 12 Jul 2022 17:39:34 GMT"/>
							<outline text="}" created="Tue, 12 Jul 2022 17:39:37 GMT"/>
							</outline>
						<outline text="else {" created="Tue, 12 Jul 2022 17:39:38 GMT">
							<outline text="itemRec.id = result.insertId; //7/12/22 by DW" created="Tue, 12 Jul 2022 16:10:27 GMT"/>
							<outline text="if (!config.flUseSqlForSockets) { //10/4/23 by DW" created="Wed, 04 Oct 2023 16:05:27 GMT">
								<outline text="clearCachedRivers (itemRec.feedUrl); //10/16/22 by DW" created="Sun, 16 Oct 2022 13:19:52 GMT"/>
								<outline text="}" created="Wed, 04 Oct 2023 16:06:05 GMT"/>
								</outline>
							<outline text="callback (undefined, result);" created="Tue, 12 Jul 2022 17:39:34 GMT"/>
							<outline text="}" created="Tue, 12 Jul 2022 17:39:40 GMT"/>
							</outline>
						<outline text="});" created="Tue, 12 Jul 2022 17:39:24 GMT"/>
						</outline>
					<outline text="}" created="Sun, 20 Mar 2022 16:32:33 GMT"/>
					</outline>
				<outline text="function getItemFromDatabase (id, callback) { //5/7/22 by DW" created="Sat, 07 May 2022 14:01:29 GMT">
					<outline text="Changes" isComment="true" created="Sat, 07 May 2022 14:01:53 GMT">
						<outline text="5/7/22; 10:01:56 AM by DW" created="Sat, 07 May 2022 14:01:55 GMT">
							<outline text="Lookup an item based on its (internal) id and return all the fields in the item." created="Sat, 07 May 2022 14:01:56 GMT"/>
							</outline>
						</outline>
					<outline text="var sqltext = &quot;select * from items where id=&quot; + davesql.encode (id) + &quot;;&quot;;"/>
					<outline text="davesql.runSqltext (sqltext, function (err, result) {">
						<outline text="if (err) {" created="Fri, 18 Mar 2022 15:46:18 GMT">
							<outline text="callback (err);" created="Fri, 18 Mar 2022 15:46:22 GMT"/>
							<outline text="}" created="Fri, 18 Mar 2022 15:46:25 GMT"/>
							</outline>
						<outline text="else {" created="Fri, 18 Mar 2022 15:46:27 GMT">
							<outline text="if (result.length == 0) {">
								<outline text="let err = {message: &quot;Can't find the item with id == &quot; + id + &quot;.&quot;};" created="Fri, 22 Apr 2022 13:56:15 GMT"/>
								<outline text="callback (err);" created="Fri, 18 Mar 2022 15:46:22 GMT"/>
								<outline text="}"/>
								</outline>
							<outline text="else {" created="Fri, 22 Apr 2022 13:57:05 GMT">
								<outline text="callback (undefined, result [0]);" created="Sat, 07 May 2022 14:03:25 GMT"/>
								<outline text="}" created="Fri, 22 Apr 2022 13:57:08 GMT"/>
								</outline>
							<outline text="}" created="Fri, 18 Mar 2022 15:46:34 GMT"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}" created="Sat, 07 May 2022 14:01:45 GMT"/>
					</outline>
				<outline text="function deleteItem (id, callback) { //4/22/22 by DW" created="Fri, 22 Apr 2022 13:40:51 GMT">
					<outline text="const message = &quot;This function has been disabled.&quot;;" created="Sat, 16 Dec 2023 17:08:35 GMT"/>
					<outline text="callback ({message}); //12/16/23 by DW" created="Sat, 16 Dec 2023 17:08:35 GMT"/>
					<outline text="return;" created="Sat, 16 Dec 2023 17:08:35 GMT"/>
					<outline text="getItemFromDatabase (id, function (err, itemRec) {" isComment="true" created="Sat, 07 May 2022 14:04:32 GMT">
						<outline text="if (err) {" created="Fri, 18 Mar 2022 15:46:18 GMT">
							<outline text="callback (err);" created="Fri, 18 Mar 2022 15:46:22 GMT"/>
							<outline text="}" created="Fri, 18 Mar 2022 15:46:25 GMT"/>
							</outline>
						<outline text="else {" created="Sat, 07 May 2022 14:05:01 GMT">
							<outline text="itemRec.flDeleted = true;" created="Fri, 22 Apr 2022 13:57:43 GMT"/>
							<outline text="saveItem (itemRec, function (err, data) {" created="Fri, 22 Apr 2022 13:57:52 GMT">
								<outline text="if (err) {" created="Fri, 22 Apr 2022 14:13:10 GMT">
									<outline text="callback (err);" created="Fri, 22 Apr 2022 14:13:13 GMT"/>
									<outline text="}" created="Fri, 22 Apr 2022 14:13:16 GMT"/>
									</outline>
								<outline text="else {" created="Fri, 22 Apr 2022 14:13:17 GMT">
									<outline text="var convertedRec = convertDatabaseItem (itemRec);" created="Sat, 07 May 2022 14:06:36 GMT"/>
									<outline text="updateSocketSubscribers (&quot;deletedItem&quot;, convertedRec);" created="Sun, 20 Mar 2022 22:49:29 GMT"/>
									<outline text="callback (undefined, convertedRec);" created="Fri, 22 Apr 2022 14:13:19 GMT"/>
									<outline text="}" created="Fri, 22 Apr 2022 14:13:28 GMT"/>
									</outline>
								<outline text="});" created="Fri, 22 Apr 2022 14:13:04 GMT"/>
								</outline>
							<outline text="}" created="Sat, 07 May 2022 14:05:03 GMT"/>
							</outline>
						<outline text="});" created="Sat, 07 May 2022 14:04:44 GMT"/>
						</outline>
					<outline text="}" created="Fri, 22 Apr 2022 13:41:01 GMT"/>
					</outline>
				<outline text="" created="Sat, 02 Mar 2024 14:35:46 GMT"/>
				<outline text="" created="Sat, 02 Mar 2024 14:35:46 GMT"/>
				<outline text="function saveFeed (feedRec, callback) {">
					<outline text="Changes" isComment="true" created="Thu, 28 Apr 2022 16:43:47 GMT">
						<outline text="3/2/24; 9:58:45 AM by DW" created="Sat, 02 Mar 2024 14:58:44 GMT">
							<outline text="Previously we were doing saves with &quot;replace into&quot; -- which resulted in a new feedId value each time a feedRec was saved." created="Sat, 02 Mar 2024 14:58:45 GMT">
								<outline text="https://github.com/scripting/feedlandDev/issues/7" created="Sat, 02 Mar 2024 15:04:51 GMT"/>
								</outline>
							<outline text="Complete rewrite of routine, with help from ChatGPT." created="Sat, 02 Mar 2024 15:06:09 GMT">
								<outline text="https://chat.openai.com/share/67b1f2c2-8d3c-4ef7-a593-5f4e3859ecb9" created="Sat, 02 Mar 2024 15:06:20 GMT"/>
								</outline>
							</outline>
						<outline text="5/27/23; 7:52:34 AM by DW" created="Sat, 27 May 2023 11:52:34 GMT">
							<outline text="Remove null values from object before dealing with it. " created="Sat, 27 May 2023 11:52:35 GMT"/>
							</outline>
						<outline text="1/10/23; 10:51:00 AM by DW" created="Tue, 10 Jan 2023 15:51:00 GMT">
							<outline text="Only do yesterday's check if the itemRec has an enclosureLength." created="Tue, 10 Jan 2023 15:51:00 GMT"/>
							</outline>
						<outline text="1/9/23; 11:51:48 AM by DW" created="Mon, 09 Jan 2023 16:51:47 GMT">
							<outline text="We're getting errors with enclosureLength, as a string, having a length of zero." created="Mon, 09 Jan 2023 16:51:48 GMT"/>
							</outline>
						<outline text="10/16/22; 9:18:23 AM by DW" created="Sun, 16 Oct 2022 13:18:23 GMT">
							<outline text="Clear the river cache of any rivers that include items from the feed that this item is from." created="Sun, 16 Oct 2022 13:18:24 GMT"/>
							</outline>
						<outline text="7/12/22; 1:40:44 PM by DW" created="Tue, 12 Jul 2022 17:40:44 GMT">
							<outline text="If we're saving the item for the first time, the id won't be set. " created="Tue, 12 Jul 2022 17:40:45 GMT"/>
							<outline text="We set it on the way out for the caller." created="Tue, 12 Jul 2022 17:40:58 GMT"/>
							</outline>
						<outline text="7/9/22; 4:25:41 PM by DW" created="Sat, 09 Jul 2022 20:25:41 GMT">
							<outline text="We no longer check if id has been defined, it's an auto-increment field, the system takes care of giving it a unique value." created="Sat, 09 Jul 2022 20:25:41 GMT"/>
							</outline>
						<outline text="4/28/22; 12:43:50 PM by DW" created="Thu, 28 Apr 2022 16:43:48 GMT">
							<outline text="Check if id is defined, if not, assign it here." created="Thu, 28 Apr 2022 16:43:50 GMT"/>
							</outline>
						</outline>
					<outline text="isFeedInDatabase (feedRec.feedUrl, function (flInDatabase, feedRecFromDatabase) {" created="Thu, 28 Apr 2022 17:05:43 GMT">
						<outline text="var sqltext;"/>
						<outline text="console.log (&quot;saveFeed: feedRecFromDatabase == &quot; + utils.jsonStringify (feedRecFromDatabase)); //3/27/24 by DW" isComment="true" created="Wed, 27 Mar 2024 15:09:50 GMT"/>
						<outline text="if (flInDatabase &amp;&amp; (feedRecFromDatabase.feedId !== undefined)) {" created="Tue, 17 May 2022 23:03:00 GMT">
							<outline text="const whereclause = &quot; where feedId = &quot; + feedRecFromDatabase.feedId;" created="Sat, 02 Mar 2024 15:21:05 GMT"/>
							<outline text="const newFeedRec = removeNullValuesFromObject (feedRec);"/>
							<outline text="if (newFeedRec.feedId !== undefined) { //don't try to update the feedId" created="Sat, 02 Mar 2024 15:45:20 GMT">
								<outline text="delete newFeedRec.feedId; "/>
								<outline text="}" created="Sat, 02 Mar 2024 15:45:27 GMT"/>
								</outline>
							<outline text="" created="Sat, 02 Mar 2024 14:47:08 GMT"/>
							<outline text="var valuestext = &quot;&quot;;" created="Sat, 02 Mar 2024 14:47:09 GMT"/>
							<outline text="for (var x in newFeedRec) {" created="Sat, 02 Mar 2024 14:47:30 GMT">
								<outline text="var val = newFeedRec [x];" created="Sat, 02 Mar 2024 15:21:55 GMT"/>
								<outline text="if (notNull (val)) {" created="Sat, 02 Mar 2024 15:22:26 GMT">
									<outline text="if (valuestext.length &gt; 0) {" created="Sat, 02 Mar 2024 14:50:49 GMT">
										<outline text="valuestext += &quot;, &quot;;" created="Sat, 02 Mar 2024 14:50:11 GMT"/>
										<outline text="}" created="Sat, 02 Mar 2024 14:50:54 GMT"/>
										</outline>
									<outline text="valuestext += x + &quot; = &quot; + davesql.encode (val);" created="Sat, 02 Mar 2024 14:47:55 GMT"/>
									<outline text="}" created="Sat, 02 Mar 2024 15:23:40 GMT"/>
									</outline>
								<outline text="}" created="Sat, 02 Mar 2024 14:47:53 GMT"/>
								</outline>
							<outline text="sqltext = &quot;update feeds set &quot; + valuestext + whereclause;" created="Sat, 02 Mar 2024 14:45:09 GMT"/>
							<outline text="console.log (&quot;saveFeed update: feedRec.feedUrl == &quot; + feedRec.feedUrl + &quot;, feedRecFromDatabase.feedId == &quot; + feedRecFromDatabase.feedId);" isComment="true" created="Sat, 02 Mar 2024 16:07:26 GMT"/>
							<outline text="}" created="Tue, 17 May 2022 23:03:03 GMT"/>
							</outline>
						<outline text="else {" created="Sat, 02 Mar 2024 15:33:32 GMT">
							<outline text="sqltext = &quot;insert into feeds &quot; + davesql.encodeValues (removeNullValuesFromObject (feedRec));" created="Sat, 02 Mar 2024 14:54:46 GMT"/>
							<outline text="console.log (&quot;saveFeed insert: feedRec.feedUrl == &quot; + feedRec.feedUrl + &quot;, feedRecFromDatabase.feedId == &quot; + feedRecFromDatabase.feedId); //commented 3/9/24 by DW" isComment="true" created="Sat, 02 Mar 2024 16:07:26 GMT"/>
							<outline text="}" created="Sat, 02 Mar 2024 15:33:34 GMT"/>
							</outline>
						<outline text="davesql.runSqltext (sqltext, function (err, result) {">
							<outline text="if (err) {">
								<outline text="console.log (&quot;saveFeed error: sqltext == &quot; + sqltext);" created="Sat, 02 Mar 2024 16:07:26 GMT"/>
								<outline text="if (callback !== undefined) {">
									<outline text="callback (err);"/>
									<outline text="}" created="Sat, 02 Mar 2024 15:14:59 GMT"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="else {" created="Sat, 02 Mar 2024 14:56:07 GMT">
								<outline text="if ((feedRec.feedId !== undefined) &amp;&amp; (result.insertId !== undefined)) { " created="Sat, 02 Mar 2024 14:56:43 GMT">
									<outline text="feedRec.feedId = result.insertId; "/>
									<outline text="}" created="Sat, 02 Mar 2024 14:56:53 GMT"/>
									</outline>
								<outline text="if (callback !== undefined) {">
									<outline text="callback (undefined, feedRec);"/>
									<outline text="}" created="Sat, 02 Mar 2024 14:57:47 GMT"/>
									</outline>
								<outline text="}" created="Sat, 02 Mar 2024 14:57:56 GMT"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="});" created="Thu, 28 Apr 2022 17:05:46 GMT"/>
						</outline>
					<outline text="" isComment="true" created="Sat, 02 Mar 2024 15:36:25 GMT"/>
					<outline text="if (feedRec.feedId !== undefined) { //use update to save feed, avoid duplicate records" isComment="true">
						<outline text="const whereclause = &quot; where feedId = &quot; + feedRec.feedId;" created="Sat, 02 Mar 2024 15:21:05 GMT"/>
						<outline text="const newFeedRec = removeNullValuesFromObject (feedRec);"/>
						<outline text="delete newFeedRec.feedId; //don't try to update the feedId"/>
						<outline text="" created="Sat, 02 Mar 2024 14:47:08 GMT"/>
						<outline text="var valuestext = &quot;&quot;;" created="Sat, 02 Mar 2024 14:47:09 GMT"/>
						<outline text="for (var x in newFeedRec) {" created="Sat, 02 Mar 2024 14:47:30 GMT">
							<outline text="var val = newFeedRec [x];" created="Sat, 02 Mar 2024 15:21:55 GMT"/>
							<outline text="if (notNull (val)) {" created="Sat, 02 Mar 2024 15:22:26 GMT">
								<outline text="if (valuestext.length &gt; 0) {" created="Sat, 02 Mar 2024 14:50:49 GMT">
									<outline text="valuestext += &quot;, &quot;;" created="Sat, 02 Mar 2024 14:50:11 GMT"/>
									<outline text="}" created="Sat, 02 Mar 2024 14:50:54 GMT"/>
									</outline>
								<outline text="valuestext += x + &quot; = &quot; + davesql.encode (val);" created="Sat, 02 Mar 2024 14:47:55 GMT"/>
								<outline text="}" created="Sat, 02 Mar 2024 15:23:40 GMT"/>
								</outline>
							<outline text="}" created="Sat, 02 Mar 2024 14:47:53 GMT"/>
							</outline>
						<outline text="sqltext = &quot;update feeds set &quot; + valuestext + whereclause;" created="Sat, 02 Mar 2024 14:45:09 GMT"/>
						<outline text="} "/>
						</outline>
					<outline text="else {" isComment="true" created="Sat, 02 Mar 2024 14:53:59 GMT">
						<outline text="sqltext = &quot;insert into feeds &quot; + davesql.encodeValues (removeNullValuesFromObject (feedRec));" created="Sat, 02 Mar 2024 14:54:46 GMT"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function saveFeed (feedRec, callback) {" isComment="true" created="Fri, 01 Apr 2022 14:17:12 GMT">
					<outline text="Changes" isComment="true" created="Fri, 26 May 2023 12:39:26 GMT">
						<outline text="2/3/24; 10:52:07 AM by DW" created="Sat, 03 Feb 2024 15:52:06 GMT">
							<outline text="feed recs now have a feedId value, set when the record is created, it may not be in the feedRec we're passed so we set it on the way back, assuming the caller is watching for this. " created="Sat, 03 Feb 2024 15:52:07 GMT"/>
							</outline>
						<outline text="5/26/23; 8:40:32 AM by DW" created="Fri, 26 May 2023 12:40:31 GMT">
							<outline text="Remove null objects from feedRec before saving. We were getting errors when running against the test database of this form:" created="Fri, 26 May 2023 12:40:32 GMT">
								<outline text="ER_TRUNCATED_WRONG_VALUE: Incorrect datetime value: 'null' for column 'lastBuildDate' at row 1"/>
								</outline>
							</outline>
						</outline>
					<outline text="const sqltext = &quot;replace into feeds &quot; + davesql.encodeValues (removeNullValuesFromObject (feedRec));"/>
					<outline text="davesql.runSqltext (sqltext, function (err, result) {">
						<outline text="if (err) {">
							<outline text="if (callback !== undefined) {" created="Sat, 19 Mar 2022 16:17:31 GMT">
								<outline text="callback (err);" created="Sat, 19 Mar 2022 16:17:21 GMT"/>
								<outline text="}" created="Sat, 19 Mar 2022 16:17:36 GMT"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="if (callback !== undefined) {">
								<outline text="if (err) {" created="Sat, 03 Feb 2024 15:48:53 GMT">
									<outline text="callback (err);" created="Sat, 03 Feb 2024 15:48:58 GMT"/>
									<outline text="}" created="Sat, 03 Feb 2024 15:49:01 GMT"/>
									</outline>
								<outline text="else {" created="Sat, 03 Feb 2024 15:49:04 GMT">
									<outline text="feedRec.feedId = result.insertId; //2/3/24 by DW" created="Sat, 03 Feb 2024 15:50:40 GMT"/>
									<outline text="callback (undefined, feedRec); " created="Sat, 03 Feb 2024 15:50:12 GMT"/>
									<outline text="}" created="Sat, 03 Feb 2024 15:49:06 GMT"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}" created="Fri, 01 Apr 2022 14:17:19 GMT"/>
					</outline>
				<outline text="" created="Sat, 02 Mar 2024 14:35:47 GMT"/>
				<outline text="" created="Sat, 02 Mar 2024 14:35:47 GMT"/>
				<outline text="function convertDatabaseItem (itemRec) { //convert database item to the item struct defined by the API" created="Mon, 21 Mar 2022 14:51:45 GMT">
					<outline text="Changes" isComment="true" created="Mon, 21 Mar 2022 14:52:33 GMT">
						<outline text="4/3/22; 11:51:32 AM by DW" created="Sun, 03 Apr 2022 15:51:32 GMT">
							<outline text="I want to know when the item was updated, it may fit into the user interface somehow, so I uncommented it." created="Sun, 03 Apr 2022 15:51:33 GMT"/>
							</outline>
						<outline text="3/30/22; 11:45:50 AM by DW" created="Wed, 30 Mar 2022 15:45:49 GMT">
							<outline text="Added feedUrl to the returned struct." created="Wed, 30 Mar 2022 15:45:50 GMT"/>
							</outline>
						<outline text="3/21/22; 10:52:37 AM by DW" created="Mon, 21 Mar 2022 14:52:36 GMT">
							<outline text="Convert database item to the item struct defined by the API." created="Mon, 21 Mar 2022 14:52:37 GMT"/>
							</outline>
						</outline>
					<outline text="function convertDate (d) {" created="Mon, 21 Mar 2022 15:07:26 GMT">
						<outline text="if ((d === undefined) || (d == null)) {" created="Wed, 23 Mar 2022 14:53:59 GMT">
							<outline text="return (undefined);" created="Wed, 23 Mar 2022 14:54:35 GMT"/>
							<outline text="}" created="Wed, 23 Mar 2022 14:54:28 GMT"/>
							</outline>
						<outline text="else {" created="Wed, 23 Mar 2022 14:54:41 GMT">
							<outline text="return (new Date (d).toUTCString ());"/>
							<outline text="}" created="Wed, 23 Mar 2022 14:54:43 GMT"/>
							</outline>
						<outline text="}" created="Mon, 21 Mar 2022 15:07:37 GMT"/>
						</outline>
					<outline text="var apiRec = {" created="Mon, 21 Mar 2022 14:52:34 GMT">
						<outline text="feedUrl: itemRec.feedUrl," created="Wed, 30 Mar 2022 15:45:30 GMT"/>
						<outline text="guid: checkNull (itemRec.guid)," created="Mon, 21 Mar 2022 14:53:51 GMT"/>
						<outline text="title: checkNull (itemRec.title)," created="Mon, 21 Mar 2022 14:55:37 GMT"/>
						<outline text="link: checkNull (itemRec.link)," created="Mon, 21 Mar 2022 14:55:37 GMT"/>
						<outline text="description: checkNull (itemRec.description)," created="Mon, 21 Mar 2022 14:55:37 GMT"/>
						<outline text="id: itemRec.id," created="Mon, 21 Mar 2022 14:55:37 GMT"/>
						<outline text="ctLikes: itemRec.ctLikes, //5/6/22 by DW" isComment="true" created="Fri, 06 May 2022 19:06:49 GMT"/>
						<outline text="pubDate: convertDate (itemRec.pubDate)," created="Mon, 21 Mar 2022 14:55:37 GMT"/>
						<outline text="whenReceived: convertDate (itemRec.whenCreated), //when the database item was created" created="Mon, 21 Mar 2022 14:55:37 GMT"/>
						<outline text="whenUpdated: convertDate (itemRec.whenUpdated), //when the database item last changed" created="Mon, 21 Mar 2022 14:55:37 GMT"/>
						<outline text="likes: convertLikesToArray (itemRec.likes) //10/15/22 by DW" created="Sat, 15 Oct 2022 17:56:01 GMT"/>
						<outline text="}" created="Mon, 21 Mar 2022 14:53:37 GMT"/>
						</outline>
					<outline text="apiRec.ctLikes = apiRec.likes.length; //10/15/22 by DW" created="Sat, 15 Oct 2022 18:01:49 GMT"/>
					<outline text="if (notNull (itemRec.enclosureUrl)) {" created="Mon, 21 Mar 2022 14:59:10 GMT">
						<outline text="var length = undefined, type = undefined;" created="Mon, 21 Mar 2022 15:03:01 GMT"/>
						<outline text="if (itemRec.enclosureLength != null) {" created="Mon, 21 Mar 2022 15:03:01 GMT">
							<outline text="try {" created="Mon, 21 Mar 2022 15:03:42 GMT">
								<outline text="length = Number (itemRec.enclosureLength);" created="Mon, 21 Mar 2022 15:03:57 GMT"/>
								<outline text="}" created="Mon, 21 Mar 2022 15:03:43 GMT"/>
								</outline>
							<outline text="catch (err) {" created="Mon, 21 Mar 2022 15:03:44 GMT">
								<outline text="}" created="Mon, 21 Mar 2022 15:03:47 GMT"/>
								</outline>
							<outline text="}" created="Mon, 21 Mar 2022 15:03:31 GMT"/>
							</outline>
						<outline text="if (itemRec.enclosureType != null) {" created="Mon, 21 Mar 2022 15:19:51 GMT">
							<outline text="type = itemRec.enclosureType;" created="Mon, 21 Mar 2022 15:20:05 GMT"/>
							<outline text="}" created="Mon, 21 Mar 2022 15:19:57 GMT"/>
							</outline>
						<outline text="apiRec.enclosure = {" created="Mon, 21 Mar 2022 15:01:10 GMT">
							<outline text="url: itemRec.enclosureUrl," created="Mon, 21 Mar 2022 14:56:29 GMT"/>
							<outline text="type," created="Mon, 21 Mar 2022 14:56:36 GMT"/>
							<outline text="length" created="Mon, 21 Mar 2022 14:56:36 GMT"/>
							<outline text="};" created="Mon, 21 Mar 2022 15:01:15 GMT"/>
							</outline>
						<outline text="}" created="Mon, 21 Mar 2022 14:59:24 GMT"/>
						</outline>
					<outline text="if (notNull (itemRec.outlineJsontext)) {" created="Mon, 21 Mar 2022 15:04:46 GMT">
						<outline text="try {" created="Mon, 21 Mar 2022 15:05:46 GMT">
							<outline text="apiRec.outline = JSON.parse (itemRec.outlineJsontext);" created="Mon, 21 Mar 2022 15:05:01 GMT"/>
							<outline text="}" created="Mon, 21 Mar 2022 15:05:48 GMT"/>
							</outline>
						<outline text="catch (err) {" created="Mon, 21 Mar 2022 15:05:48 GMT">
							<outline text="}" created="Mon, 21 Mar 2022 15:05:52 GMT"/>
							</outline>
						<outline text="}" created="Mon, 21 Mar 2022 15:04:54 GMT"/>
						</outline>
					<outline text="if (notNull (itemRec.markdowntext)) { //5/5/22 by DW" created="Mon, 21 Mar 2022 15:04:46 GMT">
						<outline text="apiRec.markdowntext = itemRec.markdowntext;" created="Thu, 05 May 2022 15:10:51 GMT"/>
						<outline text="}" created="Mon, 21 Mar 2022 15:04:54 GMT"/>
						</outline>
					<outline text="if (apiRec.ctLikes === undefined) { //5/7/22 by DW" created="Sat, 07 May 2022 14:30:14 GMT">
						<outline text="apiRec.ctLikes = 0;" created="Sat, 07 May 2022 14:30:32 GMT"/>
						<outline text="}" created="Sat, 07 May 2022 14:30:28 GMT"/>
						</outline>
					<outline text="return (apiRec);" created="Mon, 21 Mar 2022 15:27:15 GMT"/>
					<outline text="}" created="Mon, 21 Mar 2022 14:52:00 GMT"/>
					</outline>
				<outline text="function convertDatabaseFeed (feedRec) {" created="Wed, 30 Mar 2022 20:04:58 GMT">
					<outline text="Changes" isComment="true" created="Wed, 30 Mar 2022 20:07:49 GMT">
						<outline text="3/30/22; 4:07:52 PM by DW" created="Wed, 30 Mar 2022 20:07:51 GMT">
							<outline text="Created." created="Wed, 30 Mar 2022 20:07:54 GMT"/>
							</outline>
						</outline>
					<outline text="function notNull (val) {" created="Wed, 23 Mar 2022 14:49:40 GMT">
						<outline text="if (val === undefined) {" created="Wed, 23 Mar 2022 14:49:56 GMT">
							<outline text="return (false);" created="Wed, 23 Mar 2022 14:50:04 GMT"/>
							<outline text="}" created="Wed, 23 Mar 2022 14:50:07 GMT"/>
							</outline>
						<outline text="if (val == null) {" created="Wed, 23 Mar 2022 14:50:12 GMT">
							<outline text="return (false);" created="Wed, 23 Mar 2022 14:50:22 GMT"/>
							<outline text="}" created="Wed, 23 Mar 2022 14:50:27 GMT"/>
							</outline>
						<outline text="return (true);" created="Wed, 23 Mar 2022 14:50:28 GMT"/>
						<outline text="}" created="Wed, 23 Mar 2022 14:49:48 GMT"/>
						</outline>
					<outline text="function checkNull (val) {" created="Wed, 23 Mar 2022 14:51:36 GMT">
						<outline text="if (notNull (val)) {" created="Wed, 23 Mar 2022 14:51:49 GMT">
							<outline text="return (val);" created="Wed, 23 Mar 2022 14:52:03 GMT"/>
							<outline text="}" created="Wed, 23 Mar 2022 14:51:57 GMT"/>
							</outline>
						<outline text="return (undefined);" created="Wed, 23 Mar 2022 14:52:12 GMT"/>
						<outline text="}" created="Wed, 23 Mar 2022 14:51:45 GMT"/>
						</outline>
					<outline text="function convertDate (d) {" created="Mon, 21 Mar 2022 15:07:26 GMT">
						<outline text="if ((d === undefined) || (d == null)) {" created="Wed, 23 Mar 2022 14:53:59 GMT">
							<outline text="return (undefined);" created="Wed, 23 Mar 2022 14:54:35 GMT"/>
							<outline text="}" created="Wed, 23 Mar 2022 14:54:28 GMT"/>
							</outline>
						<outline text="else {" created="Wed, 23 Mar 2022 14:54:41 GMT">
							<outline text="return (new Date (d).toUTCString ());"/>
							<outline text="}" created="Wed, 23 Mar 2022 14:54:43 GMT"/>
							</outline>
						<outline text="}" created="Mon, 21 Mar 2022 15:07:37 GMT"/>
						</outline>
					<outline text="var apiRec = {" created="Wed, 30 Mar 2022 20:05:32 GMT">
						<outline text="feedUrl: feedRec.feedUrl," created="Wed, 30 Mar 2022 20:09:12 GMT"/>
						<outline text="feedId: feedRec.feedId, //2/3/24 by DW" created="Sat, 03 Feb 2024 16:15:21 GMT"/>
						<outline text="title: checkNull (feedRec.title)," created="Wed, 30 Mar 2022 20:09:20 GMT"/>
						<outline text="link: checkNull (feedRec.htmlUrl)," created="Wed, 30 Mar 2022 20:10:37 GMT"/>
						<outline text="description: checkNull (feedRec.description)," created="Wed, 30 Mar 2022 20:10:37 GMT"/>
						<outline text="pubDate: convertDate (feedRec.pubDate)," created="Wed, 30 Mar 2022 20:11:44 GMT"/>
						<outline text="whenCreated: convertDate (feedRec.whenCreated)," created="Wed, 30 Mar 2022 20:11:44 GMT"/>
						<outline text="whenUpdated: convertDate (feedRec.whenUpdated)," created="Wed, 30 Mar 2022 20:11:44 GMT"/>
						<outline text="ctItems: checkNull (feedRec.ctItems), //5/22/22 by DW" created="Wed, 30 Mar 2022 20:10:37 GMT"/>
						<outline text="whoFirstSubscribed: checkNull (feedRec.whoFirstSubscribed), //7/20/22 by DW" created="Wed, 30 Mar 2022 20:10:37 GMT"/>
						<outline text="ctSubs: checkNull (feedRec.ctSubs)," created="Wed, 30 Mar 2022 20:10:37 GMT"/>
						<outline text="ctSecs: checkNull (feedRec.ctSecs)," created="Wed, 30 Mar 2022 20:10:37 GMT"/>
						<outline text="ctErrors: checkNull (feedRec.ctErrors)," created="Wed, 30 Mar 2022 20:10:37 GMT"/>
						<outline text="ctConsecutiveErrors: checkNull (feedRec.ctConsecutiveErrors)," created="Wed, 30 Mar 2022 20:10:37 GMT"/>
						<outline text="errorString: checkNull (feedRec.errorString)," created="Wed, 30 Mar 2022 20:10:37 GMT"/>
						<outline text="whenChecked: convertDate (feedRec.whenChecked), //4/3/22 by DW" created="Wed, 30 Mar 2022 20:11:44 GMT"/>
						<outline text="ctChecks: checkNull (feedRec.ctChecks)," created="Wed, 30 Mar 2022 20:10:37 GMT"/>
						<outline text="whenLastError: convertDate (feedRec.whenLastError)," created="Wed, 30 Mar 2022 20:10:37 GMT"/>
						<outline text="urlCloudServer: checkNull (feedRec.urlCloudServer)," created="Wed, 30 Mar 2022 20:10:37 GMT"/>
						<outline text="whenLastCloudRenew: convertDate (feedRec.whenLastCloudRenew)," created="Wed, 30 Mar 2022 20:10:37 GMT"/>
						<outline text="ctCloudRenews: checkNull (feedRec.ctCloudRenews)," created="Wed, 30 Mar 2022 20:10:37 GMT"/>
						<outline text="copyright: checkNull (feedRec.copyright)," created="Wed, 30 Mar 2022 20:10:37 GMT"/>
						<outline text="generator: checkNull (feedRec.generator)," created="Wed, 30 Mar 2022 20:10:37 GMT"/>
						<outline text="language: checkNull (feedRec.language)," created="Wed, 30 Mar 2022 20:10:37 GMT"/>
						<outline text="twitterAccount: checkNull (feedRec.twitterAccount)," created="Wed, 30 Mar 2022 20:10:37 GMT"/>
						<outline text="managingEditor: checkNull (feedRec.managingEditor)," created="Wed, 30 Mar 2022 20:10:37 GMT"/>
						<outline text="webMaster: checkNull (feedRec.webMaster)," created="Wed, 30 Mar 2022 20:10:37 GMT"/>
						<outline text="lastBuildDate: convertDate (feedRec.lastBuildDate)," created="Wed, 30 Mar 2022 20:10:37 GMT"/>
						<outline text="docs: checkNull (feedRec.docs)," created="Wed, 30 Mar 2022 20:10:37 GMT"/>
						<outline text="ttl: checkNull (feedRec.ttl)," created="Wed, 30 Mar 2022 20:10:37 GMT"/>
						<outline text="imageUrl: checkNull (feedRec.imageUrl)," created="Wed, 30 Mar 2022 20:10:37 GMT"/>
						<outline text="imageTitle: checkNull (feedRec.imageTitle)," created="Wed, 30 Mar 2022 20:10:37 GMT"/>
						<outline text="imageLink: checkNull (feedRec.imageLink)," created="Wed, 30 Mar 2022 20:10:37 GMT"/>
						<outline text="imageWidth: checkNull (feedRec.imageWidth)," created="Wed, 30 Mar 2022 20:10:37 GMT"/>
						<outline text="imageHeight: checkNull (feedRec.imageHeight)," created="Wed, 30 Mar 2022 20:10:37 GMT"/>
						<outline text="imageDescription: checkNull (feedRec.imageDescription)" created="Wed, 30 Mar 2022 20:10:37 GMT"/>
						<outline text="};" created="Wed, 30 Mar 2022 20:05:37 GMT"/>
						</outline>
					<outline text="return (apiRec);" created="Mon, 21 Mar 2022 15:27:15 GMT"/>
					<outline text="}" created="Wed, 30 Mar 2022 20:05:08 GMT"/>
					</outline>
				<outline text="function convertItemList (queryResult) {" created="Wed, 30 Mar 2022 15:37:34 GMT">
					<outline text="var itemList = new Array ();" created="Wed, 30 Mar 2022 15:38:07 GMT"/>
					<outline text="queryResult.forEach (function (item) {" created="Wed, 23 Mar 2022 14:31:40 GMT">
						<outline text="itemList.push (convertDatabaseItem (item));" created="Wed, 23 Mar 2022 14:31:51 GMT"/>
						<outline text="});" created="Wed, 23 Mar 2022 14:31:47 GMT"/>
						</outline>
					<outline text="return (itemList);" created="Wed, 30 Mar 2022 15:38:52 GMT"/>
					<outline text="}" created="Wed, 30 Mar 2022 15:37:59 GMT"/>
					</outline>
				<outline text="function getUpdatedFeed (feedUrl, callback) {" created="Wed, 23 Mar 2022 14:15:32 GMT">
					<outline text="checkFeedAndItems (feedUrl, function (err, theFeed, feedRec) {" created="Wed, 23 Mar 2022 18:31:03 GMT">
						<outline text="if (err) {" created="Fri, 25 Mar 2022 15:47:47 GMT">
							<outline text="callback (err);" created="Fri, 25 Mar 2022 15:48:02 GMT"/>
							<outline text="}" created="Fri, 25 Mar 2022 15:47:53 GMT"/>
							</outline>
						<outline text="else {" created="Fri, 25 Mar 2022 15:47:53 GMT">
							<outline text="const deleteCheck = (config.flCheckForDeleted) ? &quot; flDeleted=false and &quot; : &quot;&quot;; //11/20/23 by DW" created="Mon, 20 Nov 2023 13:51:29 GMT"/>
							<outline text="const sqltext = &quot;select * from items where &quot; + deleteCheck + &quot; and feedUrl=&quot; + davesql.encode (feedUrl) + &quot; order by pubDate desc limit &quot; + config.maxRiverItems + &quot;;&quot;;" created="Wed, 23 Mar 2022 14:22:51 GMT"/>
							<outline text="davesql.runSqltext (sqltext, function (err, result) {">
								<outline text="if (err) {">
									<outline text="callback (err);" created="Sat, 19 Mar 2022 16:17:21 GMT"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="theFeed.items = convertItemList (result);" created="Thu, 24 Mar 2022 15:38:13 GMT"/>
									<outline text="callback (undefined, convertDatabaseFeed (theFeed));"/>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}" created="Fri, 25 Mar 2022 15:47:55 GMT"/>
							</outline>
						<outline text="});" created="Wed, 23 Mar 2022 18:31:04 GMT"/>
						</outline>
					<outline text="}" created="Wed, 23 Mar 2022 14:15:46 GMT"/>
					</outline>
				<outline text="function recordFeedError (feedUrl, err) { //4/28/22 by DW" created="Thu, 28 Apr 2022 17:05:06 GMT">
					<outline text="Changes" isComment="true" created="Tue, 17 May 2022 23:03:13 GMT">
						<outline text="7/1/22; 11:16:46 AM by DW" created="Fri, 01 Jul 2022 15:16:45 GMT">
							<outline text="We weren't setting whenLastError." created="Fri, 01 Jul 2022 15:16:46 GMT"/>
							</outline>
						<outline text="5/17/22; 7:03:15 PM by DW" created="Tue, 17 May 2022 23:03:14 GMT">
							<outline text="Only save the error info if we found the feed in the database." created="Tue, 17 May 2022 23:03:16 GMT"/>
							</outline>
						</outline>
					<outline text="isFeedInDatabase (feedUrl, function (flInDatabase, feedRec) {" created="Thu, 28 Apr 2022 17:05:43 GMT">
						<outline text="if (flInDatabase) {" created="Tue, 17 May 2022 23:03:00 GMT">
							<outline text="const now = new Date ();" created="Fri, 01 Jul 2022 15:16:08 GMT"/>
							<outline text="feedRec.whenChecked = now;" created="Thu, 28 Apr 2022 17:05:57 GMT"/>
							<outline text="feedRec.ctChecks++;" created="Thu, 28 Apr 2022 17:06:19 GMT"/>
							<outline text="feedRec.whenLastError = now; //7/1/22 by DW" created="Fri, 01 Jul 2022 15:15:40 GMT"/>
							<outline text="feedRec.ctErrors++;" created="Thu, 28 Apr 2022 17:09:47 GMT"/>
							<outline text="feedRec.ctConsecutiveErrors++;" created="Thu, 28 Apr 2022 17:09:47 GMT"/>
							<outline text="feedRec.errorString = err.message;" created="Thu, 28 Apr 2022 17:09:47 GMT"/>
							<outline text="saveFeed (feedRec);" created="Fri, 01 Apr 2022 14:17:29 GMT"/>
							<outline text="}" created="Tue, 17 May 2022 23:03:03 GMT"/>
							</outline>
						<outline text="});" created="Thu, 28 Apr 2022 17:05:46 GMT"/>
						</outline>
					<outline text="}" created="Thu, 28 Apr 2022 17:05:13 GMT"/>
					</outline>
				<outline text="function countSubsForFeed (feedUrl, callback) {">
					<outline text="var sqltext = &quot;select count(*) as theCount from subscriptions where feedUrl = &quot; + davesql.encode (feedUrl) + &quot;;&quot;;"/>
					<outline text="davesql.runSqltext (sqltext, function (err, result) {">
						<outline text="if (err) {">
							<outline text="callback (err);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="console.log (&quot;countSubsForFeed: result == &quot; + utils.jsonStringify (result));" isComment="true"/>
							<outline text="callback (undefined, result [0].theCount);"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function setFeedSubsCount (feedUrl, callback) { //5/21/22 by DW" created="Fri, 22 Apr 2022 13:40:51 GMT">
					<outline text="Changes" isComment="true" created="Sat, 21 May 2022 14:55:15 GMT">
						<outline text="5/21/22; 10:55:18 AM by DW" created="Sat, 21 May 2022 14:55:16 GMT">
							<outline text="Make sure the ctSubs field of the feed is set correctly. " created="Sat, 21 May 2022 14:55:18 GMT"/>
							<outline text="Since there likely isn't anything the caller wants to do, the callback is optional." created="Sat, 21 May 2022 14:55:44 GMT"/>
							</outline>
						</outline>
					<outline text="isFeedInDatabase (feedUrl, function (flInDatabase, feedRec) {" created="Tue, 29 Mar 2022 19:29:53 GMT">
						<outline text="if (flInDatabase) {" created="Tue, 29 Mar 2022 19:30:01 GMT">
							<outline text="countSubsForFeed (feedUrl, function (err, ctSubs) {" created="Sat, 21 May 2022 14:28:27 GMT">
								<outline text="if (err) {" created="Sat, 21 May 2022 14:57:10 GMT">
									<outline text="if (callback !== undefined) {" created="Sat, 21 May 2022 14:56:16 GMT">
										<outline text="callback (err);" created="Fri, 22 Apr 2022 14:13:13 GMT"/>
										<outline text="}" created="Sat, 21 May 2022 14:56:22 GMT"/>
										</outline>
									<outline text="}" created="Sat, 21 May 2022 14:57:13 GMT"/>
									</outline>
								<outline text="else {" created="Sat, 21 May 2022 14:57:14 GMT">
									<outline text="if (ctSubs == feedRec.ctSubs) { //unchanged, no need to save" created="Sat, 21 May 2022 15:29:07 GMT">
										<outline text="if (callback !== undefined) {" created="Sat, 21 May 2022 14:56:16 GMT">
											<outline text="callback (undefined, ctSubs);" created="Fri, 22 Apr 2022 14:13:19 GMT"/>
											<outline text="}" created="Sat, 21 May 2022 14:56:22 GMT"/>
											</outline>
										<outline text="}" created="Sat, 21 May 2022 15:29:19 GMT"/>
										</outline>
									<outline text="else {" created="Sat, 21 May 2022 15:29:21 GMT">
										<outline text="feedRec.ctSubs = ctSubs;" created="Sat, 21 May 2022 14:30:38 GMT"/>
										<outline text="saveFeed (feedRec, function (err, data) { " created="Fri, 22 Apr 2022 13:57:52 GMT">
											<outline text="if (err) {" created="Sat, 21 May 2022 15:15:33 GMT">
												<outline text="console.log (&quot;setFeedSubsCount: feedUrl == &quot; + feedUrl + &quot;, err.message == &quot; + err.message);" isComment="true" created="Sat, 21 May 2022 15:15:40 GMT"/>
												<outline text="if (callback !== undefined) {" created="Sat, 21 May 2022 14:56:16 GMT">
													<outline text="callback (err);" created="Fri, 22 Apr 2022 14:13:13 GMT"/>
													<outline text="}" created="Sat, 21 May 2022 14:56:22 GMT"/>
													</outline>
												<outline text="}" created="Sat, 21 May 2022 15:16:16 GMT"/>
												</outline>
											<outline text="else {" created="Sat, 21 May 2022 15:16:18 GMT">
												<outline text="console.log (&quot;setFeedSubsCount: feedUrl == &quot; + feedUrl + &quot;, ctSubs == &quot; + ctSubs);" isComment="true" created="Sat, 21 May 2022 15:15:40 GMT"/>
												<outline text="if (callback !== undefined) {" created="Sat, 21 May 2022 14:56:16 GMT">
													<outline text="callback (undefined, ctSubs);" created="Fri, 22 Apr 2022 14:13:19 GMT"/>
													<outline text="}" created="Sat, 21 May 2022 14:56:22 GMT"/>
													</outline>
												<outline text="}" created="Sat, 21 May 2022 15:16:20 GMT"/>
												</outline>
											<outline text="});" created="Fri, 22 Apr 2022 14:13:04 GMT"/>
											</outline>
										<outline text="}" created="Sat, 21 May 2022 15:29:22 GMT"/>
										</outline>
									<outline text="}" created="Sat, 21 May 2022 14:57:15 GMT"/>
									</outline>
								<outline text="});" created="Sat, 21 May 2022 14:28:53 GMT"/>
								</outline>
							<outline text="}" created="Tue, 29 Mar 2022 19:30:08 GMT"/>
							</outline>
						<outline text="});" created="Tue, 29 Mar 2022 19:29:54 GMT"/>
						</outline>
					<outline text="}" created="Fri, 22 Apr 2022 13:41:01 GMT"/>
					</outline>
				<outline text="function countItemsForFeed (feedUrl, callback) {">
					<outline text="var sqltext = &quot;select count(*) as theCount from items where feedUrl = &quot; + davesql.encode (feedUrl) + &quot;;&quot;;"/>
					<outline text="davesql.runSqltext (sqltext, function (err, result) {">
						<outline text="if (err) {">
							<outline text="callback (err);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="console.log (&quot;countItemsForFeed: result == &quot; + utils.jsonStringify (result));" isComment="true"/>
							<outline text="callback (undefined, result [0].theCount);"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function setFeedItemsCount (feedUrl, callback) { //5/21/22 by DW" created="Fri, 22 Apr 2022 13:40:51 GMT">
					<outline text="Changes" isComment="true" created="Sat, 21 May 2022 14:55:15 GMT">
						<outline text="5/21/22; 10:55:18 AM by DW" created="Sat, 21 May 2022 14:55:16 GMT">
							<outline text="Make sure the ctSubs field of the feed is set correctly. " created="Sat, 21 May 2022 14:55:18 GMT"/>
							<outline text="Since there likely isn't anything the caller wants to do, the callback is optional." created="Sat, 21 May 2022 14:55:44 GMT"/>
							</outline>
						</outline>
					<outline text="isFeedInDatabase (feedUrl, function (flInDatabase, feedRec) {" created="Tue, 29 Mar 2022 19:29:53 GMT">
						<outline text="if (flInDatabase) {" created="Tue, 29 Mar 2022 19:30:01 GMT">
							<outline text="countItemsForFeed (feedUrl, function (err, ctItems) {" created="Sat, 21 May 2022 14:28:27 GMT">
								<outline text="if (err) {" created="Sat, 21 May 2022 14:57:10 GMT">
									<outline text="if (callback !== undefined) {" created="Sat, 21 May 2022 14:56:16 GMT">
										<outline text="callback (err);" created="Fri, 22 Apr 2022 14:13:13 GMT"/>
										<outline text="}" created="Sat, 21 May 2022 14:56:22 GMT"/>
										</outline>
									<outline text="}" created="Sat, 21 May 2022 14:57:13 GMT"/>
									</outline>
								<outline text="else {" created="Sat, 21 May 2022 14:57:14 GMT">
									<outline text="if (ctItems == feedRec.ctItems) { //unchanged, no need to save" created="Sat, 21 May 2022 15:29:07 GMT">
										<outline text="if (callback !== undefined) {" created="Sat, 21 May 2022 14:56:16 GMT">
											<outline text="callback (undefined, ctItems);" created="Fri, 22 Apr 2022 14:13:19 GMT"/>
											<outline text="}" created="Sat, 21 May 2022 14:56:22 GMT"/>
											</outline>
										<outline text="}" created="Sat, 21 May 2022 15:29:19 GMT"/>
										</outline>
									<outline text="else {" created="Sat, 21 May 2022 15:29:21 GMT">
										<outline text="feedRec.ctItems = ctItems;" created="Sat, 21 May 2022 14:30:38 GMT"/>
										<outline text="saveFeed (feedRec, function (err, data) { " created="Fri, 22 Apr 2022 13:57:52 GMT">
											<outline text="if (err) {" created="Sat, 21 May 2022 15:15:33 GMT">
												<outline text="if (callback !== undefined) {" created="Sat, 21 May 2022 14:56:16 GMT">
													<outline text="callback (err);" created="Fri, 22 Apr 2022 14:13:13 GMT"/>
													<outline text="}" created="Sat, 21 May 2022 14:56:22 GMT"/>
													</outline>
												<outline text="}" created="Sat, 21 May 2022 15:16:16 GMT"/>
												</outline>
											<outline text="else {" created="Sat, 21 May 2022 15:16:18 GMT">
												<outline text="if (callback !== undefined) {" created="Sat, 21 May 2022 14:56:16 GMT">
													<outline text="callback (undefined, ctItems);" created="Fri, 22 Apr 2022 14:13:19 GMT"/>
													<outline text="}" created="Sat, 21 May 2022 14:56:22 GMT"/>
													</outline>
												<outline text="}" created="Sat, 21 May 2022 15:16:20 GMT"/>
												</outline>
											<outline text="});" created="Fri, 22 Apr 2022 14:13:04 GMT"/>
											</outline>
										<outline text="}" created="Sat, 21 May 2022 15:29:22 GMT"/>
										</outline>
									<outline text="}" created="Sat, 21 May 2022 14:57:15 GMT"/>
									</outline>
								<outline text="});" created="Sat, 21 May 2022 14:28:53 GMT"/>
								</outline>
							<outline text="}" created="Tue, 29 Mar 2022 19:30:08 GMT"/>
							</outline>
						<outline text="});" created="Tue, 29 Mar 2022 19:29:54 GMT"/>
						</outline>
					<outline text="}" created="Fri, 22 Apr 2022 13:41:01 GMT"/>
					</outline>
				<outline text="function setFeedCounts (feedUrl, callback) { //7/13/22 by DW" created="Wed, 13 Jul 2022 14:41:59 GMT">
					<outline text="setFeedItemsCount (feedUrl, function () {" created="Sat, 21 May 2022 16:23:36 GMT">
						<outline text="setFeedSubsCount (feedUrl, callback);" created="Sat, 21 May 2022 16:27:37 GMT"/>
						<outline text="});" created="Sat, 21 May 2022 16:28:02 GMT"/>
						</outline>
					<outline text="}" created="Wed, 13 Jul 2022 14:42:11 GMT"/>
					</outline>
				<outline text="function setupNewFeedRec (feedUrl, theFeed) {" created="Fri, 27 May 2022 14:51:54 GMT">
					<outline text="Changes" isComment="true" created="Fri, 27 May 2022 14:52:43 GMT">
						<outline text="6/2/25; 11:54:16 AM by DW" created="Mon, 02 Jun 2025 15:54:15 GMT">
							<outline text="We incorrectly assumed that incoming feed records will have image attributes laid out like this:" created="Mon, 02 Jun 2025 15:44:44 GMT">
								<outline text="theFeed = {imageUrl, imageTitle, imageLink, imageWidth, imageHeight, imageDescription};" created="Mon, 02 Jun 2025 15:45:07 GMT"/>
								</outline>
							<outline text="But that isn't the way it works. Instead what comes in is this:" created="Mon, 02 Jun 2025 15:46:28 GMT">
								<outline text="theFeed = {image: {url, title, link, width, height, description}}" created="Mon, 02 Jun 2025 15:45:07 GMT"/>
								</outline>
							<outline text="We do the conversion in convertImageFormat." created="Mon, 02 Jun 2025 15:47:40 GMT"/>
							</outline>
						<outline text="10/13/22; 2:33:41 PM by DW" created="Thu, 13 Oct 2022 18:33:40 GMT">
							<outline text="When creating a new feed, we'd initialize whenLastCloudRenew to 24 hours before now. Cute, but confusing when it's displayed on the Feed Info page. Esp a feed that isn't cloud-enabled, it'd never change. So I'm changing it to new Date (0)." created="Thu, 13 Oct 2022 18:33:41 GMT"/>
							</outline>
						<outline text="7/2/22; 11:03:50 AM by DW" created="Sat, 02 Jul 2022 15:03:49 GMT">
							<outline text="We moved the second-counting code down into the reallysimple package, so now we can just copy the vallue from the reader struct it creates in theFeed." created="Sat, 02 Jul 2022 15:03:50 GMT"/>
							<outline text="Removed the whenstart param, not needed. " created="Sat, 02 Jul 2022 17:52:38 GMT"/>
							</outline>
						<outline text="7/1/22; 11:45:04 AM by DW" created="Fri, 01 Jul 2022 15:45:03 GMT">
							<outline text="New param, whenstart, so we can correctly set ctSecs." created="Fri, 01 Jul 2022 15:45:05 GMT"/>
							</outline>
						<outline text="5/27/22; 10:52:46 AM by DW" created="Fri, 27 May 2022 14:52:45 GMT">
							<outline text="theFeed is an object that was returned by reallySimple.readFeed." created="Fri, 27 May 2022 14:54:08 GMT"/>
							<outline text="we turn it into into an object suitable for inserting into the database." created="Fri, 27 May 2022 14:52:51 GMT"/>
							</outline>
						</outline>
					<outline text="const whenstart = new Date ();" created="Sat, 19 Mar 2022 16:02:14 GMT"/>
					<outline text="const titlestring = maxStringLength (theFeed.title, config.maxLengthFeedTitle);"/>
					<outline text="const descriptionstring = maxStringLength (theFeed.description, config.maxLengthFeedDescription);"/>
					<outline text="const ctSecs = utils.secondsSince (whenstart);" isComment="true" created="Sat, 19 Mar 2022 16:02:14 GMT"/>
					<outline text="" created="Wed, 30 Mar 2022 14:15:36 GMT"/>
					<outline text="function convertImageFormat (theFeed) { //6/2/25 by DW" created="Mon, 02 Jun 2025 15:42:21 GMT">
						<outline text="Changes" isComment="true" created="Mon, 02 Jun 2025 15:44:37 GMT">
							<outline text="6/2/25; 11:44:43 AM by DW" created="Mon, 02 Jun 2025 15:44:42 GMT">
								<outline text="We incorrectly assumed that incoming feed records will have image attributes laid out like this:" created="Mon, 02 Jun 2025 15:44:44 GMT">
									<outline text="theFeed = {" created="Mon, 02 Jun 2025 15:45:07 GMT">
										<outline text="imageUrl, imageTitle, imageLink, imageWidth, imageHeight, imageDescription"/>
										<outline text="};" created="Mon, 02 Jun 2025 15:45:13 GMT"/>
										</outline>
									</outline>
								<outline text="But that isn't the way it works. Instead what comes in is this:" created="Mon, 02 Jun 2025 15:46:28 GMT">
									<outline text="theFeed = {" created="Mon, 02 Jun 2025 15:45:07 GMT">
										<outline text="image: {" created="Mon, 02 Jun 2025 15:46:42 GMT">
											<outline text="url, title, link, width, height, description" created="Mon, 02 Jun 2025 15:46:47 GMT"/>
											<outline text="}" created="Mon, 02 Jun 2025 15:46:44 GMT"/>
											</outline>
										<outline text="};" created="Mon, 02 Jun 2025 15:45:13 GMT"/>
										</outline>
									</outline>
								<outline text="We do the conversion here." created="Mon, 02 Jun 2025 15:47:40 GMT"/>
								</outline>
							</outline>
						<outline text="if (theFeed.image !== undefined) {" created="Mon, 02 Jun 2025 15:44:37 GMT">
							<outline text="if (theFeed.image.url !== undefined) {" created="Mon, 02 Jun 2025 16:00:34 GMT">
								<outline text="theFeed.imageUrl = theFeed.image.url;" created="Mon, 02 Jun 2025 15:48:16 GMT"/>
								<outline text="}" created="Mon, 02 Jun 2025 16:00:47 GMT"/>
								</outline>
							<outline text="if (theFeed.image.title !== undefined) {" created="Mon, 02 Jun 2025 16:00:34 GMT">
								<outline text="theFeed.imageTitle = theFeed.image.title;" created="Mon, 02 Jun 2025 15:48:16 GMT"/>
								<outline text="}" created="Mon, 02 Jun 2025 16:00:47 GMT"/>
								</outline>
							<outline text="if (theFeed.image.link !== undefined) {" created="Mon, 02 Jun 2025 16:00:34 GMT">
								<outline text="theFeed.imageLink = theFeed.image.link;" created="Mon, 02 Jun 2025 15:48:16 GMT"/>
								<outline text="}" created="Mon, 02 Jun 2025 16:00:47 GMT"/>
								</outline>
							<outline text="if (theFeed.image.width !== undefined) {" created="Mon, 02 Jun 2025 16:00:34 GMT">
								<outline text="theFeed.imageWidth = theFeed.image.width;" created="Mon, 02 Jun 2025 15:48:16 GMT"/>
								<outline text="}" created="Mon, 02 Jun 2025 16:00:47 GMT"/>
								</outline>
							<outline text="if (theFeed.image.height !== undefined) {" created="Mon, 02 Jun 2025 16:00:34 GMT">
								<outline text="theFeed.imageHeight = theFeed.image.height;" created="Mon, 02 Jun 2025 15:48:16 GMT"/>
								<outline text="}" created="Mon, 02 Jun 2025 16:00:47 GMT"/>
								</outline>
							<outline text="if (theFeed.image.description !== undefined) {" created="Mon, 02 Jun 2025 16:00:34 GMT">
								<outline text="theFeed.imageDescription = theFeed.image.description;" created="Mon, 02 Jun 2025 15:48:16 GMT"/>
								<outline text="}" created="Mon, 02 Jun 2025 16:00:47 GMT"/>
								</outline>
							<outline text="}" created="Mon, 02 Jun 2025 15:48:08 GMT"/>
							</outline>
						<outline text="}" created="Mon, 02 Jun 2025 15:42:42 GMT"/>
						</outline>
					<outline text="function getUrlCloudServer (theFeed) {" created="Sat, 19 Mar 2022 16:03:57 GMT">
						<outline text="var url = undefined;" created="Sat, 19 Mar 2022 16:05:12 GMT"/>
						<outline text="if (theFeed.cloudUrl === undefined) {" created="Tue, 28 Nov 2023 20:56:37 GMT">
							<outline text="if ((theFeed.cloud !== undefined) &amp;&amp; (theFeed.cloud.type == &quot;rsscloud&quot;)) {">
								<outline text="url = &quot;http://&quot; + theFeed.cloud.domain + &quot;:&quot; + theFeed.cloud.port + theFeed.cloud.path;"/>
								<outline text="}"/>
								</outline>
							<outline text="}" created="Tue, 28 Nov 2023 20:56:57 GMT"/>
							</outline>
						<outline text="else { //11/28/23 by DW -- use the value provided by source:cloud element" created="Tue, 28 Nov 2023 20:56:58 GMT">
							<outline text="url = theFeed.cloudUrl;" created="Tue, 28 Nov 2023 20:57:15 GMT"/>
							<outline text="}" created="Tue, 28 Nov 2023 20:56:59 GMT"/>
							</outline>
						<outline text="return (url);" created="Sat, 19 Mar 2022 16:05:18 GMT"/>
						<outline text="}" created="Sat, 19 Mar 2022 16:04:05 GMT"/>
						</outline>
					<outline text="function getTwitterScreenname () {" created="Sun, 03 Apr 2022 16:49:04 GMT">
						<outline text="var screenname = undefined;" created="Sun, 03 Apr 2022 16:49:36 GMT"/>
						<outline text="if (theFeed.accounts !== undefined) {" created="Sun, 03 Apr 2022 16:49:36 GMT">
							<outline text="if (theFeed.accounts.twitter !== undefined) {" created="Sun, 03 Apr 2022 16:49:36 GMT">
								<outline text="screenname = theFeed.accounts.twitter;" created="Sun, 03 Apr 2022 16:50:17 GMT"/>
								<outline text="}" created="Sun, 03 Apr 2022 16:49:58 GMT"/>
								</outline>
							<outline text="}" created="Sun, 03 Apr 2022 16:49:58 GMT"/>
							</outline>
						<outline text="return (screenname);" created="Sun, 03 Apr 2022 16:51:09 GMT"/>
						<outline text="}" created="Sun, 03 Apr 2022 16:49:16 GMT"/>
						</outline>
					<outline text="function getFeedMetadataString (theString) {" created="Wed, 30 Mar 2022 13:58:15 GMT">
						<outline text="if (theString === undefined) {" created="Wed, 30 Mar 2022 14:30:02 GMT">
							<outline text="return (undefined);" created="Wed, 30 Mar 2022 14:30:18 GMT"/>
							<outline text="}" created="Wed, 30 Mar 2022 14:30:08 GMT"/>
							</outline>
						<outline text="else {" created="Wed, 30 Mar 2022 14:30:38 GMT">
							<outline text="return (maxStringLength (theString, config.maxFeedMetadata));" created="Wed, 30 Mar 2022 13:58:33 GMT"/>
							<outline text="}" created="Wed, 30 Mar 2022 14:30:41 GMT"/>
							</outline>
						<outline text="}" created="Wed, 30 Mar 2022 13:58:25 GMT"/>
						</outline>
					<outline text="function getFeedMetadataLink (url) {" created="Wed, 30 Mar 2022 13:58:15 GMT">
						<outline text="if (url === undefined) {" created="Wed, 30 Mar 2022 14:30:02 GMT">
							<outline text="return (undefined);" created="Wed, 30 Mar 2022 14:30:18 GMT"/>
							<outline text="}" created="Wed, 30 Mar 2022 14:30:08 GMT"/>
							</outline>
						<outline text="else {" created="Wed, 30 Mar 2022 14:30:09 GMT">
							<outline text="return (maxStringLength (url, config.maxFeedUrlLength));" created="Wed, 30 Mar 2022 13:58:33 GMT"/>
							<outline text="}" created="Wed, 30 Mar 2022 14:30:11 GMT"/>
							</outline>
						<outline text="}" created="Wed, 30 Mar 2022 13:58:25 GMT"/>
						</outline>
					<outline text="function getFeedDate (theDate) {" created="Wed, 30 Mar 2022 13:58:15 GMT">
						<outline text="var d = new Date (theDate);" created="Wed, 30 Mar 2022 14:23:12 GMT"/>
						<outline text="if (d == &quot;Invalid Date&quot;) {" created="Wed, 30 Mar 2022 14:23:29 GMT">
							<outline text="d = undefined;" created="Wed, 30 Mar 2022 14:23:42 GMT"/>
							<outline text="}" created="Wed, 30 Mar 2022 14:23:38 GMT"/>
							</outline>
						<outline text="return (d);" created="Wed, 30 Mar 2022 14:23:52 GMT"/>
						<outline text="}" created="Wed, 30 Mar 2022 13:58:25 GMT"/>
						</outline>
					<outline text="function getFeedMetadataNumber (theNumber) {" created="Wed, 30 Mar 2022 14:27:42 GMT">
						<outline text="var n = Number (theNumber);" created="Wed, 30 Mar 2022 14:28:22 GMT"/>
						<outline text="if (isNaN (n)) {" created="Wed, 30 Mar 2022 14:23:29 GMT">
							<outline text="n = undefined;" created="Wed, 30 Mar 2022 14:23:42 GMT"/>
							<outline text="}" created="Wed, 30 Mar 2022 14:23:38 GMT"/>
							</outline>
						<outline text="return (n);" created="Wed, 30 Mar 2022 14:29:14 GMT"/>
						<outline text="}" created="Wed, 30 Mar 2022 14:27:51 GMT"/>
						</outline>
					<outline text="" created="Mon, 02 Jun 2025 15:42:19 GMT"/>
					<outline text="convertImageFormat (theFeed); //6/2/25 by DW"/>
					<outline text="" created="Mon, 02 Jun 2025 15:42:22 GMT"/>
					<outline text="var feedRec = {">
						<outline text="feedUrl: feedUrl,"/>
						<outline text="" created="Wed, 30 Mar 2022 14:08:14 GMT"/>
						<outline text="title: getFeedMetadataString (theFeed.title),"/>
						<outline text="htmlUrl: getFeedMetadataLink (theFeed.link),"/>
						<outline text="description: getFeedMetadataString (theFeed.description),"/>
						<outline text="" created="Wed, 30 Mar 2022 14:15:06 GMT"/>
						<outline text="pubDate: getFeedDate (theFeed.pubDate)," created="Wed, 30 Mar 2022 14:16:48 GMT"/>
						<outline text="" created="Wed, 30 Mar 2022 14:17:21 GMT"/>
						<outline text="whenCreated: whenstart,"/>
						<outline text="whenUpdated: whenstart,"/>
						<outline text="" created="Wed, 30 Mar 2022 14:15:04 GMT"/>
						<outline text="ctSubs: 0," created="Sat, 19 Mar 2022 16:28:52 GMT"/>
						<outline text="ctSecs: theFeed.reader.ctSecsToRead, //7/2/22 by DW"/>
						<outline text="" created="Wed, 30 Mar 2022 14:15:01 GMT"/>
						<outline text="ctErrors: 0,"/>
						<outline text="ctConsecutiveErrors: 0," created="Sat, 19 Mar 2022 16:00:24 GMT"/>
						<outline text="errorString: &quot;&quot;," created="Sat, 19 Mar 2022 16:00:36 GMT"/>
						<outline text="whenChecked: whenstart, //4/3/22 by DW"/>
						<outline text="ctChecks: 1, "/>
						<outline text="whenLastError: new Date (0),"/>
						<outline text="" created="Wed, 30 Mar 2022 14:14:57 GMT"/>
						<outline text="urlCloudServer: getUrlCloudServer (theFeed)," created="Sat, 19 Mar 2022 16:00:53 GMT"/>
						<outline text="whenLastCloudRenew: new Date (0), //10/13/22 by DW"/>
						<outline text="whenLastCloudRenew: utils.dateYesterday (whenstart)," isComment="true"/>
						<outline text="ctCloudRenews: 0,"/>
						<outline text="" created="Wed, 30 Mar 2022 13:57:15 GMT"/>
						<outline text="copyright: getFeedMetadataString (theFeed.copyright)," created="Wed, 30 Mar 2022 13:57:16 GMT"/>
						<outline text="generator: getFeedMetadataString (theFeed.generator)," created="Wed, 30 Mar 2022 13:57:16 GMT"/>
						<outline text="language: getFeedMetadataString (theFeed.language)," created="Wed, 30 Mar 2022 13:57:16 GMT"/>
						<outline text="managingEditor: getFeedMetadataString (theFeed.managingEditor)," created="Wed, 30 Mar 2022 13:57:16 GMT"/>
						<outline text="webMaster: getFeedMetadataString (theFeed.webMaster)," created="Wed, 30 Mar 2022 13:57:16 GMT"/>
						<outline text="twitterAccount: getTwitterScreenname (), //4/3/22 by DW" created="Sun, 03 Apr 2022 16:51:41 GMT"/>
						<outline text="docs: getFeedMetadataString (theFeed.docs)," created="Wed, 30 Mar 2022 13:57:16 GMT"/>
						<outline text="" created="Wed, 30 Mar 2022 14:02:31 GMT"/>
						<outline text="imageUrl: getFeedMetadataLink (theFeed.imageUrl), //points to the img"/>
						<outline text="imageTitle: getFeedMetadataString (theFeed.imageTitle)," created="Wed, 30 Mar 2022 13:57:16 GMT"/>
						<outline text="imageLink: getFeedMetadataLink (theFeed.imageLink),"/>
						<outline text="imageWidth: getFeedMetadataNumber (theFeed.imageWidth)," created="Wed, 30 Mar 2022 14:12:51 GMT"/>
						<outline text="imageHeight: getFeedMetadataNumber (theFeed.imageHeight)," created="Wed, 30 Mar 2022 14:12:51 GMT"/>
						<outline text="imageDescription: getFeedMetadataString (theFeed.imageDescription)" created="Wed, 30 Mar 2022 13:57:16 GMT"/>
						<outline text="};"/>
						</outline>
					<outline text="return (feedRec);" created="Fri, 27 May 2022 14:53:28 GMT"/>
					<outline text="}" created="Fri, 27 May 2022 14:52:39 GMT"/>
					</outline>
				<outline text="" created="Thu, 27 Jun 2024 13:25:58 GMT"/>
				<outline text="function addFeedIfNecessary (feedUrl, callback) { //6/27/24 by DW" created="Thu, 27 Jun 2024 13:25:58 GMT">
					<outline text="isFeedInDatabase (feedUrl, function (flInDatabase) {" created="Sat, 19 Mar 2022 16:38:28 GMT">
						<outline text="if (flInDatabase) {" created="Thu, 27 Jun 2024 13:26:38 GMT">
							<outline text="callback (undefined);" created="Thu, 27 Jun 2024 13:26:50 GMT"/>
							<outline text="}" created="Thu, 27 Jun 2024 13:26:46 GMT"/>
							</outline>
						<outline text="else {" created="Thu, 27 Jun 2024 13:26:47 GMT">
							<outline text="reallysimple.readFeed (feedUrl, function (err, theFeed) {" created="Sat, 19 Mar 2022 15:14:01 GMT">
								<outline text="if (err) {" created="Sat, 19 Mar 2022 15:15:11 GMT">
									<outline text="callback (err);" created="Sat, 19 Mar 2022 15:15:16 GMT"/>
									<outline text="}" created="Sat, 19 Mar 2022 15:15:20 GMT"/>
									</outline>
								<outline text="else {" created="Sat, 19 Mar 2022 15:15:21 GMT">
									<outline text="var feedRec = setupNewFeedRec (feedUrl, theFeed); " created="Fri, 27 May 2022 16:16:34 GMT"/>
									<outline text="saveFeed (feedRec, callback);" created="Fri, 01 Apr 2022 14:17:29 GMT"/>
									<outline text="}" created="Sat, 19 Mar 2022 15:15:23 GMT"/>
									</outline>
								<outline text="});" created="Sat, 19 Mar 2022 15:15:01 GMT"/>
								</outline>
							<outline text="}" created="Thu, 27 Jun 2024 13:26:58 GMT"/>
							</outline>
						<outline text="});" created="Sat, 19 Mar 2022 16:38:53 GMT"/>
						</outline>
					<outline text="}" created="Thu, 27 Jun 2024 13:26:12 GMT"/>
					</outline>
				<outline text="" created="Thu, 27 Jun 2024 13:25:59 GMT"/>
				<outline text="function checkFeed (feedUrl, callback) { " created="Sat, 19 Mar 2022 15:13:43 GMT">
					<outline text="Changes" isComment="true" created="Sat, 19 Mar 2022 20:51:08 GMT">
						<outline text="2/3/24; 11:04:22 AM by DW" created="Sat, 03 Feb 2024 16:04:22 GMT">
							<outline text="Now we wait for saveFeed to finish, it calls back with an updated feedRec that now has feedId set, so we can pass it back to our caller. " created="Sat, 03 Feb 2024 16:04:23 GMT"/>
							</outline>
						<outline text="10/23/23; 9:41:38 AM by DW" created="Mon, 23 Oct 2023 13:41:37 GMT">
							<outline text="It's possible for a comparison to fail when looking for a changed value, so we enclose it in a try statement. " created="Mon, 23 Oct 2023 13:41:38 GMT"/>
							</outline>
						<outline text="7/10/22; 12:15:28 PM by DW" created="Sun, 10 Jul 2022 16:15:27 GMT">
							<outline text="We no longer set feedRec.whenUpdated if something about the feed, its title, description etc, changed. " created="Sun, 10 Jul 2022 16:15:28 GMT"/>
							<outline text="We're implementing the rule that a feed updates when a new item appears. And that's it. " created="Sun, 10 Jul 2022 16:16:43 GMT"/>
							</outline>
						<outline text="7/9/22; 11:38:29 AM by DW" created="Sat, 09 Jul 2022 15:38:28 GMT">
							<outline text="We no longer update socket subscribers that the feed has changed. " created="Sat, 09 Jul 2022 15:38:29 GMT"/>
							<outline text="A change in the feed means that there was a new item in the feed. Not that the name of the feed changed or its pubdate." created="Sat, 09 Jul 2022 15:38:44 GMT"/>
							</outline>
						<outline text="7/8/22; 11:07:16 AM by DW" created="Fri, 08 Jul 2022 15:07:16 GMT">
							<outline text="Don't update the socket subscribers until the feed has been saved in the database." created="Fri, 08 Jul 2022 15:07:16 GMT"/>
							<outline text="We weren't copying the value of ctSubs! That explains why it was always zero when we were being notified of an updated feed. " created="Fri, 08 Jul 2022 15:17:27 GMT"/>
							</outline>
						<outline text="7/1/22; 11:54:05 AM by DW" created="Fri, 01 Jul 2022 15:54:04 GMT">
							<outline text="We were carefully preserving ctConsecutiveErrors even when there was no error. We should have been setting it to 0. That's why up till now ctConsecutiveErrors always equaled ctErrors. ;-)" created="Fri, 01 Jul 2022 15:54:05 GMT"/>
							<outline text="ctSecs in the feedRec wasn't being set if the feed didn't change. " created="Sat, 02 Jul 2022 01:45:54 GMT"/>
							</outline>
						<outline text="5/27/22; 12:17:21 PM by DW" created="Fri, 27 May 2022 16:17:21 GMT">
							<outline text="Factored out the code that sets up the initial feedRec so we can use it when subscribing to a feed as well as here. " created="Fri, 27 May 2022 16:17:22 GMT"/>
							</outline>
						<outline text="4/28/22; 1:07:47 PM by DW" created="Thu, 28 Apr 2022 17:07:47 GMT">
							<outline text="If there's an error reading the feed, still set whenChecked and ctChecks." created="Thu, 28 Apr 2022 17:07:48 GMT"/>
							</outline>
						<outline text="4/3/22; 12:53:15 PM by DW" created="Sun, 03 Apr 2022 16:53:15 GMT">
							<outline text="Add twitterAccount to each record." created="Sun, 03 Apr 2022 16:53:15 GMT"/>
							</outline>
						<outline text="4/2/22; 9:18:33 AM by DW" created="Sat, 02 Apr 2022 13:18:32 GMT">
							<outline text="Undid yesterday's change and then added it back. We need to return both the feed we read through the reallysimple package and the feed as read from the database (feedRec), which is what we will return through the API." created="Sat, 02 Apr 2022 13:18:41 GMT"/>
							</outline>
						<outline text="4/1/22; 5:24:15 PM by DW" created="Fri, 01 Apr 2022 21:24:15 GMT">
							<outline text="In the callback we were sending back the feed as read from reallysimple. " created="Fri, 01 Apr 2022 21:24:16 GMT"/>
							<outline text="What we really need to do is to return the feedrec as processed by convertDatabaseFeed. " created="Fri, 01 Apr 2022 21:24:35 GMT"/>
							<outline text="That the format that we always send back through the API." created="Fri, 01 Apr 2022 21:24:55 GMT"/>
							</outline>
						<outline text="3/19/22; 4:51:11 PM by DW" created="Sat, 19 Mar 2022 20:51:10 GMT">
							<outline text="the central feed reading routine." created="Sat, 19 Mar 2022 20:51:11 GMT"/>
							<outline text="reads feed, adds to database or updates the record in database if it was already there, calls back with the feed contents." created="Tue, 22 Mar 2022 16:58:54 GMT"/>
							<outline text="options struct allows you to control details. " created="Tue, 22 Mar 2022 16:58:59 GMT"/>
							</outline>
						<outline text="What this does" isComment="true" created="Sat, 02 Apr 2022 13:45:22 GMT">
							<outline text="This is a central routine." created="Sat, 02 Apr 2022 13:45:25 GMT"/>
							<outline text="We read the feed from the source and from the database." created="Sat, 02 Apr 2022 13:45:47 GMT"/>
							<outline text="If the feed isn't in the database, we update." created="Sat, 02 Apr 2022 13:46:04 GMT"/>
							<outline text="If there's a difference between the feed we read and the feed in the database, we integrate the changes and update the database." created="Sat, 02 Apr 2022 13:46:23 GMT"/>
							<outline text="The callback gets two struct as params:" created="Sat, 02 Apr 2022 13:46:49 GMT">
								<outline text="theFeed -- which is what we read from the feed through the reallysimple package" created="Sat, 02 Apr 2022 13:47:00 GMT"/>
								<outline text="feedRec -- the database record we updated." created="Sat, 02 Apr 2022 13:47:20 GMT"/>
								</outline>
							<outline text="It's only called from one place -- checkFeedAndItems." created="Sat, 02 Apr 2022 13:54:44 GMT"/>
							</outline>
						</outline>
					<outline text="function callbackWithError (message) {" created="Wed, 30 Mar 2022 14:06:33 GMT">
						<outline text="if (callback !== undefined) {" created="Tue, 22 Mar 2022 16:21:44 GMT">
							<outline text="callback ({message});" created="Sat, 19 Mar 2022 15:15:16 GMT"/>
							<outline text="}" created="Tue, 22 Mar 2022 16:21:50 GMT"/>
							</outline>
						<outline text="}" created="Wed, 30 Mar 2022 14:06:46 GMT"/>
						</outline>
					<outline text="const whenstart = new Date ();" created="Sat, 19 Mar 2022 16:01:20 GMT"/>
					<outline text="if (feedUrl === undefined) {" created="Wed, 30 Mar 2022 14:04:08 GMT">
						<outline text="callbackWithError (&quot;Can't check the feed because the URL is undefined.&quot;);" created="Wed, 30 Mar 2022 14:04:48 GMT"/>
						<outline text="return;" created="Wed, 30 Mar 2022 14:05:15 GMT"/>
						<outline text="}" created="Wed, 30 Mar 2022 14:04:42 GMT"/>
						</outline>
					<outline text="if (feedUrl.length &gt; config.maxFeedUrlLength) {" created="Wed, 30 Mar 2022 14:04:08 GMT">
						<outline text="callbackWithError (&quot;Can't check the feed because the URL is too long, max length is &quot; + config.maxFeedUrlLength + &quot;.&quot;);" created="Wed, 30 Mar 2022 14:04:48 GMT"/>
						<outline text="return;" created="Wed, 30 Mar 2022 14:05:15 GMT"/>
						<outline text="}" created="Wed, 30 Mar 2022 14:04:42 GMT"/>
						</outline>
					<outline text="" created="Thu, 25 Aug 2022 16:02:12 GMT"/>
					<outline text="if (feedUrl == &quot;http://tweetfeed.org/cluelessnewbie/rss.xml&quot;) { //8/25/22 by DW" isComment="true" created="Thu, 14 Jul 2022 13:13:42 GMT">
						<outline text="console.log (&quot;set breakpoint here.&quot;);" created="Thu, 14 Jul 2022 13:13:53 GMT"/>
						<outline text="}" created="Thu, 14 Jul 2022 13:14:03 GMT"/>
						</outline>
					<outline text="" isComment="true" created="Thu, 25 Aug 2022 16:02:13 GMT"/>
					<outline text="reallysimple.readFeed (feedUrl, function (err, theFeed) {" created="Sat, 19 Mar 2022 15:14:01 GMT">
						<outline text="if (err) {" created="Sat, 19 Mar 2022 15:15:11 GMT">
							<outline text="if (callback !== undefined) {" created="Tue, 22 Mar 2022 16:21:44 GMT">
								<outline text="recordFeedError (feedUrl, err); //4/28/22 by DW" created="Thu, 28 Apr 2022 17:04:35 GMT"/>
								<outline text="callback (err);" created="Sat, 19 Mar 2022 15:15:16 GMT"/>
								<outline text="}" created="Tue, 22 Mar 2022 16:21:50 GMT"/>
								</outline>
							<outline text="}" created="Sat, 19 Mar 2022 15:15:20 GMT"/>
							</outline>
						<outline text="else {" created="Sat, 19 Mar 2022 15:15:21 GMT">
							<outline text="var feedRec = setupNewFeedRec (feedUrl, theFeed); //5/27/22 by DW" created="Fri, 27 May 2022 16:16:34 GMT"/>
							<outline text="isFeedInDatabase (feedUrl, function (flInDatabase, feedRec2) {" created="Sat, 19 Mar 2022 16:38:28 GMT">
								<outline text="var flChanged = !flInDatabase;" created="Sun, 20 Mar 2022 17:05:37 GMT"/>
								<outline text="if (flInDatabase) { " created="Sat, 19 Mar 2022 16:39:44 GMT">
									<outline text="feedRec.whenCreated = feedRec2.whenCreated;" created="Sat, 19 Mar 2022 16:40:05 GMT"/>
									<outline text="feedRec.whenUpdated = feedRec2.whenUpdated;" created="Sat, 19 Mar 2022 16:40:05 GMT"/>
									<outline text="feedRec.ctErrors = feedRec2.ctErrors;" created="Sat, 19 Mar 2022 16:40:05 GMT"/>
									<outline text="feedRec.ctConsecutiveErrors = 0; //7/1/22 by DW" created="Sat, 19 Mar 2022 16:40:05 GMT"/>
									<outline text="feedRec.errorString = feedRec2.errorString;" created="Sat, 19 Mar 2022 16:40:05 GMT"/>
									<outline text="feedRec.whenChecked = new Date (); //4/3/22 by DW" isComment="true" created="Sun, 03 Apr 2022 14:56:44 GMT"/>
									<outline text="feedRec.ctChecks = feedRec2.ctChecks;" created="Sat, 19 Mar 2022 16:40:05 GMT"/>
									<outline text="feedRec.whenLastError = feedRec2.whenLastError;" created="Sat, 19 Mar 2022 16:40:05 GMT"/>
									<outline text="feedRec.whenLastCloudRenew = feedRec2.whenLastCloudRenew;" created="Sat, 19 Mar 2022 16:40:05 GMT"/>
									<outline text="feedRec.ctCloudRenews = feedRec2.ctCloudRenews;" created="Sat, 19 Mar 2022 16:40:05 GMT"/>
									<outline text="feedRec.ctSubs = feedRec2.ctSubs; //7/8/22 by DW" created="Sat, 19 Mar 2022 16:40:05 GMT"/>
									<outline text="feedRec.ctItems = feedRec2.ctItems; //7/10/22 by DW" created="Sat, 19 Mar 2022 16:40:05 GMT"/>
									<outline text="feedRec.whoFirstSubscribed = feedRec2.whoFirstSubscribed; //7/20/22 by DW" created="Sat, 19 Mar 2022 16:40:05 GMT"/>
									<outline text="" created="Fri, 01 Apr 2022 14:12:39 GMT"/>
									<outline text="function checkChange (name, flDateType=false) {" created="Sun, 20 Mar 2022 17:05:44 GMT">
										<outline text="if (flDateType) {" created="Sun, 20 Mar 2022 17:15:19 GMT">
											<outline text="function convert (d) {" created="Sun, 20 Mar 2022 17:16:33 GMT">
												<outline text="return (new Date (d).toUTCString ());" created="Sun, 20 Mar 2022 17:16:46 GMT"/>
												<outline text="}" created="Sun, 20 Mar 2022 17:16:56 GMT"/>
												</outline>
											<outline text="if (convert (feedRec [name]) != convert (feedRec2 [name])) {" created="Sun, 20 Mar 2022 17:06:12 GMT">
												<outline text="console.log (name + &quot; changed.&quot;);" isComment="true" created="Sun, 20 Mar 2022 17:13:54 GMT"/>
												<outline text="flChanged = true;" created="Sun, 20 Mar 2022 17:05:37 GMT"/>
												<outline text="}" created="Sun, 20 Mar 2022 17:06:39 GMT"/>
												</outline>
											<outline text="}" created="Sun, 20 Mar 2022 17:15:23 GMT"/>
											</outline>
										<outline text="else {" created="Sun, 20 Mar 2022 17:15:24 GMT">
											<outline text="try { //10/23/23 by DW" created="Mon, 23 Oct 2023 13:40:58 GMT">
												<outline text="if (feedRec [name] != feedRec2 [name]) {" created="Sun, 20 Mar 2022 17:06:12 GMT">
													<outline text="console.log (name + &quot; changed.&quot;);" isComment="true" created="Sun, 20 Mar 2022 17:13:54 GMT"/>
													<outline text="flChanged = true;" created="Sun, 20 Mar 2022 17:05:37 GMT"/>
													<outline text="}" created="Sun, 20 Mar 2022 17:06:39 GMT"/>
													</outline>
												<outline text="}" created="Mon, 23 Oct 2023 13:41:02 GMT"/>
												</outline>
											<outline text="catch (err) {" created="Mon, 23 Oct 2023 13:41:03 GMT">
												<outline text="}" created="Mon, 23 Oct 2023 13:41:07 GMT"/>
												</outline>
											<outline text="}" created="Sun, 20 Mar 2022 17:15:27 GMT"/>
											</outline>
										<outline text="}" created="Sun, 20 Mar 2022 17:06:07 GMT"/>
										</outline>
									<outline text="checkChange (&quot;title&quot;);" created="Fri, 01 Apr 2022 14:07:53 GMT"/>
									<outline text="checkChange (&quot;htmlUrl&quot;);" created="Fri, 01 Apr 2022 14:07:59 GMT"/>
									<outline text="checkChange (&quot;description&quot;);" created="Fri, 01 Apr 2022 14:08:03 GMT"/>
									<outline text="checkChange (&quot;pubDate&quot;, true);" created="Fri, 01 Apr 2022 14:08:06 GMT"/>
									<outline text="checkChange (&quot;urlCloudServer&quot;);" created="Fri, 01 Apr 2022 14:08:09 GMT"/>
									<outline text="checkChange (&quot;copyright&quot;);"/>
									<outline text="checkChange (&quot;generator&quot;);"/>
									<outline text="checkChange (&quot;language&quot;);"/>
									<outline text="checkChange (&quot;managingEditor&quot;);"/>
									<outline text="checkChange (&quot;webMaster&quot;);"/>
									<outline text="checkChange (&quot;docs&quot;);"/>
									<outline text="checkChange (&quot;imageUrl&quot;);"/>
									<outline text="checkChange (&quot;imageTitle&quot;);"/>
									<outline text="checkChange (&quot;imageLink&quot;);"/>
									<outline text="checkChange (&quot;imageWidth&quot;);"/>
									<outline text="checkChange (&quot;imageHeight&quot;);"/>
									<outline text="checkChange (&quot;imageDescription&quot;);"/>
									<outline text="}" created="Sat, 19 Mar 2022 16:39:48 GMT"/>
									</outline>
								<outline text="if (flChanged) { //7/10/22 by DW" isComment="true" created="Fri, 01 Apr 2022 14:15:41 GMT">
									<outline text="feedRec.whenUpdated = whenstart; " created="Sun, 03 Apr 2022 14:56:44 GMT"/>
									<outline text="}" created="Fri, 01 Apr 2022 14:15:44 GMT"/>
									</outline>
								<outline text="feedRec.whenChecked = whenstart;" created="Sun, 03 Apr 2022 14:56:44 GMT"/>
								<outline text="feedRec.ctChecks++;" created="Sat, 19 Mar 2022 16:40:05 GMT"/>
								<outline text="saveFeed (feedRec, function (err, feedRec) { //2/3/24 by DW" created="Fri, 01 Apr 2022 14:17:29 GMT">
									<outline text="if (callback !== undefined) {" created="Tue, 22 Mar 2022 16:21:44 GMT">
										<outline text="if (err) {" created="Sat, 03 Feb 2024 16:05:38 GMT">
											<outline text="callback (err);" created="Sat, 03 Feb 2024 16:05:48 GMT"/>
											<outline text="}" created="Sat, 03 Feb 2024 16:05:51 GMT"/>
											</outline>
										<outline text="else {" created="Sat, 03 Feb 2024 16:05:52 GMT">
											<outline text="callback (undefined, theFeed, feedRec);" created="Tue, 22 Mar 2022 16:21:35 GMT"/>
											<outline text="}" created="Sat, 03 Feb 2024 16:05:54 GMT"/>
											</outline>
										<outline text="}" created="Tue, 22 Mar 2022 16:21:50 GMT"/>
										</outline>
									<outline text="});" created="Sat, 03 Feb 2024 16:05:29 GMT"/>
									</outline>
								<outline text="});" created="Sat, 19 Mar 2022 16:38:53 GMT"/>
								</outline>
							<outline text="}" created="Sat, 19 Mar 2022 15:15:23 GMT"/>
							</outline>
						<outline text="});" created="Sat, 19 Mar 2022 15:15:01 GMT"/>
						</outline>
					<outline text="}" created="Sat, 19 Mar 2022 15:14:00 GMT"/>
					</outline>
				<outline text="function logNewitem (itemRec) { //5/23/22 by DW" created="Mon, 23 May 2022 16:51:16 GMT">
					<outline text="Changes" isComment="true" created="Sat, 28 May 2022 16:06:48 GMT">
						<outline text="5/28/22; 12:06:51 PM by DW" created="Sat, 28 May 2022 16:06:50 GMT">
							<outline text="This is what appears in the console when a new item is processed. " created="Sat, 28 May 2022 16:06:51 GMT"/>
							</outline>
						</outline>
					<outline text="var now = new Date ();" created="Mon, 23 May 2022 16:51:28 GMT"/>
					<outline text="var nowstring = now.toLocaleTimeString([], {hour: '2-digit', minute: '2-digit'});" created="Tue, 24 May 2022 16:37:58 GMT"/>
					<outline text="nowstring = utils.replaceAll  (nowstring, &quot; &quot;, &quot;&quot;);" created="Tue, 24 May 2022 16:38:25 GMT"/>
					<outline text="var textstring = (itemRec.title === undefined) ? utils.maxStringLength (utils.stripMarkup (itemRec.description), 50) : itemRec.title;" created="Tue, 24 May 2022 17:37:06 GMT"/>
					<outline text="console.log (nowstring + &quot;: &quot; + textstring);" created="Mon, 23 May 2022 16:51:28 GMT"/>
					<outline text="console.log (nowstring + &quot;: &quot; + textstring + &quot; #&quot; + itemRec.id);" isComment="true" created="Mon, 23 May 2022 16:51:28 GMT"/>
					<outline text="}" created="Mon, 23 May 2022 16:51:25 GMT"/>
					</outline>
				<outline text="function checkFeedItems (feedRec, itemsArray, flNewFeed, callback) {" created="Fri, 27 May 2022 15:07:19 GMT">
					<outline text="Changes" isComment="true" created="Sat, 09 Jul 2022 15:28:18 GMT">
						<outline text="8/22/22; 9:25:46 AM by DW" created="Mon, 22 Aug 2022 13:25:45 GMT">
							<outline text="After we notify clients that a feed has updated, we tell the river cache about it. " created="Mon, 22 Aug 2022 13:25:46 GMT"/>
							</outline>
						<outline text="7/13/22; 12:43:45 PM by DW" created="Wed, 13 Jul 2022 16:43:44 GMT">
							<outline text="When we notify the clients of a new item, we weren't including the itemId because we were notifying them before the id was set. " created="Wed, 13 Jul 2022 16:43:45 GMT"/>
							</outline>
						<outline text="7/9/22; 11:28:22 AM by DW" created="Sat, 09 Jul 2022 15:28:20 GMT">
							<outline text="This is where we notify socket subscribers that a feed has changed, ie there are one or more new items." created="Sat, 09 Jul 2022 15:28:23 GMT"/>
							</outline>
						</outline>
					<outline text="const feedUrl = feedRec.feedUrl;" created="Fri, 27 May 2022 16:41:39 GMT"/>
					<outline text="const feedId = feedRec.feedId; //2/3/24 by DW" created="Fri, 27 May 2022 16:41:39 GMT"/>
					<outline text="const whenstart = new Date ();" created="Fri, 27 May 2022 15:55:57 GMT"/>
					<outline text="var ctNewItems = 0;" created="Sat, 09 Jul 2022 15:40:12 GMT"/>
					<outline text="" created="Sat, 09 Jul 2022 15:28:00 GMT"/>
					<outline text="function checkOneItem (item, callback) {" created="Fri, 27 May 2022 15:09:34 GMT">
						<outline text="Changes" isComment="true" created="Sun, 10 Jul 2022 16:21:29 GMT">
							<outline text="8/25/22; 12:48:35 PM by DW" created="Thu, 25 Aug 2022 16:48:35 GMT">
								<outline text="We were checking for item.markdowntext, but reallySimple wasn't generating this. Now we are, and it's called markdown, not markdowntext. So I fixed it. " created="Thu, 25 Aug 2022 16:48:35 GMT"/>
								</outline>
							<outline text="7/10/22; 12:21:31 PM by DW" created="Sun, 10 Jul 2022 16:21:31 GMT">
								<outline text="A feed is said to have updated if a new item appears in the feed. That's implemented here, we set the whenUpdated field of a feed if there's a new item, that way when you reload your feed list a feed won't move to the top just because it changed something like its title or description. " created="Sun, 10 Jul 2022 16:21:32 GMT"/>
								</outline>
							</outline>
						<outline text="const whenstart = new Date ();" created="Sun, 10 Jul 2022 16:23:53 GMT"/>
						<outline text="var guid = getItemGuid (item);"/>
						<outline text="var outlineJsontext = undefined, markdowntext = undefined;" created="Sun, 20 Mar 2022 16:48:34 GMT"/>
						<outline text="var enclosureUrl = undefined, enclosureType = undefined, enclosureLength = undefined;" created="Sun, 20 Mar 2022 15:37:54 GMT"/>
						<outline text="if (item.enclosure !== undefined) {" created="Sun, 20 Mar 2022 16:47:01 GMT">
							<outline text="enclosureUrl = item.enclosure.url;" created="Sun, 20 Mar 2022 15:54:12 GMT"/>
							<outline text="enclosureType = item.enclosure.type;" created="Sun, 20 Mar 2022 15:54:12 GMT"/>
							<outline text="enclosureLength = item.enclosure.length;" created="Sun, 20 Mar 2022 15:54:12 GMT"/>
							<outline text="}" created="Sun, 20 Mar 2022 16:47:26 GMT"/>
							</outline>
						<outline text="if (item.outline !== undefined) {" created="Sun, 20 Mar 2022 15:36:22 GMT">
							<outline text="outlineJsontext = utils.jsonStringify (item.outline);" created="Sun, 20 Mar 2022 15:36:49 GMT"/>
							<outline text="}" created="Sun, 20 Mar 2022 15:36:31 GMT"/>
							</outline>
						<outline text="if (item.markdowntext !== undefined) { //8/25/22 by DW" created="Sun, 20 Mar 2022 15:36:22 GMT">
							<outline text="markdowntext = item.markdowntext;" created="Sun, 20 Mar 2022 15:36:49 GMT"/>
							<outline text="}" created="Sun, 20 Mar 2022 15:36:31 GMT"/>
							</outline>
						<outline text="var itemRec = {" created="Sun, 20 Mar 2022 15:17:03 GMT">
							<outline text="feedUrl," created="Sun, 20 Mar 2022 15:17:25 GMT"/>
							<outline text="feedId, //2/3/24 by DW" created="Sat, 03 Feb 2024 16:20:20 GMT"/>
							<outline text="guid," created="Sun, 20 Mar 2022 15:17:27 GMT"/>
							<outline text="title: item.title," created="Sun, 20 Mar 2022 16:53:25 GMT"/>
							<outline text="link: item.link," created="Sun, 20 Mar 2022 15:20:55 GMT"/>
							<outline text="description: getItemDescription (item)," created="Sun, 20 Mar 2022 15:21:09 GMT"/>
							<outline text="pubDate: getItemPubdate (item.pubDate), //8/26/22 by DW" created="Sun, 20 Mar 2022 15:21:09 GMT"/>
							<outline text="enclosureUrl, "/>
							<outline text="enclosureType, "/>
							<outline text="enclosureLength, "/>
							<outline text="id: undefined, //will be defined when saving" created="Mon, 21 Mar 2022 14:44:51 GMT"/>
							<outline text="whenCreated: whenstart," created="Sun, 20 Mar 2022 15:21:21 GMT"/>
							<outline text="whenUpdated: whenstart," created="Sun, 20 Mar 2022 15:35:32 GMT"/>
							<outline text="flDeleted: false," created="Sun, 20 Mar 2022 15:35:45 GMT"/>
							<outline text="outlineJsontext," created="Sun, 20 Mar 2022 15:35:54 GMT"/>
							<outline text="markdowntext //8/25/22 by DW" created="Thu, 05 May 2022 15:11:47 GMT"/>
							<outline text="};" created="Sun, 20 Mar 2022 15:17:16 GMT"/>
							</outline>
						<outline text="isItemInDatabase (feedUrl, guid, function (flThere, dbItem) {" created="Sun, 20 Mar 2022 15:15:05 GMT">
							<outline text="var flChanged = !flThere;" created="Sun, 20 Mar 2022 17:05:37 GMT"/>
							<outline text="if (flThere) {" created="Sun, 20 Mar 2022 15:17:02 GMT">
								<outline text="function checkChange (name, flDateType=false) {" created="Sun, 20 Mar 2022 17:05:44 GMT">
									<outline text="if (flDateType) {" created="Sun, 20 Mar 2022 17:15:19 GMT">
										<outline text="function convert (d) {" created="Sun, 20 Mar 2022 17:16:33 GMT">
											<outline text="return (new Date (d).toUTCString ());" created="Sun, 20 Mar 2022 17:16:46 GMT"/>
											<outline text="}" created="Sun, 20 Mar 2022 17:16:56 GMT"/>
											</outline>
										<outline text="if (convert (itemRec [name]) != convert (dbItem [name])) {" created="Sun, 20 Mar 2022 17:06:12 GMT">
											<outline text="console.log (name + &quot; changed.&quot;);" isComment="true" created="Sun, 20 Mar 2022 17:13:54 GMT"/>
											<outline text="flChanged = true;" created="Sun, 20 Mar 2022 17:05:37 GMT"/>
											<outline text="}" created="Sun, 20 Mar 2022 17:06:39 GMT"/>
											</outline>
										<outline text="}" created="Sun, 20 Mar 2022 17:15:23 GMT"/>
										</outline>
									<outline text="else {" created="Sun, 20 Mar 2022 17:15:24 GMT">
										<outline text="if (itemRec [name] != dbItem [name]) {" created="Sun, 20 Mar 2022 17:06:12 GMT">
											<outline text="console.log (name + &quot; changed.&quot;);" isComment="true" created="Sun, 20 Mar 2022 17:13:54 GMT"/>
											<outline text="flChanged = true;" created="Sun, 20 Mar 2022 17:05:37 GMT"/>
											<outline text="}" created="Sun, 20 Mar 2022 17:06:39 GMT"/>
											</outline>
										<outline text="}" created="Sun, 20 Mar 2022 17:15:27 GMT"/>
										</outline>
									<outline text="}" created="Sun, 20 Mar 2022 17:06:07 GMT"/>
									</outline>
								<outline text="checkChange (&quot;title&quot;);" created="Sun, 20 Mar 2022 17:07:54 GMT"/>
								<outline text="checkChange (&quot;link&quot;);" created="Sun, 20 Mar 2022 17:07:54 GMT"/>
								<outline text="checkChange (&quot;description&quot;);" created="Sun, 20 Mar 2022 17:07:54 GMT"/>
								<outline text="checkChange (&quot;pubDate&quot;, true);" created="Sun, 20 Mar 2022 17:07:54 GMT"/>
								<outline text="checkChange (&quot;enclosureUrl&quot;);" created="Sun, 20 Mar 2022 17:07:54 GMT"/>
								<outline text="checkChange (&quot;enclosureLength&quot;);" created="Sun, 20 Mar 2022 17:07:54 GMT"/>
								<outline text="checkChange (&quot;flDeleted&quot;); //4/22/22 by DW" created="Sun, 20 Mar 2022 17:07:54 GMT"/>
								<outline text="checkChange (&quot;outlineJsontext&quot;); //6/6/25 by DW" created="Sun, 20 Mar 2022 17:07:54 GMT"/>
								<outline text="itemRec.id = dbItem.id; //must preserve this value" created="Sun, 20 Mar 2022 17:11:38 GMT"/>
								<outline text="itemRec.whenCreated = dbItem.whenCreated; //must preserve this value" created="Sun, 20 Mar 2022 17:11:38 GMT"/>
								<outline text="}" created="Sun, 20 Mar 2022 16:29:47 GMT"/>
								</outline>
							<outline text="if (flChanged) {" created="Sun, 20 Mar 2022 17:10:57 GMT">
								<outline text="saveItem (itemRec, function (err) {" created="Sun, 20 Mar 2022 16:30:31 GMT">
									<outline text="if (!flThere) {" created="Tue, 24 May 2022 16:40:41 GMT">
										<outline text="logNewitem (itemRec);" created="Mon, 23 May 2022 16:50:23 GMT"/>
										<outline text="ctNewItems++;  //7/9/22 by DW" created="Sat, 09 Jul 2022 15:30:14 GMT"/>
										<outline text="}" created="Tue, 24 May 2022 16:40:51 GMT"/>
										</outline>
									<outline text="if (!flNewFeed) { //5/17/22 by DW &amp; 7/13/22 by DW" created="Tue, 17 May 2022 22:49:23 GMT">
										<outline text="const verb = ((flThere) ? &quot;updated&quot; : &quot;new&quot;) + &quot;Item&quot;;" created="Sun, 20 Mar 2022 23:18:53 GMT"/>
										<outline text="var jstruct = {" created="Thu, 24 Mar 2022 16:19:01 GMT">
											<outline text="item: convertDatabaseItem (itemRec)," created="Thu, 24 Mar 2022 16:19:22 GMT"/>
											<outline text="theFeed: convertDatabaseFeed (feedRec)" created="Thu, 24 Mar 2022 16:19:28 GMT"/>
											<outline text="}" created="Thu, 24 Mar 2022 16:19:15 GMT"/>
											</outline>
										<outline text="updateSocketSubscribers (verb, jstruct);" created="Sun, 20 Mar 2022 22:49:29 GMT"/>
										<outline text="}" created="Tue, 17 May 2022 22:49:27 GMT"/>
										</outline>
									<outline text="callback ();" created="Fri, 27 May 2022 15:15:26 GMT"/>
									<outline text="});" created="Tue, 24 May 2022 16:42:01 GMT"/>
									</outline>
								<outline text="}" created="Sun, 20 Mar 2022 17:11:00 GMT"/>
								</outline>
							<outline text="else {" created="Fri, 27 May 2022 15:16:17 GMT">
								<outline text="callback ();" created="Fri, 27 May 2022 15:16:19 GMT"/>
								<outline text="}" created="Fri, 27 May 2022 15:16:24 GMT"/>
								</outline>
							<outline text="});" created="Sun, 20 Mar 2022 15:16:04 GMT"/>
							</outline>
						<outline text="}" created="Fri, 27 May 2022 15:09:43 GMT"/>
						</outline>
					<outline text="function checkNextItem (ix) {" created="Fri, 27 May 2022 15:07:53 GMT">
						<outline text="if (ix &gt;= itemsArray.length) { //we're done checking" created="Fri, 27 May 2022 15:08:16 GMT">
							<outline text="if (ctNewItems &gt; 0) {" created="Sat, 09 Jul 2022 15:39:54 GMT">
								<outline text="feedRec.whenUpdated = whenstart;  //7/10/22 by DW" created="Sun, 03 Apr 2022 14:56:44 GMT"/>
								<outline text="updateSocketSubscribers (&quot;updatedFeed&quot;, convertDatabaseFeed (feedRec));" created="Sun, 20 Mar 2022 22:49:29 GMT"/>
								<outline text="if (!config.flUseSqlForSockets) { //10/4/23 by DW" created="Wed, 04 Oct 2023 16:05:27 GMT">
									<outline text="clearCachedRivers (feedUrl); //8/22/22 by DW" created="Mon, 22 Aug 2022 12:56:23 GMT"/>
									<outline text="}" created="Wed, 04 Oct 2023 16:06:05 GMT"/>
									</outline>
								<outline text="saveFeed (feedRec, function () {  //7/10/22 by DW" created="Fri, 01 Apr 2022 14:17:29 GMT">
									<outline text="console.log (&quot;checkFeedItems: feedRec.whenUpdated == &quot; + feedRec.whenUpdated.toLocaleTimeString ());" isComment="true" created="Sun, 10 Jul 2022 17:29:45 GMT"/>
									<outline text="callback (undefined);" created="Fri, 27 May 2022 15:08:37 GMT"/>
									<outline text="});" created="Sun, 10 Jul 2022 17:29:07 GMT"/>
									</outline>
								<outline text="}" created="Sat, 09 Jul 2022 15:40:01 GMT"/>
								</outline>
							<outline text="else {" created="Sun, 10 Jul 2022 17:28:53 GMT">
								<outline text="callback (undefined);" created="Fri, 27 May 2022 15:08:37 GMT"/>
								<outline text="}" created="Sun, 10 Jul 2022 17:28:55 GMT"/>
								</outline>
							<outline text="}" created="Fri, 27 May 2022 15:08:31 GMT"/>
							</outline>
						<outline text="else {" created="Fri, 27 May 2022 15:08:32 GMT">
							<outline text="checkOneItem (itemsArray [ix], function () {" created="Fri, 27 May 2022 15:17:02 GMT">
								<outline text="checkNextItem (ix + 1);" created="Fri, 27 May 2022 15:17:33 GMT"/>
								<outline text="});" created="Fri, 27 May 2022 15:17:22 GMT"/>
								</outline>
							<outline text="}" created="Fri, 27 May 2022 15:08:34 GMT"/>
							</outline>
						<outline text="}" created="Fri, 27 May 2022 15:08:02 GMT"/>
						</outline>
					<outline text="checkNextItem (0);" created="Fri, 27 May 2022 15:08:03 GMT"/>
					<outline text="}" created="Fri, 27 May 2022 15:07:43 GMT"/>
					</outline>
				<outline text="function checkFeedAndItems (feedUrl, callback, flNewFeed=false) {" created="Sat, 19 Mar 2022 20:39:23 GMT">
					<outline text="Changes" isComment="true" created="Sat, 19 Mar 2022 20:56:35 GMT">
						<outline text="5/27/22; 12:22:19 PM by DW" created="Fri, 27 May 2022 16:22:18 GMT">
							<outline text="Factored out the part where we check the feed items. We need to call it when adding a new feed, and also it was implemented asynchronously when it's safer to make it synchronous. " created="Fri, 27 May 2022 16:22:19 GMT"/>
							</outline>
						<outline text="5/17/22; 6:48:17 PM by DW" created="Tue, 17 May 2022 22:48:17 GMT">
							<outline text="New optional param, flNewFeed. If true, we don't send notification of new items to clients. " created="Tue, 17 May 2022 22:48:18 GMT"/>
							</outline>
						<outline text="5/7/22; 11:19:53 AM by DW" created="Sat, 07 May 2022 15:19:53 GMT">
							<outline text="When checking for changes, only look at values that come from the feed, not internal values." created="Sat, 07 May 2022 15:19:54 GMT"/>
							<outline text="I wasn't thinking clearly when I added a check for a change in ctLikes. The feed has no concept of likes, so the value will always appear to change!" created="Sat, 07 May 2022 15:20:08 GMT"/>
							<outline text="Took the check out." created="Sat, 07 May 2022 15:20:38 GMT"/>
							</outline>
						<outline text="4/28/22; 12:44:42 PM by DW" created="Thu, 28 Apr 2022 16:44:41 GMT">
							<outline text="Depend on saveItem to set the id if it's not defined. " created="Thu, 28 Apr 2022 16:44:42 GMT"/>
							</outline>
						<outline text="3/24/22; 12:19:58 PM by DW" created="Thu, 24 Mar 2022 16:19:57 GMT">
							<outline text="When updating over the WS connection, include the metadata about the feed as part of the package." created="Thu, 24 Mar 2022 16:19:58 GMT"/>
							</outline>
						<outline text="3/19/22; 4:56:38 PM by DW" created="Sat, 19 Mar 2022 20:56:37 GMT">
							<outline text="Check the feed, look through all the items, if there are any new ones, add them to the items table. Also record changes in title, description, etc." created="Sat, 19 Mar 2022 20:56:39 GMT"/>
							<outline text="fields of item that are going away" created="Sun, 20 Mar 2022 15:24:32 GMT">
								<outline text="permaLink -- guid returned by reallySimple is a permalink." created="Sun, 20 Mar 2022 15:24:40 GMT"/>
								<outline text="fullDescription" created="Sun, 20 Mar 2022 15:29:11 GMT"/>
								</outline>
							</outline>
						</outline>
					<outline text="const whenstart = new Date ();"/>
					<outline text="console.log (&quot;checkFeedAndItems at &quot; + new Date ().toLocaleTimeString () + &quot;: feedUrl == &quot; + feedUrl);" isComment="true" created="Tue, 22 Mar 2022 15:16:31 GMT"/>
					<outline text="checkFeed (feedUrl, function (err, theFeed, feedRec) {" created="Sat, 19 Mar 2022 16:38:28 GMT">
						<outline text="if (err) {" created="Sat, 19 Mar 2022 20:52:14 GMT">
							<outline text="if (callback !== undefined) {" created="Sat, 19 Mar 2022 20:52:19 GMT">
								<outline text="callback (err);" created="Sat, 19 Mar 2022 20:52:36 GMT"/>
								<outline text="}" created="Sat, 19 Mar 2022 20:52:28 GMT"/>
								</outline>
							<outline text="}" created="Sat, 19 Mar 2022 20:52:29 GMT"/>
							</outline>
						<outline text="else {" created="Sat, 19 Mar 2022 20:52:42 GMT">
							<outline text="checkFeedItems (feedRec, theFeed.items, false, function (err) { //5/27/22 by DW" created="Fri, 27 May 2022 16:19:25 GMT">
								<outline text="if (callback !== undefined) {" created="Sat, 19 Mar 2022 20:52:19 GMT">
									<outline text="callback (undefined, theFeed, feedRec); " created="Sat, 19 Mar 2022 20:52:36 GMT"/>
									<outline text="}" created="Sat, 19 Mar 2022 20:52:28 GMT"/>
									</outline>
								<outline text="});" created="Fri, 27 May 2022 16:20:02 GMT"/>
								</outline>
							<outline text="}" created="Sat, 19 Mar 2022 20:52:43 GMT"/>
							</outline>
						<outline text="});" created="Sat, 19 Mar 2022 16:38:53 GMT"/>
						</outline>
					<outline text="}" created="Sat, 19 Mar 2022 20:39:42 GMT"/>
					</outline>
				<outline text="function checkOneFeed (feedUrl, callback) {" created="Sun, 03 Apr 2022 15:07:43 GMT">
					<outline text="Changes" isComment="true" created="Fri, 18 Aug 2023 16:21:08 GMT">
						<outline text="3/17/24; 10:46:39 AM by DW" created="Sun, 17 Mar 2024 14:46:39 GMT">
							<outline text="Changed the console.log call so it also reports seconds it took to check." created="Sun, 17 Mar 2024 14:46:40 GMT"/>
							</outline>
						<outline text="8/18/23; 12:21:11 PM by DW" created="Fri, 18 Aug 2023 16:21:10 GMT">
							<outline text="Added console.log call, was there, commented out previously." created="Fri, 18 Aug 2023 16:21:12 GMT"/>
							</outline>
						</outline>
					<outline text="const whenstart = new Date ();" created="Sun, 17 Mar 2024 14:49:28 GMT"/>
					<outline text="checkFeedAndItems (feedUrl, function (err, theFeed, feedRec) {" created="Tue, 22 Mar 2022 15:11:43 GMT">
						<outline text="if (err) {" created="Sun, 03 Apr 2022 15:06:18 GMT">
							<outline text="if (config.flLogCheckFeed) { //3/17/24 by DW" created="Sun, 17 Mar 2024 14:47:42 GMT">
								<outline text="myConsoleLog (&quot;checkOneFeed: feedUrl == &quot; + feedUrl + &quot;, err.message == &quot; + err.message);" created="Tue, 22 Mar 2022 15:16:31 GMT"/>
								<outline text="}" created="Sun, 17 Mar 2024 14:47:47 GMT"/>
								</outline>
							<outline text="if (callback !== undefined) {" created="Sun, 03 Apr 2022 15:10:18 GMT">
								<outline text="callback (err);" created="Sun, 03 Apr 2022 15:06:46 GMT"/>
								<outline text="}" created="Sun, 03 Apr 2022 15:10:24 GMT"/>
								</outline>
							<outline text="}" created="Sun, 03 Apr 2022 15:06:35 GMT"/>
							</outline>
						<outline text="else {" created="Sun, 03 Apr 2022 15:06:35 GMT">
							<outline text="if (config.flLogCheckFeed) { //3/17/24 by DW" created="Sun, 17 Mar 2024 14:47:42 GMT">
								<outline text="myConsoleLog (&quot;checkOneFeed: &quot; + utils.secondsSince (whenstart) + &quot; secs, feedUrl == &quot; + feedUrl);" created="Tue, 22 Mar 2022 15:16:31 GMT"/>
								<outline text="}" created="Sun, 17 Mar 2024 14:47:47 GMT"/>
								</outline>
							<outline text="if (callback !== undefined) {" created="Sun, 03 Apr 2022 15:10:18 GMT">
								<outline text="callback (undefined, convertDatabaseFeed (feedRec));" created="Sun, 03 Apr 2022 15:06:58 GMT"/>
								<outline text="}" created="Sun, 03 Apr 2022 15:10:24 GMT"/>
								</outline>
							<outline text="}" created="Sun, 03 Apr 2022 15:06:38 GMT"/>
							</outline>
						<outline text="});" created="Tue, 22 Mar 2022 15:12:09 GMT"/>
						</outline>
					<outline text="}" created="Sun, 03 Apr 2022 15:08:04 GMT"/>
					</outline>
				<outline text="function subsCountFixer () { //8/29/22 by DW" created="Mon, 29 Aug 2022 15:14:22 GMT">
					<outline text="Changes" isComment="true" created="Mon, 29 Aug 2022 15:14:34 GMT">
						<outline text="8/29/22; 11:14:39 AM by DW" created="Mon, 29 Aug 2022 15:14:38 GMT">
							<outline text="Look for a feed that hasn't been checked in a whilte, with zero subs, and make sure it's correct. " created="Mon, 29 Aug 2022 15:14:40 GMT"/>
							</outline>
						</outline>
					<outline text="const sqltext = &quot;select * from feeds where ctSubs = 0 order by whenChecked asc limit 1;&quot;; " created="Sat, 02 Jul 2022 17:18:00 GMT"/>
					<outline text="davesql.runSqltext (sqltext, function (err, result) {">
						<outline text="if (!err) {">
							<outline text="if (result.length &gt; 0) {">
								<outline text="var feedRec = result [0];" created="Mon, 29 Aug 2022 15:20:01 GMT"/>
								<outline text="countSubsForFeed (feedRec.feedUrl, function (err, ctSubs) {" created="Mon, 29 Aug 2022 15:41:59 GMT">
									<outline text="if (ctSubs &gt; 0) {" created="Mon, 29 Aug 2022 19:49:59 GMT">
										<outline text="feedRec.whenChecked = new Date ();" created="Mon, 29 Aug 2022 14:43:20 GMT"/>
										<outline text="feedRec.ctChecks++;" created="Thu, 28 Apr 2022 17:06:19 GMT"/>
										<outline text="feedRec.ctSubs = ctSubs;" created="Mon, 29 Aug 2022 14:46:35 GMT"/>
										<outline text="console.log (&quot;subsCountFixer: feedRec.feedUrl == &quot; + feedRec.feedUrl + &quot;, feedRec.ctSubs == &quot; + feedRec.ctSubs);" created="Mon, 29 Aug 2022 15:46:18 GMT"/>
										<outline text="saveFeed (feedRec);" created="Mon, 29 Aug 2022 14:43:28 GMT"/>
										<outline text="}" created="Mon, 29 Aug 2022 19:50:04 GMT"/>
										</outline>
									<outline text="});" created="Mon, 29 Aug 2022 15:42:22 GMT"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}" created="Mon, 29 Aug 2022 15:14:31 GMT"/>
					</outline>
				<outline text="function findLeastRecentlyCheckedFeed (callback) { ">
					<outline text="Changes" isComment="true">
						<outline text="9/2/22; 9:14:00 AM by DW" created="Fri, 02 Sep 2022 13:14:00 GMT">
							<outline text="More shuffling. Once in every 7 checks, we go for a random feed, regardless of when it was last checked." created="Fri, 02 Sep 2022 13:14:01 GMT">
								<outline text="select * from feeds order by rand () limit 1;" created="Fri, 02 Sep 2022 13:14:08 GMT"/>
								</outline>
							</outline>
						<outline text="9/1/22; 2:37:09 PM by DW" created="Thu, 01 Sep 2022 18:37:09 GMT">
							<outline text="I want to shuffle the deck a little, so instead of asking for the 1 least reacently checked feed, I ask for 10 and choose one of them at random. " created="Thu, 01 Sep 2022 18:37:09 GMT"/>
							<outline text="I got tired of seeing all the NYT and BBC feeds updating at the same time. " created="Thu, 01 Sep 2022 18:37:44 GMT"/>
							</outline>
						<outline text="8/31/22; 8:39:11 AM by DW" created="Wed, 31 Aug 2022 12:39:11 GMT">
							<outline text="We now check feeds even if they have no subscribers, if config.flCheckZeroSubsFeeds is true. " created="Wed, 31 Aug 2022 12:39:11 GMT"/>
							<outline text="No longer call subsCountFixer." created="Wed, 31 Aug 2022 12:41:49 GMT"/>
							</outline>
						<outline text="8/29/22; 11:21:24 AM by DW" created="Mon, 29 Aug 2022 15:21:23 GMT">
							<outline text="subsCountFixer hitches a ride on our flow. there are feeds with subscribers with the wrong (zero) ctSubs value, and they never get checked even though they do in fact have subscribers. " created="Mon, 29 Aug 2022 15:21:24 GMT"/>
							</outline>
						<outline text="7/2/22; 1:19:01 PM by DW" created="Sat, 02 Jul 2022 17:19:01 GMT">
							<outline text="Only consider feeds with 1 or more subscribers." created="Sat, 02 Jul 2022 17:19:01 GMT"/>
							</outline>
						<outline text="3/21/22; 12:38:18 PM by DW" created="Mon, 21 Mar 2022 16:38:16 GMT">
							<outline text="Find  least recently updated feed with 1 or more subscribers."/>
							</outline>
						</outline>
					<outline text="var sqltext;" created="Thu, 01 Sep 2022 18:39:45 GMT"/>
					<outline text="const randomFactor = 10; //9/1/22 by DW" created="Thu, 01 Sep 2022 18:35:07 GMT"/>
					<outline text="if (config.flCheckZeroSubsFeeds) {" created="Wed, 31 Aug 2022 12:39:43 GMT">
						<outline text="if (utils.random (0, 6) == 3) { //9/2/22 by DW" created="Fri, 02 Sep 2022 13:15:04 GMT">
							<outline text="sqltext = &quot;select * from feeds order by rand () limit 1;&quot;" created="Fri, 02 Sep 2022 13:15:50 GMT"/>
							<outline text="}" created="Fri, 02 Sep 2022 13:15:28 GMT"/>
							</outline>
						<outline text="else {" created="Fri, 02 Sep 2022 13:15:31 GMT">
							<outline text="sqltext = &quot;select * from feeds order by whenChecked asc limit &quot; + randomFactor + &quot;;&quot;; " created="Sat, 02 Jul 2022 17:18:00 GMT"/>
							<outline text="}" created="Fri, 02 Sep 2022 13:15:33 GMT"/>
							</outline>
						<outline text="}" created="Wed, 31 Aug 2022 12:39:48 GMT"/>
						</outline>
					<outline text="else {" created="Wed, 31 Aug 2022 12:39:49 GMT">
						<outline text="sqltext = &quot;select * from feeds where ctSubs &gt; 0 order by whenChecked asc limit  &quot; + randomFactor + &quot;;&quot;; " created="Sat, 02 Jul 2022 17:18:00 GMT"/>
						<outline text="}" created="Wed, 31 Aug 2022 12:39:51 GMT"/>
						</outline>
					<outline text="davesql.runSqltext (sqltext, function (err, result) {">
						<outline text="if (err) {">
							<outline text="callback (err);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="if (result.length &gt; 0) {">
								<outline text="var ix = utils.random (0, result.length - 1);" created="Thu, 01 Sep 2022 18:36:03 GMT"/>
								<outline text="callback (undefined, result [ix]);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="subsCountFixer (); //8/29/22 by DW" isComment="true"/>
					<outline text="}"/>
					</outline>
				<outline text="function findLeastRecentlyCheckedFeed (callback) { " isComment="true">
					<outline text="Changes" isComment="true">
						<outline text="8/29/22; 10:24:23 AM by DW" created="Mon, 29 Aug 2022 14:24:23 GMT">
							<outline text="Update -- I hated this code, so I came up with another way of approaching the problem." created="Mon, 29 Aug 2022 15:13:53 GMT"/>
							<outline text="I don't trust the ctSubs value in a feedRec. I think there are feeds for which that value is 0 where it has more than one subscriber. So I'm going to change the way this works. " created="Mon, 29 Aug 2022 14:24:24 GMT">
								<outline text="first we find the least recentlly checked feed. " created="Mon, 29 Aug 2022 14:24:58 GMT"/>
								<outline text="how many subs does it have?" created="Mon, 29 Aug 2022 14:25:23 GMT">
									<outline text="greater than zero -- check it" created="Mon, 29 Aug 2022 14:25:30 GMT"/>
									<outline text="zero -- set its whenChecked value to now and repeat" created="Mon, 29 Aug 2022 14:26:11 GMT"/>
									</outline>
								</outline>
							</outline>
						<outline text="7/2/22; 1:19:01 PM by DW" created="Sat, 02 Jul 2022 17:19:01 GMT">
							<outline text="Only consider feeds with 1 or more subscribers." created="Sat, 02 Jul 2022 17:19:01 GMT"/>
							</outline>
						<outline text="3/21/22; 12:38:18 PM by DW" created="Mon, 21 Mar 2022 16:38:16 GMT">
							<outline text="Find  least recently updated feed with 1 or more subscribers."/>
							</outline>
						</outline>
					<outline text="const now = new Date ();" created="Mon, 29 Aug 2022 14:55:45 GMT"/>
					<outline text="function findNextFeed (callback) {" created="Mon, 29 Aug 2022 14:27:17 GMT">
						<outline text="const sqltext = &quot;select * from feeds order by whenChecked asc limit 1;&quot;; " created="Sat, 02 Jul 2022 17:18:00 GMT"/>
						<outline text="davesql.runSqltext (sqltext, function (err, result) {">
							<outline text="if (err) {">
								<outline text="callback (err);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="if (result.length &gt; 0) {">
									<outline text="callback (undefined, result [0]);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}" created="Mon, 29 Aug 2022 14:27:29 GMT"/>
						</outline>
					<outline text="function setWhenChecked (feedRec, ctSubs, callback) {" created="Mon, 29 Aug 2022 14:53:59 GMT">
						<outline text="feedRec.whenChecked = now;" created="Mon, 29 Aug 2022 14:43:20 GMT"/>
						<outline text="feedRec.ctChecks++;" created="Thu, 28 Apr 2022 17:06:19 GMT"/>
						<outline text="feedRec.ctSubs = ctSubs;" created="Mon, 29 Aug 2022 14:46:35 GMT"/>
						<outline text="saveFeed (feedRec, function (err) { " created="Mon, 29 Aug 2022 14:43:28 GMT">
							<outline text="callback ();" created="Mon, 29 Aug 2022 14:46:05 GMT"/>
							<outline text="});" created="Mon, 29 Aug 2022 14:43:43 GMT"/>
							</outline>
						<outline text="}" created="Mon, 29 Aug 2022 14:54:21 GMT"/>
						</outline>
					<outline text="function doNextFeed () {" created="Mon, 29 Aug 2022 14:45:28 GMT">
						<outline text="findNextFeed (function (err, feedRec) {" created="Mon, 29 Aug 2022 14:28:11 GMT">
							<outline text="if (err) {" created="Mon, 29 Aug 2022 14:28:29 GMT">
								<outline text="callback (err);" created="Mon, 29 Aug 2022 14:28:32 GMT"/>
								<outline text="}" created="Mon, 29 Aug 2022 14:28:36 GMT"/>
								</outline>
							<outline text="else {" created="Mon, 29 Aug 2022 14:28:36 GMT">
								<outline text="countSubsForFeed (feedRec.feedUrl, function (err, ctSubs) {" created="Sat, 21 May 2022 14:28:27 GMT">
									<outline text="if (err) {" created="Sat, 21 May 2022 14:57:10 GMT">
										<outline text="console.log (&quot;findLeastRecentlyCheckedFeed: feedRec.title == &quot; + feedRec.title + &quot;, err.message == &quot; + err.message);" created="Mon, 29 Aug 2022 15:05:42 GMT"/>
										<outline text="setWhenChecked (feedRec, undefined, doNextFeed);" created="Fri, 22 Apr 2022 14:13:13 GMT"/>
										<outline text="}" created="Sat, 21 May 2022 14:57:13 GMT"/>
										</outline>
									<outline text="else {" created="Sat, 21 May 2022 14:57:14 GMT">
										<outline text="console.log (&quot;findLeastRecentlyCheckedFeed: feedRec.title == &quot; + feedRec.title + &quot;, ctSubs == &quot; + ctSubs);" created="Mon, 29 Aug 2022 15:05:42 GMT"/>
										<outline text="if (ctSubs &gt; 0) {" created="Mon, 29 Aug 2022 14:30:44 GMT">
											<outline text="callback (undefined, feedRec);" created="Mon, 29 Aug 2022 14:31:56 GMT"/>
											<outline text="}" created="Mon, 29 Aug 2022 14:30:49 GMT"/>
											</outline>
										<outline text="else {" created="Mon, 29 Aug 2022 14:30:50 GMT">
											<outline text="setWhenChecked (feedRec, 0, doNextFeed);" created="Fri, 22 Apr 2022 14:13:13 GMT"/>
											<outline text="}" created="Mon, 29 Aug 2022 14:30:51 GMT"/>
											</outline>
										<outline text="}" created="Sat, 21 May 2022 14:57:15 GMT"/>
										</outline>
									<outline text="});" created="Sat, 21 May 2022 14:28:53 GMT"/>
									</outline>
								<outline text="}" created="Mon, 29 Aug 2022 14:28:38 GMT"/>
								</outline>
							<outline text="});" created="Mon, 29 Aug 2022 14:28:25 GMT"/>
							</outline>
						<outline text="}" created="Mon, 29 Aug 2022 14:45:41 GMT"/>
						</outline>
					<outline text="doNextFeed ();"/>
					<outline text="" isComment="true" created="Mon, 29 Aug 2022 14:27:18 GMT"/>
					<outline text="" isComment="true" created="Mon, 29 Aug 2022 14:27:18 GMT"/>
					<outline text="" isComment="true" created="Mon, 29 Aug 2022 14:27:18 GMT"/>
					<outline text="const sqltext = &quot;select * from feeds where ctSubs &gt; 0 order by whenChecked asc limit 1;&quot;; //7/2/22 by DW" isComment="true" created="Sat, 02 Jul 2022 17:18:00 GMT"/>
					<outline text="davesql.runSqltext (sqltext, function (err, result) {" isComment="true">
						<outline text="if (err) {">
							<outline text="callback (err);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="if (result.length &gt; 0) {">
								<outline text="callback (undefined, result [0]);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function updateNextFeedIfReady () { ">
					<outline text="Changes" isComment="true" created="Sat, 21 May 2022 15:08:44 GMT">
						<outline text="8/31/22; 4:16:15 PM by DW" created="Wed, 31 Aug 2022 20:16:15 GMT">
							<outline text="Feeds are being checked twice in a row. I'm guessing this is because there's too much of a delay before we set whenChecked. So we set here it before we call back." created="Wed, 31 Aug 2022 20:16:16 GMT"/>
							</outline>
						<outline text="7/7/22; 12:00:51 PM by DW" created="Thu, 07 Jul 2022 16:00:51 GMT">
							<outline text="A new config setting, minSecsBetwIndividualFeedCheck, which says don't check an individual feed any more often than once that many seconds. With just one feed in the database we were checking it every ten seconds which was too much. " created="Thu, 07 Jul 2022 16:00:51 GMT"/>
							</outline>
						<outline text="5/21/22; 12:26:24 PM by DW" created="Sat, 21 May 2022 16:26:22 GMT">
							<outline text="Took the callback param off this routine. This is not the kind of thing that is synchronized." created="Sat, 21 May 2022 16:26:25 GMT"/>
							</outline>
						<outline text="5/21/22; 11:08:47 AM by DW" created="Sat, 21 May 2022 15:08:47 GMT">
							<outline text="Added a call to setFeedSubsCount so we update the ctSubs field of the feed every time we check the feed. " created="Sat, 21 May 2022 15:08:48 GMT"/>
							<outline text="Do the same for ctItems." created="Sat, 21 May 2022 16:24:13 GMT"/>
							</outline>
						</outline>
					<outline text="if (config.flUpdateFeedsInBackground) {">
						<outline text="var whenstart = new Date ();"/>
						<outline text="findLeastRecentlyCheckedFeed (function (err, feedRec) {">
							<outline text="if (!err) {">
								<outline text="if (utils.secondsSince (feedRec.whenChecked) &gt; config.minSecsBetwIndividualFeedCheck) {" created="Thu, 07 Jul 2022 15:58:10 GMT">
									<outline text="feedRec.whenChecked = new Date (); //8/31/22 by DW" created="Wed, 31 Aug 2022 20:14:28 GMT"/>
									<outline text="saveFeed (feedRec);" created="Fri, 01 Apr 2022 14:17:29 GMT"/>
									<outline text="checkOneFeed (feedRec.feedUrl, function () {" created="Tue, 22 Mar 2022 15:34:38 GMT">
										<outline text="setFeedCounts (feedRec.feedUrl); " created="Sat, 21 May 2022 16:23:36 GMT"/>
										<outline text="setFeedItemsCount (feedRec.feedUrl, function () {" isComment="true" created="Sat, 21 May 2022 16:23:36 GMT">
											<outline text="setFeedSubsCount (feedRec.feedUrl);" created="Sat, 21 May 2022 16:27:37 GMT"/>
											<outline text="});" created="Sat, 21 May 2022 16:28:02 GMT"/>
											</outline>
										<outline text="});" created="Sat, 21 May 2022 16:25:08 GMT"/>
										</outline>
									<outline text="}" created="Thu, 07 Jul 2022 15:58:54 GMT"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function getFeed (feedUrl, callback) {" created="Wed, 30 Mar 2022 20:24:47 GMT">
					<outline text="getDatabaseFeed (feedUrl, function (err, feedRec) {" created="Tue, 22 Mar 2022 15:38:46 GMT">
						<outline text="if (err) {" created="Tue, 22 Mar 2022 15:39:17 GMT">
							<outline text="if (callback !== undefined) {" created="Tue, 22 Mar 2022 15:39:21 GMT">
								<outline text="callback (err);" created="Tue, 22 Mar 2022 15:39:47 GMT"/>
								<outline text="}" created="Tue, 22 Mar 2022 15:39:33 GMT"/>
								</outline>
							<outline text="}" created="Tue, 22 Mar 2022 15:39:34 GMT"/>
							</outline>
						<outline text="else {" created="Tue, 22 Mar 2022 15:39:37 GMT">
							<outline text="callback (undefined, convertDatabaseFeed (feedRec));" created="Wed, 30 Mar 2022 20:25:37 GMT"/>
							<outline text="}" created="Tue, 22 Mar 2022 15:39:44 GMT"/>
							</outline>
						<outline text="});" created="Tue, 22 Mar 2022 15:39:06 GMT"/>
						</outline>
					<outline text="}" created="Wed, 30 Mar 2022 20:25:00 GMT"/>
					</outline>
				<outline text="function getFeedItems (feedUrl, ctItems, callback) { //8/31/22 by DW" created="Wed, 31 Aug 2022 14:40:18 GMT">
					<outline text="Changes" isComment="true" created="Wed, 31 Aug 2022 14:43:58 GMT">
						<outline text="8/31/22; 10:44:00 AM by DW" created="Wed, 31 Aug 2022 14:43:59 GMT">
							<outline text="Remarkable this simple function wasn't in the API." created="Wed, 31 Aug 2022 14:44:00 GMT"/>
							</outline>
						</outline>
					<outline text="ctItems = (ctItems === undefined) ? config.maxRiverItems : ctItems;" created="Wed, 31 Aug 2022 14:42:39 GMT"/>
					<outline text="const deleteCheck = (config.flCheckForDeleted) ? &quot; flDeleted=false and &quot; : &quot;&quot;; //11/20/23 by DW" created="Mon, 20 Nov 2023 13:51:29 GMT"/>
					<outline text="const sqltext = &quot;select * from items where &quot; + deleteCheck + &quot; feedurl=&quot; + davesql.encode (feedUrl) + &quot; order by pubDate desc limit &quot; + ctItems + &quot;;&quot;; "/>
					<outline text="davesql.runSqltext (sqltext, function (err, result) {">
						<outline text="if (err) {">
							<outline text="callback (err);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="callback (undefined, convertItemList (result));"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}" created="Wed, 31 Aug 2022 14:40:34 GMT"/>
					</outline>
				<outline text="" created="Thu, 15 Sep 2022 13:53:46 GMT"/>
				<outline text="function addToRiverCache (cachekey, feedUrlList, theRiver) { //9/15/22 by DW" created="Thu, 15 Sep 2022 13:53:46 GMT">
					<outline text="if (config.flUseRiverCache) { " created="Wed, 14 Sep 2022 13:42:39 GMT">
						<outline text="myConsoleLog (&quot;addToRiverCache: cachekey == &quot; + cachekey); //10/3/23 by DW" created="Tue, 03 Oct 2023 20:24:59 GMT"/>
						<outline text="riverCache [cachekey] = {" created="Mon, 22 Aug 2022 12:42:15 GMT">
							<outline text="feedUrlList, " created="Thu, 15 Sep 2022 13:55:37 GMT"/>
							<outline text="river: theRiver," created="Thu, 15 Sep 2022 13:55:43 GMT"/>
							<outline text="when: new Date ()" created="Thu, 15 Sep 2022 13:55:58 GMT"/>
							<outline text="};" created="Thu, 15 Sep 2022 13:55:48 GMT"/>
							</outline>
						<outline text="}" created="Wed, 14 Sep 2022 13:42:42 GMT"/>
						</outline>
					<outline text="}" created="Thu, 15 Sep 2022 13:54:09 GMT"/>
					</outline>
				<outline text="function clearCachedRivers (feedUrl) { //8/22/22 by DW" created="Mon, 22 Aug 2022 12:57:24 GMT">
					<outline text="Changes" isComment="true" created="Mon, 22 Aug 2022 12:57:43 GMT">
						<outline text="10/14/22; 9:36:03 AM by DW" created="Fri, 14 Oct 2022 13:36:02 GMT">
							<outline text="The everything river contains all feeds, so when one updates the cache must be tossed. How do we know it's the everything river? The feedUrlList is undefined." created="Fri, 14 Oct 2022 13:36:03 GMT"/>
							</outline>
						<outline text="8/22/22; 8:57:47 AM by DW" created="Mon, 22 Aug 2022 12:57:46 GMT">
							<outline text="A feed has updated. Any cached rivers that contain it must be deleted, so next time they are referenced they are rebuilt." created="Mon, 22 Aug 2022 12:57:53 GMT"/>
							</outline>
						</outline>
					<outline text="function logit () { //10/3/23 by DW" created="Tue, 03 Oct 2023 21:36:56 GMT">
						<outline text="myConsoleLog (&quot;clearCachedRivers: deleting cache for the river whose key is &quot; + cachekey + &quot;. feedUrl == &quot; + feedUrl);" created="Mon, 22 Aug 2022 13:06:18 GMT"/>
						<outline text="}" created="Tue, 03 Oct 2023 21:37:04 GMT"/>
						</outline>
					<outline text="for (var cachekey in riverCache) {" created="Mon, 22 Aug 2022 12:58:35 GMT">
						<outline text="var feedUrlList = riverCache [cachekey].feedUrlList;" created="Mon, 22 Aug 2022 13:02:33 GMT"/>
						<outline text="if (feedUrlList === undefined) { //the &quot;everything&quot; river -- 10/14/22 by DW" created="Fri, 14 Oct 2022 13:34:49 GMT">
							<outline text="logit (); //10/3/23 by DW" created="Mon, 22 Aug 2022 13:06:18 GMT"/>
							<outline text="delete riverCache [cachekey];" created="Mon, 22 Aug 2022 13:00:54 GMT"/>
							<outline text="}" created="Fri, 14 Oct 2022 13:35:03 GMT"/>
							</outline>
						<outline text="else {" created="Fri, 14 Oct 2022 13:35:08 GMT">
							<outline text="for (var i = 0; i &lt; feedUrlList.length; i++) {" created="Mon, 22 Aug 2022 13:02:01 GMT">
								<outline text="if (feedUrlList [i] == feedUrl) {" created="Mon, 22 Aug 2022 12:59:50 GMT">
									<outline text="logit (); //10/3/23 by DW" created="Mon, 22 Aug 2022 13:06:18 GMT"/>
									<outline text="delete riverCache [cachekey];" created="Mon, 22 Aug 2022 13:00:54 GMT"/>
									<outline text="break;" created="Mon, 22 Aug 2022 13:04:08 GMT"/>
									<outline text="}" created="Mon, 22 Aug 2022 12:59:57 GMT"/>
									</outline>
								<outline text="}" created="Mon, 22 Aug 2022 13:03:02 GMT"/>
								</outline>
							<outline text="}" created="Fri, 14 Oct 2022 13:35:10 GMT"/>
							</outline>
						<outline text="}" created="Mon, 22 Aug 2022 12:58:40 GMT"/>
						</outline>
					<outline text="}" created="Mon, 22 Aug 2022 12:57:33 GMT"/>
					</outline>
				<outline text="function clearOldCachedRivers () { //9/15/22 by DW" created="Thu, 15 Sep 2022 14:01:19 GMT">
					<outline text="for (var cachekey in riverCache) {" created="Thu, 15 Sep 2022 14:01:48 GMT">
						<outline text="if (utils.secondsSince (riverCache [cachekey].when) &gt; config.ctSecsLifeRiverCache) {" created="Thu, 15 Sep 2022 14:01:55 GMT">
							<outline text="myConsoleLog (&quot;clearOldCachedRivers: deleting cache for the river whose key is &quot; + cachekey); //10/3/23 by DW" created="Mon, 22 Aug 2022 13:06:18 GMT"/>
							<outline text="delete riverCache [cachekey];" created="Mon, 22 Aug 2022 13:00:54 GMT"/>
							<outline text="}" created="Thu, 15 Sep 2022 14:02:25 GMT"/>
							</outline>
						<outline text="}" created="Thu, 15 Sep 2022 14:01:49 GMT"/>
						</outline>
					<outline text="}" created="Thu, 15 Sep 2022 14:01:33 GMT"/>
					</outline>
				<outline text="function isFeedInRiver (feedUrl, cachekey, callback) { //2/1/23 by DW" created="Wed, 01 Feb 2023 14:32:55 GMT">
					<outline text="var flInRiver = false;" created="Wed, 01 Feb 2023 14:33:19 GMT"/>
					<outline text="if (riverCache [cachekey] !== undefined) {" created="Wed, 01 Feb 2023 14:33:19 GMT">
						<outline text="var feedUrlList = riverCache [urlOpml].feedUrlList;" created="Wed, 01 Feb 2023 14:34:40 GMT"/>
						<outline text="if (feedUrlList !== undefined) {" created="Wed, 01 Feb 2023 14:35:02 GMT">
							<outline text="feedUrlList.forEach (function (url) {" created="Wed, 01 Feb 2023 14:35:13 GMT">
								<outline text="if (url == feedUrl) {" created="Wed, 01 Feb 2023 14:35:27 GMT">
									<outline text="flInRiver = true;" created="Wed, 01 Feb 2023 14:35:37 GMT"/>
									<outline text="}" created="Wed, 01 Feb 2023 14:35:33 GMT"/>
									</outline>
								<outline text="});" created="Wed, 01 Feb 2023 14:35:19 GMT"/>
								</outline>
							<outline text="}" created="Wed, 01 Feb 2023 14:35:09 GMT"/>
							</outline>
						<outline text="}" created="Wed, 01 Feb 2023 14:33:54 GMT"/>
						</outline>
					<outline text="callback (undefined, flInRiver);" created="Wed, 01 Feb 2023 14:36:35 GMT"/>
					<outline text="}" created="Wed, 01 Feb 2023 14:33:11 GMT"/>
					</outline>
				<outline text="" created="Tue, 06 Sep 2022 16:44:12 GMT"/>
				<outline text="function startBuildLog () { //10/10/22 by DW" created="Mon, 10 Oct 2022 14:38:26 GMT">
					<outline text="if (config.flRiverBuildLogEnabled) {" created="Mon, 10 Oct 2022 15:08:06 GMT">
						<outline text="var f = config.riverBuildLogFolder + utils.getDatePath (undefined, false) + &quot;.json&quot;;" created="Mon, 10 Oct 2022 14:04:20 GMT"/>
						<outline text="fs.readFile (f, function (err, jsontext) {" created="Mon, 10 Oct 2022 15:05:49 GMT">
							<outline text="if (!err) {" created="Mon, 10 Oct 2022 15:06:11 GMT">
								<outline text="try {" created="Mon, 10 Oct 2022 15:06:36 GMT">
									<outline text="riverBuildLog = JSON.parse (jsontext);" created="Mon, 10 Oct 2022 15:06:15 GMT"/>
									<outline text="}" created="Mon, 10 Oct 2022 15:06:37 GMT"/>
									</outline>
								<outline text="catch (err) {" created="Mon, 10 Oct 2022 15:06:38 GMT">
									<outline text="}" created="Mon, 10 Oct 2022 15:06:41 GMT"/>
									</outline>
								<outline text="}" created="Mon, 10 Oct 2022 15:06:14 GMT"/>
								</outline>
							<outline text="});" created="Mon, 10 Oct 2022 15:06:01 GMT"/>
							</outline>
						<outline text="}" created="Mon, 10 Oct 2022 15:08:09 GMT"/>
						</outline>
					<outline text="}" created="Mon, 10 Oct 2022 14:38:33 GMT"/>
					</outline>
				<outline text="function addToRiverBuildLog (whenstart, sqltext) {" created="Mon, 10 Oct 2022 13:45:54 GMT">
					<outline text="if (config.flRiverBuildLogEnabled) {" created="Mon, 10 Oct 2022 13:50:43 GMT">
						<outline text="riverBuildLog.unshift ({" created="Mon, 10 Oct 2022 13:46:48 GMT">
							<outline text="when: whenstart.toLocaleTimeString (), " created="Mon, 10 Oct 2022 13:47:00 GMT"/>
							<outline text="ctSecs: utils.secondsSince (whenstart)," created="Mon, 10 Oct 2022 13:47:10 GMT"/>
							<outline text="sqltext" created="Mon, 10 Oct 2022 13:47:20 GMT"/>
							<outline text="});" created="Mon, 10 Oct 2022 13:46:53 GMT"/>
							</outline>
						<outline text="flRiverBuildLogChanged = true;"/>
						<outline text="}" created="Mon, 10 Oct 2022 13:50:47 GMT"/>
						</outline>
					<outline text="}" created="Mon, 10 Oct 2022 13:46:03 GMT"/>
					</outline>
				<outline text="function getCurrentRiverBuildLog (callback) {" created="Mon, 10 Oct 2022 14:30:03 GMT">
					<outline text="callback (undefined, utils.jsonStringify (riverBuildLog));" created="Mon, 10 Oct 2022 14:43:02 GMT"/>
					<outline text="}" created="Mon, 10 Oct 2022 14:30:20 GMT"/>
					</outline>
				<outline text="function saveCurrentBuildLog () {" created="Mon, 10 Oct 2022 14:38:26 GMT">
					<outline text="if (config.flRiverBuildLogEnabled) {" created="Mon, 10 Oct 2022 15:07:55 GMT">
						<outline text="var f = config.riverBuildLogFolder + utils.getDatePath (undefined, false) + &quot;.json&quot;;" created="Mon, 10 Oct 2022 14:04:20 GMT"/>
						<outline text="utils.sureFilePath (f, function () {" created="Mon, 22 Aug 2022 18:28:35 GMT">
							<outline text="fs.writeFile (f, utils.jsonStringify (riverBuildLog), function (err) {" created="Mon, 10 Oct 2022 14:03:22 GMT">
								<outline text="});" created="Mon, 10 Oct 2022 14:03:40 GMT"/>
								</outline>
							<outline text="});" created="Mon, 22 Aug 2022 18:28:45 GMT"/>
							</outline>
						<outline text="}" created="Mon, 10 Oct 2022 15:07:56 GMT"/>
						</outline>
					<outline text="}" created="Mon, 10 Oct 2022 14:38:33 GMT"/>
					</outline>
				<outline text="" created="Wed, 07 Feb 2024 21:19:31 GMT"/>
				<outline text="function getRiver (feedUrl, screenname, callback, metadata=undefined) {" created="Wed, 30 Mar 2022 15:22:55 GMT">
					<outline text="Changes" isComment="true" created="Wed, 30 Mar 2022 15:23:30 GMT">
						<outline text="3/4/24; 4:53:53 PM by DW" created="Mon, 04 Mar 2024 21:53:52 GMT">
							<outline text="feedland.org is running really slowly, and the slowness is traced to using &lt;i&gt;index (feedId)&lt;/i&gt; in the query. " created="Mon, 04 Mar 2024 21:53:53 GMT"/>
							<outline text="we didn't know what we were doing when we were trying out new queries earlier this year. " created="Mon, 04 Mar 2024 21:54:23 GMT"/>
							<outline text="must remember to treat this app with more respect in the future. " created="Mon, 04 Mar 2024 21:54:56 GMT"/>
							</outline>
						<outline text="3/2/24; 12:05:14 PM by DW" created="Sat, 02 Mar 2024 17:05:14 GMT">
							<outline text="getRiverFromEverything passes in feedurl and screenname undefined. " created="Sat, 02 Mar 2024 17:05:15 GMT"/>
							<outline text="we were returning &quot;&quot; in this case, but that's a syntax error. the where clause needs *something*." created="Sat, 02 Mar 2024 17:08:08 GMT"/>
							<outline text="is there a condition in mysql that's always true? so i could say something like this -- select * from items where &lt;true&gt;; " created="Sat, 02 Mar 2024 17:05:26 GMT"/>
							<outline text="yes, according to chatgpt, 1=1 is a good test. let's try it." created="Sat, 02 Mar 2024 17:05:58 GMT"/>
							</outline>
						<outline text="2/21/24; 12:56:52 PM by DW" created="Wed, 21 Feb 2024 17:56:52 GMT">
							<outline text="I left the code in for the changes, but reverted to the previous way of doing it. The performance that resulted was much worse than before. " created="Wed, 21 Feb 2024 18:51:53 GMT"/>
							<outline text="Next up, we're trying pagination. New optional param, idLast, if specified, we only look for items with ids less than that" created="Wed, 21 Feb 2024 17:56:53 GMT">
								<outline text="This is the form of the first query" created="Wed, 21 Feb 2024 18:10:12 GMT">
									<outline text="select * from items use index (feedId) where feedId in (2403,13216,12702,3824) order by id desc limit 50;" created="Wed, 21 Feb 2024 17:57:27 GMT"/>
									<outline text="select * from items use index (feedId) where feedId in (2403,13216,12702,3824) and id &lt; 2489238 order by id desc limit 50;" created="Wed, 21 Feb 2024 17:57:27 GMT"/>
									</outline>
								</outline>
							</outline>
						<outline text="2/12/24; 1:59:03 PM by DW" created="Mon, 12 Feb 2024 18:59:03 GMT">
							<outline text="At the request of @pippercameron, changing the index reference in the query to feedId in place of itemPubDate." created="Mon, 12 Feb 2024 18:59:03 GMT">
								<outline text="https://github.com/scripting/feedlandDev/issues/2#issuecomment-1939279153" created="Mon, 12 Feb 2024 18:59:46 GMT"/>
								</outline>
							</outline>
						<outline text="2/9/24; 2:01:33 PM by DW" created="Fri, 09 Feb 2024 19:01:33 GMT">
							<outline text="Changed the query to add &quot;use index (itemPubDate)&quot; near the beginning." created="Fri, 09 Feb 2024 19:01:33 GMT">
								<outline text="https://github.com/scripting/feedlandDev/issues/2#issuecomment-1936446554"/>
								</outline>
							</outline>
						<outline text="2/7/24; 4:02:24 PM by DW" created="Wed, 07 Feb 2024 21:02:23 GMT">
							<outline text="An experimental feature, explained here. " created="Wed, 07 Feb 2024 21:02:25 GMT">
								<outline text="https://github.com/scripting/feedlandDev/issues/2" created="Wed, 07 Feb 2024 21:02:33 GMT"/>
								</outline>
							</outline>
						<outline text="2/3/24; 4:26:07 PM by DW" created="Sat, 03 Feb 2024 21:26:06 GMT">
							<outline text="If we have feedId's and the first param is an array, assume it's an array of feedId's." created="Sat, 03 Feb 2024 21:26:07 GMT"/>
							</outline>
						<outline text="2/1/23; 10:16:52 AM by DW" created="Wed, 01 Feb 2023 15:16:51 GMT">
							<outline text="New optional param, metadata. It allows the client to transmit data about the river along with the items in the river. " created="Wed, 01 Feb 2023 15:16:52 GMT"/>
							<outline text="We add this to the object we return, which previously was just an array called feeds. Now there's a second item called metadata. " created="Wed, 01 Feb 2023 15:17:01 GMT"/>
							<outline text="It would have been nice to do this at a higher level, but we return a jsonified struct, so the value has to be added before that happens." created="Wed, 01 Feb 2023 15:18:06 GMT"/>
							</outline>
						<outline text="10/14/22; 9:20:13 AM by DW" created="Fri, 14 Oct 2022 13:20:12 GMT">
							<outline text="A new river -- from all feeds, regardless of whether you're subscribed." created="Fri, 14 Oct 2022 13:20:13 GMT">
								<outline text="indicated by both feedUrl and screenname being undefined." created="Fri, 14 Oct 2022 13:20:33 GMT"/>
								</outline>
							</outline>
						<outline text="10/10/22; 9:44:18 AM by DW" created="Mon, 10 Oct 2022 13:44:17 GMT">
							<outline text="Add support for the riverBuildLog." created="Mon, 10 Oct 2022 13:44:18 GMT"/>
							</outline>
						<outline text="9/14/22; 3:55:21 PM by DW" created="Wed, 14 Sep 2022 19:55:20 GMT">
							<outline text="Return the river as JSON not an object. " created="Wed, 14 Sep 2022 19:55:21 GMT"/>
							<outline text="This lets the cache be a bit faster, no need to keep converting the object to JSON if it's used more than once. " created="Wed, 14 Sep 2022 19:56:26 GMT"/>
							</outline>
						<outline text="8/26/22; 9:54:06 AM by DW" created="Fri, 26 Aug 2022 13:54:06 GMT">
							<outline text="For each group we return, we send back a new value, whenReceived -- which is when the first item in the group was received. " created="Fri, 26 Aug 2022 13:54:06 GMT"/>
							</outline>
						<outline text="8/3/22; 9:24:03 AM by DW" created="Wed, 03 Aug 2022 13:24:03 GMT">
							<outline text="A new way to call, if the first param is a list of URLs, treat it as a river of those feeds. In this case screenname is ignored." created="Wed, 03 Aug 2022 13:24:03 GMT"/>
							</outline>
						<outline text="4/23/22; 9:53:34 AM by DW" created="Sat, 23 Apr 2022 13:53:34 GMT">
							<outline text="Add feedUrl parameter, if not undefined, all the returned items come from one feed. " created="Sat, 23 Apr 2022 13:53:35 GMT"/>
							<outline text="It was better to have all river-getting code flow through one routine so we wouldn't have to implement the returned data structure twice." created="Sat, 23 Apr 2022 13:59:32 GMT"/>
							</outline>
						<outline text="4/16/22; 9:35:34 AM by DW" created="Sat, 16 Apr 2022 13:35:34 GMT">
							<outline text="We now sort the river, adding another level of structure, so that the new items are grouped by feed, river-style." created="Sat, 16 Apr 2022 13:35:34 GMT"/>
							<outline text="The items still appear in the same order when the structure is flattened, but if two conseutive items come from the same feed, they are part of the same array." created="Sat, 16 Apr 2022 13:36:06 GMT"/>
							</outline>
						<outline text="4/3/22; 1:12:34 PM by DW" created="Sun, 03 Apr 2022 17:12:33 GMT">
							<outline text="Changed from ordering by whenCreated to pubDate. Consider when you add a feed and we read it, you don't want to get a shitload of posts at the top of the list from three weeks ago." created="Sun, 03 Apr 2022 17:12:34 GMT"/>
							</outline>
						<outline text="3/30/22; 11:23:33 AM by DW" created="Wed, 30 Mar 2022 15:23:32 GMT">
							<outline text="Returns a river for the user whose list is named." created="Wed, 30 Mar 2022 15:23:33 GMT"/>
							</outline>
						</outline>
					<outline text="const whenstart = new Date ();" created="Mon, 10 Oct 2022 13:45:11 GMT"/>
					<outline text="function getFeedClause () {" created="Sat, 23 Apr 2022 13:54:03 GMT">
						<outline text="var feedClause;" created="Sat, 23 Apr 2022 13:54:22 GMT"/>
						<outline text="if (feedUrl === undefined) {" created="Sat, 23 Apr 2022 13:54:03 GMT">
							<outline text="if (screenname === undefined) { //10/14/22 by DW" created="Fri, 14 Oct 2022 13:21:02 GMT">
								<outline text="feedClause = &quot;1 = 1&quot;; //3/2/24 by DW" created="Fri, 14 Oct 2022 13:22:05 GMT"/>
								<outline text="}" created="Fri, 14 Oct 2022 13:21:13 GMT"/>
								</outline>
							<outline text="else {" created="Fri, 14 Oct 2022 13:21:14 GMT">
								<outline text="feedClause = &quot;feedurl in (select feedUrl from subscriptions where listName='&quot; + screenname + &quot;')&quot;;" created="Sat, 23 Apr 2022 13:55:06 GMT"/>
								<outline text="}" created="Fri, 14 Oct 2022 13:21:16 GMT"/>
								</outline>
							<outline text="}" created="Sat, 23 Apr 2022 13:54:16 GMT"/>
							</outline>
						<outline text="else {" created="Sat, 23 Apr 2022 13:54:17 GMT">
							<outline text="if (Array.isArray (feedUrl)) { //it's a list of feed urls -- 8/3/22 by DW">
								<outline text="var listtext = &quot;&quot;;" created="Wed, 03 Aug 2022 13:34:04 GMT"/>
								<outline text="feedUrl.forEach (function (url) {" created="Wed, 03 Aug 2022 13:33:35 GMT">
									<outline text="listtext += davesql.encode (url) + &quot;,&quot;;" created="Wed, 03 Aug 2022 13:34:25 GMT"/>
									<outline text="});" created="Wed, 03 Aug 2022 13:33:47 GMT"/>
									</outline>
								<outline text="if (listtext.length &gt; 0) {" created="Wed, 03 Aug 2022 13:26:20 GMT">
									<outline text="listtext = utils.stringMid (listtext, 1, listtext.length - 1);" created="Wed, 03 Aug 2022 13:35:05 GMT"/>
									<outline text="}" created="Wed, 03 Aug 2022 13:35:03 GMT"/>
									</outline>
								<outline text="if (config.flFeedsHaveIds &amp;&amp; config.flCanUseFeedIds) { //2/3/24 by DW" created="Sat, 03 Feb 2024 21:27:45 GMT">
									<outline text="feedClause = &quot;feedId in (&quot; + listtext + &quot;)&quot;;" created="Sat, 23 Apr 2022 13:55:06 GMT"/>
									<outline text="}" created="Sat, 03 Feb 2024 21:27:49 GMT"/>
									</outline>
								<outline text="else {" created="Sat, 03 Feb 2024 21:27:50 GMT">
									<outline text="feedClause = &quot;feedurl in (&quot; + listtext + &quot;)&quot;;" created="Sat, 23 Apr 2022 13:55:06 GMT"/>
									<outline text="}" created="Sat, 03 Feb 2024 21:27:56 GMT"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="else {" created="Wed, 03 Aug 2022 13:25:52 GMT">
								<outline text="feedClause = &quot;feedurl=&quot; + davesql.encode (feedUrl);" created="Sat, 23 Apr 2022 13:55:32 GMT"/>
								<outline text="}" created="Wed, 03 Aug 2022 13:25:54 GMT"/>
								</outline>
							<outline text="}" created="Sat, 23 Apr 2022 13:54:19 GMT"/>
							</outline>
						<outline text="" created="Fri, 14 Oct 2022 13:22:18 GMT"/>
						<outline text="if (feedClause.length &gt; 0) { //10/14/22 by DW" created="Fri, 14 Oct 2022 13:22:18 GMT">
							<outline text="if (config.flCheckForDeleted) { //11/20/23 by DW" created="Mon, 20 Nov 2023 14:05:54 GMT">
								<outline text="feedClause = &quot; and &quot; + feedClause;" created="Fri, 14 Oct 2022 13:22:37 GMT"/>
								<outline text="}" created="Mon, 20 Nov 2023 14:05:57 GMT"/>
								</outline>
							<outline text="}" created="Fri, 14 Oct 2022 13:22:33 GMT"/>
							</outline>
						<outline text="" created="Fri, 14 Oct 2022 13:22:19 GMT"/>
						<outline text="return (feedClause);" created="Sat, 23 Apr 2022 13:57:43 GMT"/>
						<outline text="}" created="Sat, 23 Apr 2022 13:57:32 GMT"/>
						</outline>
					<outline text="function getTimeClause () { //2/7/24 by DW" created="Wed, 07 Feb 2024 21:15:54 GMT">
						<outline text="if (config.ctRiverCutoffDays === undefined) { //this is how you can turn the feature off in config" created="Wed, 07 Feb 2024 21:19:56 GMT">
							<outline text="return (&quot;&quot;);" created="Wed, 07 Feb 2024 21:20:06 GMT"/>
							<outline text="}" created="Wed, 07 Feb 2024 21:20:11 GMT"/>
							</outline>
						<outline text="else {" created="Wed, 07 Feb 2024 21:20:12 GMT">
							<outline text="const whenCutoff = dateDaysBefore (config.ctRiverCutoffDays); //2/7/24 by DW" created="Wed, 07 Feb 2024 21:04:56 GMT"/>
							<outline text="const timeClause = &quot; and pubDate &gt; &quot; + davesql.encode (whenCutoff) + &quot; &quot;; //2/7/24 by DW" created="Wed, 07 Feb 2024 21:03:12 GMT"/>
							<outline text="return (timeClause);" created="Wed, 07 Feb 2024 21:16:04 GMT"/>
							<outline text="}" created="Wed, 07 Feb 2024 21:20:14 GMT"/>
							</outline>
						<outline text="}" created="Wed, 07 Feb 2024 21:15:58 GMT"/>
						</outline>
					<outline text="function useIndexFeedId () { //3/4/24 by DW" created="Mon, 04 Mar 2024 21:50:44 GMT">
						<outline text="if (config.flFeedsHaveIds &amp;&amp; config.flCanUseFeedIds) {" created="Mon, 04 Mar 2024 21:51:32 GMT">
							<outline text="return (&quot; use index (feedId) &quot;);" created="Mon, 04 Mar 2024 21:52:19 GMT"/>
							<outline text="}" created="Mon, 04 Mar 2024 21:51:47 GMT"/>
							</outline>
						<outline text="else {" created="Mon, 04 Mar 2024 21:51:48 GMT">
							<outline text="return (&quot;&quot;);" created="Mon, 04 Mar 2024 21:52:30 GMT"/>
							<outline text="}" created="Mon, 04 Mar 2024 21:51:50 GMT"/>
							</outline>
						<outline text="}" created="Mon, 04 Mar 2024 21:50:59 GMT"/>
						</outline>
					<outline text="function sortRiver (theFlatArray) {" created="Sat, 16 Apr 2022 13:23:27 GMT">
						<outline text="var titles = new Object (), ctDuplicatesSkipped = 0;" created="Fri, 22 Apr 2022 15:33:04 GMT"/>
						<outline text="var theRiver = {" created="Sat, 16 Apr 2022 13:23:47 GMT">
							<outline text="feeds: new Array ()" created="Sat, 16 Apr 2022 13:23:57 GMT"/>
							<outline text="};" created="Sat, 16 Apr 2022 13:23:52 GMT"/>
							</outline>
						<outline text="var lastFeedUrl = undefined, itemsForThisFeed;" created="Sat, 16 Apr 2022 13:25:25 GMT"/>
						<outline text="theFlatArray.forEach (function (item) {" created="Sat, 16 Apr 2022 13:25:00 GMT">
							<outline text="var flskip = false;"/>
							<outline text="if (config.flSkipDuplicateTitles) {">
								<outline text="function checkForNull (value) {">
									<outline text="if (value == null) {">
										<outline text="value = &quot;&quot;;"/>
										<outline text="}"/>
										</outline>
									<outline text="return (value);"/>
									<outline text="}"/>
									</outline>
								<outline text="var reducedtitle = utils.trimWhitespace (utils.stringLower (checkForNull (item.title)));"/>
								<outline text="if (reducedtitle.length &gt; 0) {">
									<outline text="if (titles [reducedtitle] !== undefined) { //duplicate">
										<outline text="ctDuplicatesSkipped++;"/>
										<outline text="titles [reducedtitle]++;" created="Sat, 23 Apr 2022 14:32:37 GMT"/>
										<outline text="flskip = true;"/>
										<outline text="}"/>
										</outline>
									<outline text="else {" created="Fri, 22 Apr 2022 15:35:45 GMT">
										<outline text="titles [reducedtitle] = 1;"/>
										<outline text="}" created="Fri, 22 Apr 2022 15:35:48 GMT"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="if (!flskip) {" created="Fri, 22 Apr 2022 15:34:31 GMT">
								<outline text="if (item.feedUrl !== lastFeedUrl) {" created="Sat, 16 Apr 2022 13:30:29 GMT">
									<outline text="itemsForThisFeed = {" created="Sat, 16 Apr 2022 15:18:56 GMT">
										<outline text="feedUrl: item.feedUrl," created="Sat, 16 Apr 2022 15:18:28 GMT"/>
										<outline text="whenReceived: item.whenReceived, //8/26/22 by DW" created="Fri, 26 Aug 2022 13:53:47 GMT"/>
										<outline text="items: new Array ()" created="Sat, 16 Apr 2022 13:32:24 GMT"/>
										<outline text="};" created="Sat, 16 Apr 2022 15:19:07 GMT"/>
										</outline>
									<outline text="theRiver.feeds.push (itemsForThisFeed);" created="Sat, 16 Apr 2022 13:30:57 GMT"/>
									<outline text="lastFeedUrl = item.feedUrl;" created="Sat, 16 Apr 2022 13:30:48 GMT"/>
									<outline text="}" created="Sat, 16 Apr 2022 13:30:41 GMT"/>
									</outline>
								<outline text="itemsForThisFeed.items.push (item);" created="Sat, 16 Apr 2022 13:35:03 GMT"/>
								<outline text="}" created="Fri, 22 Apr 2022 15:34:37 GMT"/>
								</outline>
							<outline text="});" created="Sat, 16 Apr 2022 13:25:13 GMT"/>
							</outline>
						<outline text="" created="Sat, 23 Apr 2022 13:34:45 GMT"/>
						<outline text="if (ctDuplicatesSkipped &gt; 0) {" isComment="true" created="Sat, 23 Apr 2022 13:34:45 GMT">
							<outline text="console.log (&quot;sortRiver: ctDuplicatesSkipped == &quot; + ctDuplicatesSkipped);" created="Sat, 23 Apr 2022 13:34:51 GMT"/>
							<outline text="for (var x in titles) {" created="Sat, 23 Apr 2022 14:25:37 GMT">
								<outline text="if (titles [x] &gt; 1) {" created="Sat, 23 Apr 2022 14:32:48 GMT">
									<outline text="console.log (utils.padWithZeros (titles [x], 3) + &quot;: &quot; + x);" created="Sat, 23 Apr 2022 14:29:03 GMT"/>
									<outline text="}" created="Sat, 23 Apr 2022 14:32:55 GMT"/>
									</outline>
								<outline text="}" created="Sat, 23 Apr 2022 14:29:20 GMT"/>
								</outline>
							<outline text="}" created="Sat, 23 Apr 2022 13:35:01 GMT"/>
							</outline>
						<outline text="" created="Sat, 23 Apr 2022 13:34:45 GMT"/>
						<outline text="return (theRiver);" created="Sat, 16 Apr 2022 13:35:24 GMT"/>
						<outline text="}" created="Sat, 16 Apr 2022 13:23:41 GMT"/>
						</outline>
					<outline text="" created="Mon, 20 Nov 2023 13:53:22 GMT"/>
					<outline text="const maxItemsPerCall = 50;" isComment="true" created="Wed, 21 Feb 2024 18:12:48 GMT"/>
					<outline text="const deleteCheck = (config.flCheckForDeleted) ? &quot; flDeleted=false &quot; : &quot;&quot;; //11/20/23 by DW" created="Mon, 20 Nov 2023 13:51:29 GMT"/>
					<outline text="const sqltext = &quot;select * from items &quot; + useIndexFeedId () + &quot; where &quot; + deleteCheck + getFeedClause () + getTimeClause () + &quot; order by pubDate desc limit &quot; + config.maxRiverItems + &quot;;&quot;; //2/12/24 by DW"/>
					<outline text="const sqltext = &quot;select * from items use index (feedId) where &quot; + deleteCheck + getFeedClause () + getTimeClause () + &quot; order by pubDate desc limit &quot; + config.maxRiverItems + &quot;;&quot;; //2/12/24 by DW" isComment="true"/>
					<outline text="const paginationPart = (idLast === undefined) ? &quot;&quot; : &quot; and id &lt; &quot; + idLast; //2/21/24 by DW" isComment="true" created="Wed, 21 Feb 2024 18:13:19 GMT"/>
					<outline text="const sqltext = &quot;select * from items use index (feedId) where &quot; + deleteCheck + getFeedClause () + paginationPart + &quot; order by id desc limit &quot; + maxItemsPerCall + &quot;;&quot;; //2/21/24 by DW" isComment="true"/>
					<outline text="const sqltext = &quot;select * from items use index (itemPubDate) where &quot; + deleteCheck + getFeedClause () + getTimeClause () + &quot; order by pubDate desc limit &quot; + config.maxRiverItems + &quot;;&quot;; " isComment="true"/>
					<outline text="const sqltext = &quot;select * from items where &quot; + deleteCheck + getFeedClause () + getTimeClause () + &quot; order by pubDate desc limit &quot; + config.maxRiverItems + &quot;;&quot;; " isComment="true"/>
					<outline text="console.log (&quot;getRiver: sqltext == &quot; + sqltext);" created="Wed, 03 Aug 2022 13:40:46 GMT"/>
					<outline text="davesql.runSqltext (sqltext, function (err, result) {">
						<outline text="if (err) {">
							<outline text="if (callback !== undefined) {">
								<outline text="callback (err);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="addToRiverBuildLog (whenstart, sqltext);" created="Mon, 10 Oct 2022 13:51:40 GMT"/>
							<outline text="if (callback !== undefined) {">
								<outline text="let jstruct = sortRiver (convertItemList (result));" created="Wed, 14 Sep 2022 19:54:17 GMT"/>
								<outline text="jstruct.metadata = metadata; //2/1/23 by DW" created="Wed, 01 Feb 2023 15:21:14 GMT"/>
								<outline text="let jsontext = utils.jsonStringify (jstruct);" created="Wed, 14 Sep 2022 19:54:18 GMT"/>
								<outline text="callback (undefined, jsontext);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}" created="Wed, 30 Mar 2022 15:23:18 GMT"/>
					</outline>
				<outline text="function getRiverFromList (jsontext, callback) {" created="Wed, 03 Aug 2022 13:05:51 GMT">
					<outline text="Changes" isComment="true" created="Wed, 01 Feb 2023 14:28:06 GMT">
						<outline text="2/1/23; 10:28:15 AM by DW" created="Wed, 01 Feb 2023 15:28:15 GMT">
							<outline text="We return a cachekey with the empty string in the metadata, indicating that we don't cache this. " created="Wed, 01 Feb 2023 15:28:16 GMT"/>
							</outline>
						<outline text="2/1/23; 9:28:10 AM by DW" created="Wed, 01 Feb 2023 14:28:09 GMT">
							<outline text="Not a change. I wanted to know where this is used, and it appears to only be used in News Products, it's the only place we have an OPML file that contains feeds that we then get a river for. " created="Wed, 01 Feb 2023 14:28:11 GMT"/>
							<outline text="This is important because it's not caching the feed list for this kind of river. " created="Wed, 01 Feb 2023 14:28:55 GMT"/>
							</outline>
						</outline>
					<outline text="var feedUrlList;" created="Wed, 03 Aug 2022 13:20:07 GMT"/>
					<outline text="try {" created="Wed, 03 Aug 2022 13:20:08 GMT">
						<outline text="feedUrlList = JSON.parse (jsontext);" created="Wed, 03 Aug 2022 13:19:49 GMT"/>
						<outline text="}" created="Wed, 03 Aug 2022 13:20:11 GMT"/>
						</outline>
					<outline text="catch (err) {" created="Wed, 03 Aug 2022 13:20:12 GMT">
						<outline text="callback (err);" created="Wed, 03 Aug 2022 13:20:37 GMT"/>
						<outline text="return; //2/1/23 by DW" created="Wed, 01 Feb 2023 15:27:46 GMT"/>
						<outline text="}" created="Wed, 03 Aug 2022 13:20:16 GMT"/>
						</outline>
					<outline text="const metadata = {cachekey: &quot;&quot;}; //2/1/23 by DW" created="Wed, 01 Feb 2023 15:23:38 GMT"/>
					<outline text="getRiver (feedUrlList, undefined, callback, metadata);" created="Wed, 03 Aug 2022 13:22:02 GMT"/>
					<outline text="}" created="Wed, 03 Aug 2022 13:06:24 GMT"/>
					</outline>
				<outline text="function getRiverFromOpml (urlOpml, callback) { //8/21/22 by DW" created="Sun, 21 Aug 2022 17:43:46 GMT">
					<outline text="Changes" isComment="true" created="Mon, 22 Aug 2022 12:53:08 GMT">
						<outline text="8/22/22; 8:53:10 AM by DW" created="Mon, 22 Aug 2022 12:53:09 GMT">
							<outline text="Add caching." created="Mon, 22 Aug 2022 12:53:10 GMT"/>
							</outline>
						</outline>
					<outline text="const whenstart = new Date ();" created="Mon, 22 Aug 2022 12:48:48 GMT"/>
					<outline text="if (riverCache [urlOpml] !== undefined) { //serve from cache" created="Mon, 22 Aug 2022 12:39:10 GMT">
						<outline text="myConsoleLog (&quot;getRiverFromOpml (serving from cache): urlOpml == &quot; + urlOpml + &quot;, &quot; + utils.secondsSince (whenstart) + &quot; secs.&quot;);" created="Mon, 22 Aug 2022 12:43:30 GMT"/>
						<outline text="callback (undefined, riverCache [urlOpml].river);" created="Mon, 22 Aug 2022 12:39:41 GMT"/>
						<outline text="}" created="Mon, 22 Aug 2022 12:39:23 GMT"/>
						</outline>
					<outline text="else {" created="Mon, 22 Aug 2022 12:39:10 GMT">
						<outline text="getOutlineFromOpml (urlOpml, function (err, theOutline) {" created="Sun, 21 Aug 2022 17:44:05 GMT">
							<outline text="if (err) {" created="Sun, 21 Aug 2022 18:23:58 GMT">
								<outline text="callback (err);" created="Sun, 21 Aug 2022 18:24:00 GMT"/>
								<outline text="}" created="Sun, 21 Aug 2022 18:24:04 GMT"/>
								</outline>
							<outline text="else {" created="Sun, 21 Aug 2022 18:24:04 GMT">
								<outline text="const metadata = {cachekey: urlOpml}; //2/1/23 by DW" created="Wed, 01 Feb 2023 15:23:38 GMT"/>
								<outline text="var feedUrlList = new Array ();" created="Sun, 21 Aug 2022 17:58:14 GMT"/>
								<outline text="opml.visitAll (theOutline, function (node) {" created="Sat, 03 Jul 2021 19:31:57 GMT">
									<outline text="if (notComment (node)) {" created="Sat, 20 Aug 2022 14:11:54 GMT">
										<outline text="if (node.type == &quot;rss&quot;) {" created="Sun, 21 Aug 2022 18:00:29 GMT">
											<outline text="if (node.xmlUrl !== undefined) {" created="Sat, 20 Aug 2022 14:12:11 GMT">
												<outline text="feedUrlList.push (node.xmlUrl);" created="Mon, 08 Aug 2022 21:01:47 GMT"/>
												<outline text="}" created="Sat, 20 Aug 2022 14:12:16 GMT"/>
												</outline>
											<outline text="}" created="Sun, 21 Aug 2022 18:00:33 GMT"/>
											</outline>
										<outline text="}" created="Sat, 20 Aug 2022 14:11:56 GMT"/>
										</outline>
									<outline text="return (true); //keep visiting" created="Sat, 03 Jul 2021 19:32:47 GMT"/>
									<outline text="});" created="Sat, 03 Jul 2021 19:32:16 GMT"/>
									</outline>
								<outline text="metadata.feedUrlList = feedUrlList; " created="Thu, 02 Feb 2023 16:21:00 GMT"/>
								<outline text="getRiver (feedUrlList, undefined, function (err, river) {" created="Wed, 03 Aug 2022 13:22:02 GMT">
									<outline text="if (!err) {" created="Mon, 22 Aug 2022 12:41:50 GMT">
										<outline text="addToRiverCache (urlOpml, feedUrlList, river); //9/15/22 by DW" created="Thu, 15 Sep 2022 13:57:34 GMT"/>
										<outline text="}" created="Mon, 22 Aug 2022 12:42:05 GMT"/>
										</outline>
									<outline text="myConsoleLog (&quot;getRiverFromOpml: urlOpml == &quot; + urlOpml + &quot;, &quot; + utils.secondsSince (whenstart) + &quot; secs.&quot;);" created="Mon, 22 Aug 2022 12:43:30 GMT"/>
									<outline text="callback (err, river);" created="Mon, 22 Aug 2022 12:39:41 GMT"/>
									<outline text="}, metadata);" created="Mon, 22 Aug 2022 12:41:41 GMT"/>
									</outline>
								<outline text="}" created="Sun, 21 Aug 2022 18:24:06 GMT"/>
								</outline>
							<outline text="});" created="Sun, 21 Aug 2022 17:56:53 GMT"/>
							</outline>
						<outline text="}" created="Mon, 22 Aug 2022 12:41:11 GMT"/>
						</outline>
					<outline text="}" created="Sun, 21 Aug 2022 17:43:58 GMT"/>
					</outline>
				<outline text="" created="Sat, 03 Feb 2024 21:21:26 GMT"/>
				<outline text="function getListOfFeedIds (theSubscriptions) { //2/3/24 by DW" created="Sat, 03 Feb 2024 21:21:26 GMT">
					<outline text="Changes" isComment="true" created="Sat, 03 Feb 2024 21:22:23 GMT">
						<outline text="2/3/24; 4:22:26 PM by DW" created="Sat, 03 Feb 2024 21:22:25 GMT">
							<outline text="Return an array of feedUrl's or feedId's depending on the availability of IDs." created="Sat, 03 Feb 2024 21:22:26 GMT"/>
							</outline>
						</outline>
					<outline text="var theList = new Array ();" created="Tue, 06 Sep 2022 17:12:41 GMT"/>
					<outline text="theSubscriptions.forEach (function (sub) {" created="Tue, 06 Sep 2022 17:12:47 GMT">
						<outline text="if (config.flFeedsHaveIds &amp;&amp; config.flCanUseFeedIds) {" created="Sat, 03 Feb 2024 21:23:36 GMT">
							<outline text="theList.push (sub.feedId);" created="Tue, 06 Sep 2022 17:13:17 GMT"/>
							<outline text="}" created="Sat, 03 Feb 2024 21:23:44 GMT"/>
							</outline>
						<outline text="else {" created="Sat, 03 Feb 2024 21:23:45 GMT">
							<outline text="theList.push (sub.feedUrl);" created="Tue, 06 Sep 2022 17:13:17 GMT"/>
							<outline text="}" created="Sat, 03 Feb 2024 21:23:46 GMT"/>
							</outline>
						<outline text="});" created="Tue, 06 Sep 2022 17:13:03 GMT"/>
						</outline>
					<outline text="return (theList);" created="Sat, 03 Feb 2024 21:24:06 GMT"/>
					<outline text="}" created="Sat, 03 Feb 2024 21:22:13 GMT"/>
					</outline>
				<outline text="" created="Sat, 03 Feb 2024 21:21:26 GMT"/>
				<outline text="" created="Thu, 22 Feb 2024 16:10:48 GMT"/>
				<outline text="function getRiverFromAllCategory (screenname, callback) { //2/22/24 by DW" created="Thu, 22 Feb 2024 15:48:23 GMT">
					<outline text="Changes" isComment="true" created="Thu, 22 Feb 2024 15:48:40 GMT">
						<outline text="2/22/24; 10:48:44 AM by DW" created="Thu, 22 Feb 2024 15:48:43 GMT">
							<outline text="This is an experimental entry point. My All category takes too long to render as a river. " created="Thu, 22 Feb 2024 15:48:44 GMT"/>
							<outline text="So I'm going to build the river by only using the 200 most recently updated feeds. " created="Thu, 22 Feb 2024 15:49:07 GMT"/>
							<outline text="Let's see if that performs well enough to use!" created="Thu, 22 Feb 2024 15:49:23 GMT"/>
							<outline text="We don't cache the results for this query." created="Thu, 22 Feb 2024 15:55:03 GMT"/>
							</outline>
						</outline>
					<outline text="const catname = &quot;All&quot;, ctFeedLimit = 150;" created="Thu, 22 Feb 2024 15:49:44 GMT"/>
					<outline text="const cachekey = &quot;category:&quot; + screenname + &quot;/&quot; + catname, whenstart = new Date ();" created="Wed, 14 Sep 2022 20:00:02 GMT"/>
					<outline text="function getTheFeeds (screenname, catname, callback) {" created="Thu, 22 Feb 2024 15:49:45 GMT">
						<outline text="const catnameparam = davesql.encode (&quot;%,&quot; + catname + &quot;,%&quot;);" created="Tue, 21 Nov 2023 13:11:01 GMT"/>
						<outline text="const sqltext =  &quot;select s.* from subscriptions s join feeds f on s.feedUrl = f.feedUrl where s.listname = &quot; + davesql.encode (screenname) + &quot; and s.categories like &quot; + catnameparam + &quot; order by f.whenUpdated Desc limit &quot; + ctFeedLimit + &quot;;&quot;;" created="Thu, 22 Feb 2024 15:51:11 GMT"/>
						<outline text="davesql.runSqltext (sqltext, function (err, result) {">
							<outline text="if (err) {">
								<outline text="callback (err);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="callback (undefined, result);"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}" created="Thu, 22 Feb 2024 15:50:17 GMT"/>
						</outline>
					<outline text="getTheFeeds (screenname, catname, function (err, theSubscriptions) {" created="Tue, 06 Sep 2022 17:10:33 GMT">
						<outline text="if (err) {" created="Tue, 06 Sep 2022 17:11:07 GMT">
							<outline text="callback (err);" created="Tue, 06 Sep 2022 17:11:11 GMT"/>
							<outline text="}" created="Tue, 06 Sep 2022 17:11:14 GMT"/>
							</outline>
						<outline text="else {" created="Tue, 06 Sep 2022 17:11:15 GMT">
							<outline text="const feedUrlList = getListOfFeedIds (theSubscriptions);" created="Sat, 03 Feb 2024 21:24:52 GMT"/>
							<outline text="if (feedUrlList.length == 0) {" created="Wed, 21 Sep 2022 13:56:40 GMT">
								<outline text="let message = &quot;Can't get the river because there are no feeds in the \&quot;&quot; + catname + &quot;\&quot; category&quot;;" created="Wed, 21 Sep 2022 13:57:57 GMT"/>
								<outline text="callback ({message});" created="Tue, 06 Sep 2022 17:11:11 GMT"/>
								<outline text="}" created="Wed, 21 Sep 2022 13:57:11 GMT"/>
								</outline>
							<outline text="else {" created="Wed, 21 Sep 2022 13:57:11 GMT">
								<outline text="const metadata = {cachekey, feedUrlList}; //2/1/23 by DW" created="Wed, 01 Feb 2023 15:23:38 GMT"/>
								<outline text="getRiver (feedUrlList, undefined, function (err, river) {" created="Wed, 03 Aug 2022 13:22:02 GMT">
									<outline text="if (!err) {" created="Mon, 22 Aug 2022 12:41:50 GMT">
										<outline text="addToRiverCache (cachekey, feedUrlList, river); //9/15/22 by DW" created="Thu, 15 Sep 2022 13:57:34 GMT"/>
										<outline text="}" created="Mon, 22 Aug 2022 12:42:05 GMT"/>
										</outline>
									<outline text="myConsoleLog (&quot;getRiverFromAllCategory: cachekey == &quot; + cachekey + &quot;, &quot; + utils.secondsSince (whenstart) + &quot; secs.&quot;);" created="Mon, 22 Aug 2022 12:43:30 GMT"/>
									<outline text="callback (err, river);" created="Mon, 22 Aug 2022 12:39:41 GMT"/>
									<outline text="}, metadata);" created="Wed, 14 Sep 2022 19:58:42 GMT"/>
									</outline>
								<outline text="}" created="Wed, 21 Sep 2022 13:57:13 GMT"/>
								</outline>
							<outline text="}" created="Tue, 06 Sep 2022 17:11:18 GMT"/>
							</outline>
						<outline text="});" created="Tue, 06 Sep 2022 17:11:02 GMT"/>
						</outline>
					<outline text="}" created="Thu, 22 Feb 2024 15:48:40 GMT"/>
					</outline>
				<outline text="" created="Thu, 22 Feb 2024 16:10:50 GMT"/>
				<outline text="" created="Thu, 22 Feb 2024 16:10:50 GMT"/>
				<outline text="function getRiverFromCategory (screenname, catname, callback) {" created="Tue, 06 Sep 2022 17:09:10 GMT">
					<outline text="" created="Thu, 22 Feb 2024 16:06:23 GMT"/>
					<outline text="if ((screenname == &quot;davewiner&quot;) &amp;&amp; (catname == &quot;All&quot;)) { //2/22/24 by DW" isComment="true" created="Thu, 22 Feb 2024 16:06:23 GMT">
						<outline text="getRiverFromAllCategory (screenname, callback);" created="Thu, 22 Feb 2024 16:07:04 GMT"/>
						<outline text="return;" created="Thu, 22 Feb 2024 16:07:12 GMT"/>
						<outline text="}" created="Thu, 22 Feb 2024 16:06:51 GMT"/>
						</outline>
					<outline text="" created="Thu, 22 Feb 2024 16:06:24 GMT"/>
					<outline text="const cachekey = &quot;category:&quot; + screenname + &quot;/&quot; + catname, whenstart = new Date ();" created="Wed, 14 Sep 2022 20:00:02 GMT"/>
					<outline text="function getTheFeeds (screenname, catname, callback) {" created="Tue, 06 Sep 2022 16:44:13 GMT">
						<outline text="Changes" isComment="true" created="Thu, 15 Sep 2022 15:44:04 GMT">
							<outline text="11/21/23; 8:12:36 AM by DW" created="Tue, 21 Nov 2023 13:12:36 GMT">
								<outline text="We weren't encoding the catname param, leaving us open to security issues. " created="Tue, 21 Nov 2023 13:12:37 GMT"/>
								</outline>
							<outline text="11/5/22; 10:47:26 AM by DW" created="Sat, 05 Nov 2022 14:47:26 GMT">
								<outline text="Surrounded the catname with commas. " created="Sat, 05 Nov 2022 14:47:27 GMT">
									<outline text="https://github.com/scripting/feedlandServer/issues/17#issue-1434874863" created="Sat, 05 Nov 2022 14:47:43 GMT"/>
									</outline>
								</outline>
							<outline text="9/15/22; 11:44:08 AM by DW" created="Thu, 15 Sep 2022 15:44:06 GMT">
								<outline text="In a colossal fuckup this routine was defined outside getRiverFromCategory, and there already was a well-established function with the same name." created="Thu, 15 Sep 2022 15:44:08 GMT"/>
								</outline>
							</outline>
						<outline text="const catnameparam = davesql.encode (&quot;%,&quot; + catname + &quot;,%&quot;); //11/21/23 by DW" created="Tue, 21 Nov 2023 13:11:01 GMT"/>
						<outline text="const sqltext =  &quot;select * from subscriptions where listname=&quot; + davesql.encode (screenname) + &quot; and categories like &quot; + catnameparam + &quot;;&quot;;" created="Tue, 06 Sep 2022 16:51:30 GMT"/>
						<outline text="const sqltext =  &quot;select * from subscriptions where listname=&quot; + davesql.encode (screenname) + &quot; and categories like '%,&quot; + catname + &quot;,%';&quot;;" isComment="true" created="Tue, 06 Sep 2022 16:51:30 GMT"/>
						<outline text="const sqltext =  &quot;select * from subscriptions where listname=&quot; + davesql.encode (screenname) + &quot; and categories like '%&quot; + catname + &quot;%';&quot;;" isComment="true" created="Tue, 06 Sep 2022 16:51:30 GMT"/>
						<outline text="davesql.runSqltext (sqltext, function (err, result) {">
							<outline text="if (err) {">
								<outline text="callback (err);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="callback (undefined, result);"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}" created="Tue, 06 Sep 2022 16:45:18 GMT"/>
						</outline>
					<outline text="if (riverCache [cachekey] !== undefined) { //serve from cache" created="Mon, 22 Aug 2022 12:39:10 GMT">
						<outline text="myConsoleLog (&quot;getRiverFromCategory (serving from cache): cachekey == &quot; + cachekey);" created="Mon, 22 Aug 2022 12:43:30 GMT"/>
						<outline text="callback (undefined, riverCache [cachekey].river);" created="Mon, 22 Aug 2022 12:39:41 GMT"/>
						<outline text="}" created="Mon, 22 Aug 2022 12:39:23 GMT"/>
						</outline>
					<outline text="else {" created="Wed, 14 Sep 2022 20:03:12 GMT">
						<outline text="getTheFeeds (screenname, catname, function (err, theSubscriptions) {" created="Tue, 06 Sep 2022 17:10:33 GMT">
							<outline text="if (err) {" created="Tue, 06 Sep 2022 17:11:07 GMT">
								<outline text="callback (err);" created="Tue, 06 Sep 2022 17:11:11 GMT"/>
								<outline text="}" created="Tue, 06 Sep 2022 17:11:14 GMT"/>
								</outline>
							<outline text="else {" created="Tue, 06 Sep 2022 17:11:15 GMT">
								<outline text="const feedUrlList = getListOfFeedIds (theSubscriptions);" created="Sat, 03 Feb 2024 21:24:52 GMT"/>
								<outline text="var feedUrlList = new Array ();" isComment="true" created="Tue, 06 Sep 2022 17:12:41 GMT"/>
								<outline text="theSubscriptions.forEach (function (sub) {" isComment="true" created="Tue, 06 Sep 2022 17:12:47 GMT">
									<outline text="feedUrlList.push (sub.feedUrl);" created="Tue, 06 Sep 2022 17:13:17 GMT"/>
									<outline text="});" created="Tue, 06 Sep 2022 17:13:03 GMT"/>
									</outline>
								<outline text="if (feedUrlList.length == 0) {" created="Wed, 21 Sep 2022 13:56:40 GMT">
									<outline text="let message = &quot;Can't get the river because there are no feeds in the \&quot;&quot; + catname + &quot;\&quot; category&quot;;" created="Wed, 21 Sep 2022 13:57:57 GMT"/>
									<outline text="callback ({message});" created="Tue, 06 Sep 2022 17:11:11 GMT"/>
									<outline text="}" created="Wed, 21 Sep 2022 13:57:11 GMT"/>
									</outline>
								<outline text="else {" created="Wed, 21 Sep 2022 13:57:11 GMT">
									<outline text="const metadata = {cachekey, feedUrlList}; //2/1/23 by DW" created="Wed, 01 Feb 2023 15:23:38 GMT"/>
									<outline text="getRiver (feedUrlList, undefined, function (err, river) {" created="Wed, 03 Aug 2022 13:22:02 GMT">
										<outline text="if (!err) {" created="Mon, 22 Aug 2022 12:41:50 GMT">
											<outline text="addToRiverCache (cachekey, feedUrlList, river); //9/15/22 by DW" created="Thu, 15 Sep 2022 13:57:34 GMT"/>
											<outline text="}" created="Mon, 22 Aug 2022 12:42:05 GMT"/>
											</outline>
										<outline text="myConsoleLog (&quot;getRiverFromCategory: cachekey == &quot; + cachekey + &quot;, &quot; + utils.secondsSince (whenstart) + &quot; secs.&quot;);" created="Mon, 22 Aug 2022 12:43:30 GMT"/>
										<outline text="callback (err, river);" created="Mon, 22 Aug 2022 12:39:41 GMT"/>
										<outline text="}, metadata);" created="Wed, 14 Sep 2022 19:58:42 GMT"/>
										</outline>
									<outline text="}" created="Wed, 21 Sep 2022 13:57:13 GMT"/>
									</outline>
								<outline text="}" created="Tue, 06 Sep 2022 17:11:18 GMT"/>
								</outline>
							<outline text="});" created="Tue, 06 Sep 2022 17:11:02 GMT"/>
							</outline>
						<outline text="}" created="Wed, 14 Sep 2022 20:04:00 GMT"/>
						</outline>
					<outline text="}" created="Tue, 06 Sep 2022 17:10:12 GMT"/>
					</outline>
				<outline text="" created="Thu, 22 Feb 2024 15:48:24 GMT"/>
				<outline text="" created="Thu, 22 Feb 2024 15:48:24 GMT"/>
				<outline text="function getRiverFromScreenname (screenname, callback) { //4/25/23 by DW" created="Tue, 06 Sep 2022 17:09:10 GMT">
					<outline text="const cachekey = &quot;screenname:&quot; + screenname, whenstart = new Date ();" created="Wed, 14 Sep 2022 20:00:02 GMT"/>
					<outline text="function getTheFeeds (screenname, callback) {" created="Tue, 06 Sep 2022 16:44:13 GMT">
						<outline text="const sqltext =  &quot;select * from subscriptions where listname=&quot; + davesql.encode (screenname) + &quot;;&quot;;" created="Tue, 06 Sep 2022 16:51:30 GMT"/>
						<outline text="davesql.runSqltext (sqltext, function (err, result) {">
							<outline text="if (err) {">
								<outline text="callback (err);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="callback (undefined, result);"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}" created="Tue, 06 Sep 2022 16:45:18 GMT"/>
						</outline>
					<outline text="if (riverCache [cachekey] !== undefined) { //serve from cache" created="Mon, 22 Aug 2022 12:39:10 GMT">
						<outline text="myConsoleLog (&quot;getRiverFromScreenname (serving from cache): cachekey == &quot; + cachekey);" created="Mon, 22 Aug 2022 12:43:30 GMT"/>
						<outline text="callback (undefined, riverCache [cachekey].river);" created="Mon, 22 Aug 2022 12:39:41 GMT"/>
						<outline text="}" created="Mon, 22 Aug 2022 12:39:23 GMT"/>
						</outline>
					<outline text="else {" created="Wed, 14 Sep 2022 20:03:12 GMT">
						<outline text="getTheFeeds (screenname, function (err, theSubscriptions) {" created="Tue, 06 Sep 2022 17:10:33 GMT">
							<outline text="if (err) {" created="Tue, 06 Sep 2022 17:11:07 GMT">
								<outline text="callback (err);" created="Tue, 06 Sep 2022 17:11:11 GMT"/>
								<outline text="}" created="Tue, 06 Sep 2022 17:11:14 GMT"/>
								</outline>
							<outline text="else {" created="Tue, 06 Sep 2022 17:11:15 GMT">
								<outline text="var feedUrlList = new Array ();" created="Tue, 06 Sep 2022 17:12:41 GMT"/>
								<outline text="theSubscriptions.forEach (function (sub) {" created="Tue, 06 Sep 2022 17:12:47 GMT">
									<outline text="feedUrlList.push (sub.feedUrl);" created="Tue, 06 Sep 2022 17:13:17 GMT"/>
									<outline text="});" created="Tue, 06 Sep 2022 17:13:03 GMT"/>
									</outline>
								<outline text="if (feedUrlList.length == 0) {" created="Wed, 21 Sep 2022 13:56:40 GMT">
									<outline text="let message = &quot;Can't get the river because the user \&quot;&quot; + screenname + &quot;\&quot; isn't subscribed to any feeds.&quot;;" created="Wed, 21 Sep 2022 13:57:57 GMT"/>
									<outline text="callback ({message});" created="Tue, 06 Sep 2022 17:11:11 GMT"/>
									<outline text="}" created="Wed, 21 Sep 2022 13:57:11 GMT"/>
									</outline>
								<outline text="else {" created="Wed, 21 Sep 2022 13:57:11 GMT">
									<outline text="const metadata = {cachekey, feedUrlList}; //2/1/23 by DW" created="Wed, 01 Feb 2023 15:23:38 GMT"/>
									<outline text="getRiver (feedUrlList, undefined, function (err, river) {" created="Wed, 03 Aug 2022 13:22:02 GMT">
										<outline text="if (!err) {" created="Mon, 22 Aug 2022 12:41:50 GMT">
											<outline text="addToRiverCache (cachekey, feedUrlList, river); //9/15/22 by DW" created="Thu, 15 Sep 2022 13:57:34 GMT"/>
											<outline text="}" created="Mon, 22 Aug 2022 12:42:05 GMT"/>
											</outline>
										<outline text="myConsoleLog (&quot;getRiverFromCategory: cachekey == &quot; + cachekey + &quot;, &quot; + utils.secondsSince (whenstart) + &quot; secs.&quot;);" created="Mon, 22 Aug 2022 12:43:30 GMT"/>
										<outline text="callback (err, river);" created="Mon, 22 Aug 2022 12:39:41 GMT"/>
										<outline text="}, metadata);" created="Wed, 14 Sep 2022 19:58:42 GMT"/>
										</outline>
									<outline text="}" created="Wed, 21 Sep 2022 13:57:13 GMT"/>
									</outline>
								<outline text="}" created="Tue, 06 Sep 2022 17:11:18 GMT"/>
								</outline>
							<outline text="});" created="Tue, 06 Sep 2022 17:11:02 GMT"/>
							</outline>
						<outline text="}" created="Wed, 14 Sep 2022 20:04:00 GMT"/>
						</outline>
					<outline text="}" created="Tue, 06 Sep 2022 17:10:12 GMT"/>
					</outline>
				<outline text="function getRiverFromEverything (callback) { //10/14/22 by DW" created="Fri, 14 Oct 2022 13:30:16 GMT">
					<outline text="Changes" isComment="true" created="Fri, 14 Oct 2022 13:37:59 GMT">
						<outline text="10/14/22; 9:38:05 AM by DW" created="Fri, 14 Oct 2022 13:38:03 GMT">
							<outline text="The everything river contains items from every feed anyone is subscribed to." created="Fri, 14 Oct 2022 13:38:06 GMT"/>
							</outline>
						</outline>
					<outline text="const cachekey = &quot;everything&quot;;" created="Wed, 14 Sep 2022 20:00:02 GMT"/>
					<outline text="if (riverCache [cachekey] !== undefined) { //serve from cache">
						<outline text="callback (undefined, riverCache [cachekey].river);" created="Mon, 22 Aug 2022 12:39:41 GMT"/>
						<outline text="}" created="Mon, 22 Aug 2022 12:39:23 GMT"/>
						</outline>
					<outline text="else {" created="Fri, 14 Oct 2022 13:31:24 GMT">
						<outline text="const metadata = {cachekey: &quot;everything&quot;}; //2/1/23 by DW" created="Wed, 01 Feb 2023 15:23:38 GMT"/>
						<outline text="getRiver (undefined, undefined, function (err, river) {" created="Fri, 14 Oct 2022 13:32:24 GMT">
							<outline text="if (!err) {" created="Mon, 22 Aug 2022 12:41:50 GMT">
								<outline text="addToRiverCache (cachekey, undefined, river); " created="Thu, 15 Sep 2022 13:57:34 GMT"/>
								<outline text="}" created="Mon, 22 Aug 2022 12:42:05 GMT"/>
								</outline>
							<outline text="callback (err, river);" created="Mon, 22 Aug 2022 12:39:41 GMT"/>
							<outline text="}, metadata);" created="Fri, 14 Oct 2022 13:32:44 GMT"/>
							</outline>
						<outline text="}" created="Fri, 14 Oct 2022 13:31:27 GMT"/>
						</outline>
					<outline text="}" created="Fri, 14 Oct 2022 13:30:26 GMT"/>
					</outline>
				<outline text="function getRiverFromHotlist (callback) { //10/15/22 by DW" created="Fri, 14 Oct 2022 13:30:16 GMT">
					<outline text="Changes" isComment="true" created="Fri, 14 Oct 2022 13:37:59 GMT">
						<outline text="10/15/22; 10:01:09 AM by DW" created="Fri, 14 Oct 2022 13:38:03 GMT">
							<outline text="The hotlist river contains items from every feed in the hotlist." created="Fri, 14 Oct 2022 13:38:06 GMT"/>
							</outline>
						</outline>
					<outline text="const cachekey = &quot;hotlist&quot;;" created="Wed, 14 Sep 2022 20:00:02 GMT"/>
					<outline text="if (riverCache [cachekey] !== undefined) { //serve from cache">
						<outline text="callback (undefined, riverCache [cachekey].river);" created="Mon, 22 Aug 2022 12:39:41 GMT"/>
						<outline text="}" created="Mon, 22 Aug 2022 12:39:23 GMT"/>
						</outline>
					<outline text="else {" created="Fri, 14 Oct 2022 13:31:24 GMT">
						<outline text="getHotlist (function (err, theHotlist) {" created="Sat, 15 Oct 2022 14:01:48 GMT">
							<outline text="if (err) {" created="Sat, 15 Oct 2022 14:02:03 GMT">
								<outline text="callback (err);" created="Sat, 15 Oct 2022 14:02:05 GMT"/>
								<outline text="}" created="Sat, 15 Oct 2022 14:02:08 GMT"/>
								</outline>
							<outline text="else {" created="Sat, 15 Oct 2022 14:02:09 GMT">
								<outline text="var feedUrlList = new Array ();" created="Tue, 06 Sep 2022 17:12:41 GMT"/>
								<outline text="theHotlist.forEach (function (item) {" created="Tue, 06 Sep 2022 17:12:47 GMT">
									<outline text="feedUrlList.push (item.feedUrl);" created="Tue, 06 Sep 2022 17:13:17 GMT"/>
									<outline text="});" created="Tue, 06 Sep 2022 17:13:03 GMT"/>
									</outline>
								<outline text="if (feedUrlList.length == 0) {" created="Wed, 21 Sep 2022 13:56:40 GMT">
									<outline text="let message = &quot;Can't get the river because there are no feeds in the hotlist.&quot;;" created="Wed, 21 Sep 2022 13:57:57 GMT"/>
									<outline text="callback ({message});" created="Tue, 06 Sep 2022 17:11:11 GMT"/>
									<outline text="}" created="Wed, 21 Sep 2022 13:57:11 GMT"/>
									</outline>
								<outline text="else {" created="Wed, 21 Sep 2022 13:57:11 GMT">
									<outline text="const metadata = {cachekey, feedUrlList}; //2/1/23 by DW" created="Wed, 01 Feb 2023 15:23:38 GMT"/>
									<outline text="getRiver (feedUrlList, undefined, function (err, river) {" created="Wed, 03 Aug 2022 13:22:02 GMT">
										<outline text="if (!err) {" created="Mon, 22 Aug 2022 12:41:50 GMT">
											<outline text="addToRiverCache (cachekey, feedUrlList, river); " created="Thu, 15 Sep 2022 13:57:34 GMT"/>
											<outline text="}" created="Mon, 22 Aug 2022 12:42:05 GMT"/>
											</outline>
										<outline text="callback (err, river);" created="Mon, 22 Aug 2022 12:39:41 GMT"/>
										<outline text="}, metadata);" created="Wed, 14 Sep 2022 19:58:42 GMT"/>
										</outline>
									<outline text="}" created="Wed, 21 Sep 2022 13:57:13 GMT"/>
									</outline>
								<outline text="}" created="Sat, 15 Oct 2022 14:02:12 GMT"/>
								</outline>
							<outline text="});" created="Sat, 15 Oct 2022 14:01:58 GMT"/>
							</outline>
						<outline text="}" created="Fri, 14 Oct 2022 13:31:27 GMT"/>
						</outline>
					<outline text="}" created="Fri, 14 Oct 2022 13:30:26 GMT"/>
					</outline>
				<outline text="function getRiverFromUserFeeds (callback) { //12/3/22 by DW" created="Sun, 04 Dec 2022 02:06:17 GMT">
					<outline text="Changes" isComment="true" created="Sat, 10 Dec 2022 00:45:49 GMT">
						<outline text="1/13/23; 10:50:15 AM by DW" created="Fri, 13 Jan 2023 15:50:15 GMT">
							<outline text="Don't hard-code data.feedland.org." created="Fri, 13 Jan 2023 15:50:16 GMT"/>
							</outline>
						<outline text="12/9/22; 7:45:53 PM by DW" created="Sat, 10 Dec 2022 00:45:51 GMT">
							<outline text="It didn't take long before the new feature was spammed. So I had to start with blocking. Not a surprise." created="Sat, 10 Dec 2022 00:45:54 GMT"/>
							</outline>
						</outline>
					<outline text="const cachekey = &quot;userfeeds&quot;;" created="Wed, 14 Sep 2022 20:00:02 GMT"/>
					<outline text="function notBlockedUser (feedUrl) { //12/9/22 by DW" created="Sat, 10 Dec 2022 00:42:48 GMT">
						<outline text="var flblocked = false;" created="Sat, 10 Dec 2022 00:43:42 GMT"/>
						<outline text="config.blockedUsers.forEach (function (screenname) {" created="Sat, 10 Dec 2022 00:43:42 GMT">
							<outline text="if (utils.endsWith (feedUrl, screenname)) {" created="Sat, 10 Dec 2022 00:44:00 GMT">
								<outline text="flblocked = true;" created="Sat, 10 Dec 2022 00:44:47 GMT"/>
								<outline text="}" created="Sat, 10 Dec 2022 00:44:50 GMT"/>
								</outline>
							<outline text="});" created="Sat, 10 Dec 2022 00:43:56 GMT"/>
							</outline>
						<outline text="return (!flblocked);" created="Sat, 10 Dec 2022 00:43:42 GMT"/>
						<outline text="}" created="Sat, 10 Dec 2022 00:42:55 GMT"/>
						</outline>
					<outline text="if (riverCache [cachekey] !== undefined) { //serve from cache" created="Sun, 04 Dec 2022 02:12:16 GMT">
						<outline text="callback (undefined, riverCache [cachekey].river);" created="Mon, 22 Aug 2022 12:39:41 GMT"/>
						<outline text="}" created="Sun, 04 Dec 2022 02:12:23 GMT"/>
						</outline>
					<outline text="else {" created="Sun, 04 Dec 2022 02:12:24 GMT">
						<outline text="const sqltext = &quot;select feedUrl from feeds where feedurl like '&quot; + config.urlForFeeds + &quot;%'&quot;; //1/13/23 by DW" created="Sun, 04 Dec 2022 02:06:48 GMT"/>
						<outline text="const sqltext = &quot;select feedUrl from feeds where feedurl like 'http://data.feedland.org/feeds/%'&quot;;" isComment="true" created="Sun, 04 Dec 2022 02:06:48 GMT"/>
						<outline text="davesql.runSqltext (sqltext, function (err, result) {">
							<outline text="if (err) {">
								<outline text="callback (err);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="var feedUrlList = new Array ();" created="Tue, 06 Sep 2022 17:12:41 GMT"/>
								<outline text="result.forEach (function (item) {" created="Sun, 04 Dec 2022 02:08:49 GMT">
									<outline text="if (notBlockedUser (item.feedUrl)) { //12/9/22 by DW" created="Sat, 10 Dec 2022 00:42:15 GMT">
										<outline text="feedUrlList.push (item.feedUrl);" created="Tue, 06 Sep 2022 17:13:17 GMT"/>
										<outline text="}" created="Sat, 10 Dec 2022 00:42:26 GMT"/>
										</outline>
									<outline text="});" created="Sun, 04 Dec 2022 02:08:59 GMT"/>
									</outline>
								<outline text="if (feedUrlList.length == 0) {" created="Wed, 21 Sep 2022 13:56:40 GMT">
									<outline text="let message = &quot;Can't get the river because there are no users with feeds in the database.&quot;; //not likely! ;-)" created="Wed, 21 Sep 2022 13:57:57 GMT"/>
									<outline text="callback ({message});" created="Tue, 06 Sep 2022 17:11:11 GMT"/>
									<outline text="}" created="Wed, 21 Sep 2022 13:57:11 GMT"/>
									</outline>
								<outline text="else {" created="Wed, 21 Sep 2022 13:57:11 GMT">
									<outline text="const metadata = {cachekey, feedUrlList}; //2/1/23 by DW" created="Wed, 01 Feb 2023 15:23:38 GMT"/>
									<outline text="getRiver (feedUrlList, undefined, function (err, river) {" created="Wed, 03 Aug 2022 13:22:02 GMT">
										<outline text="if (!err) {" created="Mon, 22 Aug 2022 12:41:50 GMT">
											<outline text="addToRiverCache (cachekey, feedUrlList, river); " created="Thu, 15 Sep 2022 13:57:34 GMT"/>
											<outline text="}" created="Mon, 22 Aug 2022 12:42:05 GMT"/>
											</outline>
										<outline text="callback (err, river);" created="Mon, 22 Aug 2022 12:39:41 GMT"/>
										<outline text="}, metadata);" created="Wed, 14 Sep 2022 19:58:42 GMT"/>
										</outline>
									<outline text="}" created="Wed, 21 Sep 2022 13:57:13 GMT"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}" created="Sun, 04 Dec 2022 02:12:27 GMT"/>
						</outline>
					<outline text="}" created="Sun, 04 Dec 2022 02:06:35 GMT"/>
					</outline>
				<outline text="" created="Sun, 12 Nov 2023 15:12:21 GMT"/>
				<outline text="function getRiverFromReadingList (opmlUrl, callback) { //11/12/23 by DW" created="Sun, 12 Nov 2023 15:12:21 GMT">
					<outline text="Changes" isComment="true" created="Sun, 12 Nov 2023 15:24:08 GMT">
						<outline text="11/12/23; 10:24:11 AM by DW" created="Sun, 12 Nov 2023 15:24:10 GMT">
							<outline text="We have to have the reading list in our database in order to get a river derived from it" created="Sun, 12 Nov 2023 15:24:11 GMT"/>
							</outline>
						</outline>
					<outline text="isReadingListInDatabase (opmlUrl, function (flInDatabase, listRec) {" created="Tue, 29 Mar 2022 19:29:53 GMT">
						<outline text="if (flInDatabase) {" created="Tue, 29 Mar 2022 19:30:01 GMT">
							<outline text="getRiverFromList (listRec.feedUrls, callback);" created="Sun, 12 Nov 2023 15:23:17 GMT"/>
							<outline text="}" created="Tue, 29 Mar 2022 19:30:08 GMT"/>
							</outline>
						<outline text="else {" created="Fri, 27 May 2022 14:18:20 GMT">
							<outline text="const message = &quot;Can't get river from the reading list because it isn't in our database.&quot;;" created="Sun, 12 Nov 2023 15:13:48 GMT"/>
							<outline text="callback ({message});" created="Sun, 12 Nov 2023 15:14:31 GMT"/>
							<outline text="}" created="Fri, 27 May 2022 14:18:21 GMT"/>
							</outline>
						<outline text="});" created="Tue, 29 Mar 2022 19:29:54 GMT"/>
						</outline>
					<outline text="}" created="Sun, 12 Nov 2023 15:12:59 GMT"/>
					</outline>
				<outline text="" created="Tue, 06 Sep 2022 17:09:11 GMT"/>
				<outline text="function getFollowers (feedUrl, callback) { //users who follow the feed -- 5/18/22 by DW">
					<outline text="const sqltext = &quot;select listName from subscriptions where feedUrl=&quot; + davesql.encode (feedUrl) + &quot;;&quot;;"/>
					<outline text="davesql.runSqltext (sqltext, function (err, result) {">
						<outline text="if (err) {">
							<outline text="callback (err);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="var userarray = new Array ();"/>
							<outline text="if (result !== undefined) { //4/17/18 by DW">
								<outline text="result.forEach (function (item) {" created="Wed, 18 May 2022 15:49:18 GMT">
									<outline text="userarray.push (item.listName);"/>
									<outline text="});" created="Wed, 18 May 2022 15:49:26 GMT"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="callback (undefined, userarray);"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function isUserSubscribed (feedUrl, screenname, urlReadingList, callback) { //5/18/22 by DW">
					<outline text="Changes" isComment="true" created="Tue, 06 Sep 2022 15:38:02 GMT">
						<outline text="10/23/23; 12:49:38 PM by DW" created="Mon, 23 Oct 2023 16:49:38 GMT">
							<outline text="New optional param, urlReadingList." created="Mon, 23 Oct 2023 16:49:38 GMT"/>
							</outline>
						<outline text="9/6/22; 11:38:05 AM by DW" created="Tue, 06 Sep 2022 15:38:04 GMT">
							<outline text="Support for categories." created="Tue, 06 Sep 2022 15:38:05 GMT"/>
							</outline>
						</outline>
					<outline text="if (urlReadingList === undefined) { " created="Mon, 23 Oct 2023 16:51:06 GMT">
						<outline text="urlReadingList = &quot;&quot;;" created="Mon, 23 Oct 2023 16:51:17 GMT"/>
						<outline text="}" created="Mon, 23 Oct 2023 16:51:20 GMT"/>
						</outline>
					<outline text="var readingListClause = &quot;&quot;;" created="Mon, 23 Oct 2023 17:04:31 GMT"/>
					<outline text="if (urlReadingList.length &gt; 0) {" created="Mon, 23 Oct 2023 17:15:33 GMT">
						<outline text="readingListClause = &quot; and urlReadingList=&quot; + davesql.encode (urlReadingList);" created="Mon, 23 Oct 2023 17:15:43 GMT"/>
						<outline text="}" created="Mon, 23 Oct 2023 17:15:42 GMT"/>
						</outline>
					<outline text="const sqltext = &quot;select * from subscriptions where listName=&quot; + davesql.encode (screenname) + &quot; and feedUrl=&quot; + davesql.encode (feedUrl) + readingListClause + &quot;;&quot;;"/>
					<outline text="davesql.runSqltext (sqltext, function (err, result) {">
						<outline text="if (err) {">
							<outline text="callback (false);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="const jstruct = {" created="Wed, 18 May 2022 16:11:29 GMT">
								<outline text="flSubscribed: false" created="Wed, 18 May 2022 16:13:13 GMT"/>
								<outline text="}" created="Wed, 18 May 2022 16:13:24 GMT"/>
								</outline>
							<outline text="if (result.length &gt; 0) {">
								<outline text="jstruct.flSubscribed = true;" created="Wed, 18 May 2022 16:12:13 GMT"/>
								<outline text="jstruct.theSubscription = convertCategories (result [0]);" created="Wed, 18 May 2022 16:12:50 GMT"/>
								<outline text="}"/>
								</outline>
							<outline text="callback (undefined, jstruct);" created="Wed, 18 May 2022 16:14:00 GMT"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function addFeedToUserFeedsOpmlFile (screenname, feedRec, callback) {" created="Sat, 28 May 2022 17:35:00 GMT">
					<outline text="Changes" isComment="true" created="Sat, 28 May 2022 17:35:42 GMT">
						<outline text="7/3/22; 1:08:43 PM by DW" created="Sun, 03 Jul 2022 17:08:43 GMT">
							<outline text="Disabled. We're no longer using the outliner to edit the feed list, so we don't try to maintain feeds.opml file. " created="Sun, 03 Jul 2022 17:08:43 GMT"/>
							</outline>
						<outline text="5/28/22; 1:35:45 PM by DW" created="Sat, 28 May 2022 17:35:44 GMT">
							<outline text="Each user has a feeds.opml file that they can edit in an outliner. " created="Sat, 28 May 2022 17:35:45 GMT"/>
							<outline text="They have just subscribed to a feed. " created="Sat, 28 May 2022 17:36:02 GMT"/>
							<outline text="If the user does not have a feeds.opml file, create it. " created="Sat, 28 May 2022 17:36:21 GMT"/>
							<outline text="If they have one, be sure this feed is in the outline, if not, add it at the top." created="Sat, 28 May 2022 17:36:23 GMT"/>
							</outline>
						</outline>
					<outline text="if (config.flMaintainFeedsOpml) {" created="Sun, 03 Jul 2022 17:09:15 GMT">
						<outline text="const relpath = &quot;feeds.opml&quot;;" created="Sat, 28 May 2022 18:57:30 GMT"/>
						<outline text="const nowstring = new Date ().toGMTString ();" created="Fri, 11 Mar 2022 15:47:58 GMT"/>
						<outline text="function saveOutline (theOutline) {" created="Sat, 28 May 2022 19:08:02 GMT">
							<outline text="var opmltext = opml.stringify (theOutline);" created="Sat, 28 May 2022 19:11:40 GMT"/>
							<outline text="config.writeWholeFile (screenname, relpath, opmltext, callback);" created="Sat, 28 May 2022 19:11:09 GMT"/>
							<outline text="}" created="Sat, 28 May 2022 19:08:13 GMT"/>
							</outline>
						<outline text="function createOutline () {" created="Sat, 28 May 2022 19:12:33 GMT">
							<outline text="config.getUserOpmlSubscriptions (screenname, undefined, function (err, opmltext) {" created="Fri, 20 May 2022 13:59:30 GMT">
								<outline text="if (err) {" created="Sat, 28 May 2022 19:14:36 GMT">
									<outline text="callback (err);" created="Sat, 28 May 2022 19:14:38 GMT"/>
									<outline text="}" created="Sat, 28 May 2022 19:14:42 GMT"/>
									</outline>
								<outline text="else {" created="Sat, 28 May 2022 19:14:42 GMT">
									<outline text="config.writeWholeFile (screenname, relpath, opmltext, callback);" created="Sat, 28 May 2022 19:11:09 GMT"/>
									<outline text="}" created="Sat, 28 May 2022 19:14:44 GMT"/>
									</outline>
								<outline text="});" created="Sat, 28 May 2022 19:14:26 GMT"/>
								</outline>
							<outline text="}" created="Sat, 28 May 2022 19:12:41 GMT"/>
							</outline>
						<outline text="config.readWholeFile (screenname, relpath, function (err, data) {" created="Sat, 28 May 2022 18:56:30 GMT">
							<outline text="if (err) { //it doesn't exist" created="Sat, 28 May 2022 18:59:43 GMT">
								<outline text="createOutline ();" created="Sat, 28 May 2022 19:07:43 GMT"/>
								<outline text="}" created="Sat, 28 May 2022 18:59:52 GMT"/>
								</outline>
							<outline text="else {" created="Sat, 28 May 2022 18:59:53 GMT">
								<outline text="opml.parse (data.filetext, function (err, theOutline) {">
									<outline text="if (err) {">
										<outline text="createOutline ();" created="Sat, 28 May 2022 19:07:43 GMT"/>
										<outline text="}"/>
										</outline>
									<outline text="else {" created="Sat, 28 May 2022 19:02:01 GMT">
										<outline text="theOutline.opml.body.subs.unshift ({ //insert as new first item" created="Sat, 28 May 2022 19:02:11 GMT">
											<outline text="text: feedRec.title," created="Sat, 12 Mar 2022 16:24:31 GMT"/>
											<outline text="type: &quot;rss&quot;," created="Sat, 12 Mar 2022 16:26:35 GMT"/>
											<outline text="created: nowstring," created="Sat, 12 Mar 2022 16:28:01 GMT"/>
											<outline text="xmlUrl: feedRec.feedUrl," created="Sat, 12 Mar 2022 16:26:19 GMT"/>
											<outline text="htmlUrl: feedRec.link," created="Sat, 12 Mar 2022 16:26:19 GMT"/>
											<outline text="description: feedRec.description" created="Sat, 12 Mar 2022 16:24:31 GMT"/>
											<outline text="});" created="Sat, 28 May 2022 19:02:20 GMT"/>
											</outline>
										<outline text="saveOutline (theOutline);" created="Sat, 28 May 2022 19:07:19 GMT"/>
										<outline text="}" created="Sat, 28 May 2022 19:02:03 GMT"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="}" created="Sat, 28 May 2022 18:59:55 GMT"/>
								</outline>
							<outline text="});" created="Sat, 28 May 2022 18:58:17 GMT"/>
							</outline>
						<outline text="}" created="Sun, 03 Jul 2022 17:09:25 GMT"/>
						</outline>
					<outline text="else {" created="Sun, 03 Jul 2022 17:23:04 GMT">
						<outline text="callback (); //7/3/22 by DW" created="Sun, 03 Jul 2022 17:23:06 GMT"/>
						<outline text="}" created="Sun, 03 Jul 2022 17:23:09 GMT"/>
						</outline>
					<outline text="}" created="Sat, 28 May 2022 17:35:39 GMT"/>
					</outline>
				<outline text="function countNewSubscriptions (screenname, callback) { //7/20/22 by DW" created="Wed, 20 Jul 2022 15:10:20 GMT">
					<outline text="Changes" isComment="true" created="Wed, 20 Jul 2022 15:12:28 GMT">
						<outline text="7/20/22; 11:12:30 AM by DW" created="Wed, 20 Jul 2022 15:12:29 GMT">
							<outline text="Call back with the number of new subscriptions the user has created." created="Wed, 20 Jul 2022 15:12:31 GMT"/>
							</outline>
						</outline>
					<outline text="const sqltext = &quot;select count(*) as theCount from feeds where whoFirstSubscribed = &quot; + davesql.encode (screenname) + &quot;;&quot;;"/>
					<outline text="davesql.runSqltext (sqltext, function (err, result) {">
						<outline text="if (err) {">
							<outline text="callback (err);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="callback (undefined, result [0].theCount);"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}" created="Wed, 20 Jul 2022 15:10:36 GMT"/>
					</outline>
				<outline text="function subscribeToFeed (screenname, feedUrl, callback) {" created="Fri, 27 May 2022 14:12:38 GMT">
					<outline text="Changes" isComment="true" created="Fri, 27 May 2022 14:50:32 GMT">
						<outline text="10/20/23; 10:04:25 AM by DW" created="Fri, 20 Oct 2023 14:04:25 GMT">
							<outline text="Check the feedUrl, if it's a valid feed, pass it through. Otherwise, check for HTML text with a &lt;link&gt; element that points to either an RSS or Atom feed. " created="Fri, 20 Oct 2023 14:04:26 GMT"/>
							</outline>
						<outline text="10/14/22; 4:43:49 PM by DW" created="Fri, 14 Oct 2022 20:43:48 GMT">
							<outline text="Allow for per-user overrides for max new subs with new config.maxSubsExceptions object. " created="Fri, 14 Oct 2022 20:43:49 GMT"/>
							</outline>
						<outline text="9/13/22; 11:49:27 AM by DW" created="Tue, 13 Sep 2022 15:49:27 GMT">
							<outline text="Instead of returning a raw feedRec, convert it to the external format." created="Tue, 13 Sep 2022 15:49:28 GMT"/>
							</outline>
						<outline text="8/31/22; 8:46:40 AM by DW" created="Wed, 31 Aug 2022 12:46:40 GMT">
							<outline text="When a feed is first subscribed to its ctSubs value should be 1, it was being set to 0." created="Wed, 31 Aug 2022 12:46:41 GMT"/>
							</outline>
						<outline text="8/19/22; 11:10:42 AM by DW" created="Fri, 19 Aug 2022 15:10:41 GMT">
							<outline text="Subscribing to feeds is too slow. Trying an experiment, calling back before we check each of the items in the feed." created="Fri, 19 Aug 2022 15:10:42 GMT"/>
							</outline>
						<outline text="7/13/22; 11:14:48 AM by DW" created="Wed, 13 Jul 2022 15:14:47 GMT">
							<outline text="Initial ctItems for new feeds." created="Wed, 13 Jul 2022 15:14:48 GMT"/>
							</outline>
						<outline text="5/27/22; 10:50:36 AM by DW" created="Fri, 27 May 2022 14:50:35 GMT">
							<outline text="This is the way new feeds enter the database." created="Fri, 27 May 2022 14:50:36 GMT"/>
							</outline>
						</outline>
					<outline text="function checkFeedUrl (feedUrl, callback) { //10/20/23 by DW" created="Fri, 20 Oct 2023 13:39:22 GMT">
						<outline text="Changes" isComment="true" created="Fri, 20 Oct 2023 13:39:55 GMT">
							<outline text="11/8/23; 3:03:37 PM by DW" created="Wed, 08 Nov 2023 20:03:36 GMT">
								<outline text="Use feedhunter, a new package that not only looks in the metadata of the HTML files, but tries certain common locations where feeds can be found." created="Wed, 08 Nov 2023 20:03:37 GMT"/>
								</outline>
							<outline text="10/20/23; 9:39:59 AM by DW" created="Fri, 20 Oct 2023 13:39:58 GMT">
								<outline text="Make sure the url points to a feed we can read as a feed." created="Fri, 20 Oct 2023 13:40:06 GMT"/>
								<outline text="If not, look for metadata in the source that might point to a feed. " created="Fri, 20 Oct 2023 13:40:20 GMT"/>
								<outline text="I used ChatGPT to write the regex that finds the link to feeds in html text." created="Fri, 20 Oct 2023 14:00:20 GMT">
									<outline text="https://chat.openai.com/share/ea3f5c66-a5fc-432e-8fb1-e989c4c6cd80"/>
									</outline>
								</outline>
							</outline>
						<outline text="function findFeedsFromHTML (html) {">
							<outline text="const regex = /&lt;link[^&gt;]+type=&quot;application\/(?:rss\+xml|atom\+xml)&quot;[^&gt;]+href=&quot;([^&quot;]+)&quot;[^&gt;]*&gt;/g;"/>
							<outline text="let match;"/>
							<outline text="const feeds = [];"/>
							<outline text="while ((match = regex.exec(html)) !== null) {">
								<outline text="feeds.push(match[1]);"/>
								<outline text="}"/>
								</outline>
							<outline text="return feeds;"/>
							<outline text="}"/>
							</outline>
						<outline text="reallysimple.readFeed (feedUrl, function (err, theFeed) {" created="Sat, 19 Mar 2022 15:14:01 GMT">
							<outline text="if (err) {" created="Sat, 19 Mar 2022 15:15:11 GMT">
								<outline text="feedhunter.huntForFeed (feedUrl, undefined, function (foundFeedUrl) {" created="Wed, 08 Nov 2023 15:05:07 GMT">
									<outline text="if (foundFeedUrl === undefined) { //no feed found -- 11/8/23 by DW" created="Wed, 08 Nov 2023 20:00:44 GMT">
										<outline text="const message = &quot;Can't subscribe because no feed was found.&quot;;" created="Wed, 08 Nov 2023 20:01:22 GMT"/>
										<outline text="callback ({message});"/>
										<outline text="}" created="Wed, 08 Nov 2023 20:01:01 GMT"/>
										</outline>
									<outline text="else {" created="Wed, 08 Nov 2023 20:01:02 GMT">
										<outline text="callback (undefined, foundFeedUrl);" created="Fri, 20 Oct 2023 13:59:27 GMT"/>
										<outline text="}" created="Wed, 08 Nov 2023 20:01:04 GMT"/>
										</outline>
									<outline text="});" created="Wed, 08 Nov 2023 15:05:42 GMT"/>
									</outline>
								<outline text="httpReadUrl (feedUrl, function (err, htmltext) {" isComment="true">
									<outline text="if (err) {">
										<outline text="callback (err);"/>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="var feedlist = findFeedsFromHTML (htmltext);"/>
										<outline text="if (feedlist.length == 0) {" created="Fri, 20 Oct 2023 13:58:40 GMT">
											<outline text="const message = &quot;Can't find any feeds in the HTML text.&quot;;" created="Fri, 20 Oct 2023 13:58:56 GMT"/>
											<outline text="callback ({message});"/>
											<outline text="}" created="Fri, 20 Oct 2023 13:58:48 GMT"/>
											</outline>
										<outline text="else {" created="Fri, 20 Oct 2023 13:58:49 GMT">
											<outline text="callback (undefined, feedlist [0]);" created="Fri, 20 Oct 2023 13:59:27 GMT"/>
											<outline text="}" created="Fri, 20 Oct 2023 13:58:51 GMT"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="}" created="Sat, 19 Mar 2022 15:15:20 GMT"/>
								</outline>
							<outline text="else {" created="Fri, 20 Oct 2023 14:12:20 GMT">
								<outline text="callback (undefined, feedUrl);" created="Fri, 20 Oct 2023 14:12:23 GMT"/>
								<outline text="}" created="Fri, 20 Oct 2023 14:12:30 GMT"/>
								</outline>
							<outline text="});" created="Sat, 19 Mar 2022 15:15:01 GMT"/>
							</outline>
						<outline text="}" created="Fri, 20 Oct 2023 13:39:40 GMT"/>
						</outline>
					<outline text="function checkMaxSubs (theCount, callback) { //10/14/22 by DW" created="Fri, 14 Oct 2022 20:39:31 GMT">
						<outline text="if (theCount &lt; config.maxNewFeedSubscriptions) {" created="Fri, 14 Oct 2022 20:40:12 GMT">
							<outline text="callback (true, config.maxNewFeedSubscriptions); " created="Fri, 14 Oct 2022 20:40:26 GMT"/>
							<outline text="}" created="Fri, 14 Oct 2022 20:40:18 GMT"/>
							</outline>
						<outline text="else {" created="Fri, 14 Oct 2022 20:40:36 GMT">
							<outline text="let flcalledback = false;" created="Fri, 14 Oct 2022 21:46:45 GMT"/>
							<outline text="if (config.maxSubsExceptions !== undefined) {" created="Fri, 14 Oct 2022 21:43:46 GMT">
								<outline text="if (config.maxSubsExceptions [screenname] !== undefined) {" created="Fri, 14 Oct 2022 21:44:27 GMT">
									<outline text="let usermax = config.maxSubsExceptions [screenname];" created="Fri, 14 Oct 2022 21:47:15 GMT"/>
									<outline text="callback (theCount &lt; usermax, usermax); " created="Fri, 14 Oct 2022 20:40:26 GMT"/>
									<outline text="flcalledback = true;" created="Fri, 14 Oct 2022 21:45:58 GMT"/>
									<outline text="}" created="Fri, 14 Oct 2022 21:44:36 GMT"/>
									</outline>
								<outline text="}" created="Fri, 14 Oct 2022 21:44:03 GMT"/>
								</outline>
							<outline text="if (!flcalledback) {" created="Fri, 14 Oct 2022 21:46:07 GMT">
								<outline text="callback (false, config.maxNewFeedSubscriptions); " created="Fri, 14 Oct 2022 20:40:26 GMT"/>
								<outline text="}" created="Fri, 14 Oct 2022 21:46:13 GMT"/>
								</outline>
							<outline text="}" created="Fri, 14 Oct 2022 20:40:39 GMT"/>
							</outline>
						<outline text="}" created="Fri, 14 Oct 2022 20:39:50 GMT"/>
						</outline>
					<outline text="checkFeedUrl (feedUrl, function (err, feedUrl) { //10/20/23 by DW" created="Fri, 20 Oct 2023 14:03:34 GMT">
						<outline text="isFeedInDatabase (feedUrl, function (flInDatabase, feedRec) {" created="Tue, 29 Mar 2022 19:29:53 GMT">
							<outline text="if (flInDatabase) {" created="Tue, 29 Mar 2022 19:30:01 GMT">
								<outline text="isUserSubscribed (feedUrl, screenname, undefined, function (err, jstruct) {" created="Fri, 27 May 2022 14:15:06 GMT">
									<outline text="if (err) {" created="Fri, 27 May 2022 15:43:07 GMT">
										<outline text="callback (err);" created="Fri, 27 May 2022 15:43:11 GMT"/>
										<outline text="}" created="Fri, 27 May 2022 15:43:15 GMT"/>
										</outline>
									<outline text="else {" created="Fri, 27 May 2022 15:43:16 GMT">
										<outline text="if (jstruct.flSubscribed) {" created="Fri, 27 May 2022 14:15:39 GMT">
											<outline text="callback (undefined, convertDatabaseFeed (feedRec));" created="Fri, 27 May 2022 14:14:09 GMT"/>
											<outline text="}" created="Fri, 27 May 2022 14:15:43 GMT"/>
											</outline>
										<outline text="else {" created="Fri, 27 May 2022 14:15:45 GMT">
											<outline text="let feedId = feedRec.feedId; //2/3/24 by DW" created="Sat, 03 Feb 2024 15:54:43 GMT"/>
											<outline text="addSubscription (screenname, feedUrl, feedId, function (err, result) { //2/3/24 by DW" created="Fri, 18 Mar 2022 15:36:26 GMT">
												<outline text="if (err) {" created="Fri, 27 May 2022 14:17:11 GMT">
													<outline text="callback (err);" created="Fri, 27 May 2022 14:14:09 GMT"/>
													<outline text="}" created="Fri, 27 May 2022 14:17:15 GMT"/>
													</outline>
												<outline text="else {" created="Fri, 27 May 2022 14:17:15 GMT">
													<outline text="addFeedToUserFeedsOpmlFile (screenname, feedRec, function (err) {" created="Sat, 28 May 2022 19:17:33 GMT">
														<outline text="if (err) {" created="Sat, 28 May 2022 19:18:16 GMT">
															<outline text="callback (err);" created="Fri, 27 May 2022 14:14:09 GMT"/>
															<outline text="}" created="Sat, 28 May 2022 19:18:19 GMT"/>
															</outline>
														<outline text="else {" created="Sat, 28 May 2022 19:18:19 GMT">
															<outline text="callback (undefined, convertDatabaseFeed (feedRec));" created="Fri, 27 May 2022 14:14:09 GMT"/>
															<outline text="}" created="Sat, 28 May 2022 19:18:21 GMT"/>
															</outline>
														<outline text="});" created="Sat, 28 May 2022 19:17:54 GMT"/>
														</outline>
													<outline text="}" created="Fri, 27 May 2022 14:17:17 GMT"/>
													</outline>
												<outline text="});" created="Fri, 18 Mar 2022 15:42:06 GMT"/>
												</outline>
											<outline text="}" created="Fri, 27 May 2022 14:15:47 GMT"/>
											</outline>
										<outline text="}" created="Fri, 27 May 2022 15:43:18 GMT"/>
										</outline>
									<outline text="});" created="Fri, 27 May 2022 14:15:22 GMT"/>
									</outline>
								<outline text="}" created="Tue, 29 Mar 2022 19:30:08 GMT"/>
								</outline>
							<outline text="else {" created="Fri, 27 May 2022 14:18:20 GMT">
								<outline text="countNewSubscriptions (screenname, function (err, theCount) { //7/20/22 by DW" created="Wed, 20 Jul 2022 15:14:12 GMT">
									<outline text="if (err) {" created="Sat, 19 Mar 2022 15:15:11 GMT">
										<outline text="callback (err);" created="Sat, 19 Mar 2022 15:15:16 GMT"/>
										<outline text="}" created="Sat, 19 Mar 2022 15:15:20 GMT"/>
										</outline>
									<outline text="else {" created="Sat, 19 Mar 2022 15:15:21 GMT">
										<outline text="checkMaxSubs (theCount, function (flAllowNewSub, actualMax) {" created="Fri, 14 Oct 2022 20:45:07 GMT">
											<outline text="if (flAllowNewSub) {" created="Fri, 14 Oct 2022 20:45:40 GMT">
												<outline text="reallysimple.readFeed (feedUrl, function (err, theFeed) {" created="Sat, 19 Mar 2022 15:14:01 GMT">
													<outline text="if (err) {" created="Sat, 19 Mar 2022 15:15:11 GMT">
														<outline text="let message = &quot;Can't subscribe because there was an error reading the feed.&quot;; //9/25/22 by DW" created="Sun, 25 Sep 2022 13:44:21 GMT"/>
														<outline text="callback ({message});" created="Sat, 19 Mar 2022 15:15:16 GMT"/>
														<outline text="}" created="Sat, 19 Mar 2022 15:15:20 GMT"/>
														</outline>
													<outline text="else {" created="Sat, 19 Mar 2022 15:15:21 GMT">
														<outline text="var feedRec = setupNewFeedRec (feedUrl, theFeed);" created="Fri, 27 May 2022 14:51:31 GMT"/>
														<outline text="feedRec.ctItems = theFeed.items.length; //7/13/22 by DW" created="Wed, 13 Jul 2022 14:48:45 GMT"/>
														<outline text="feedRec.whoFirstSubscribed = screenname; //7/20/22 by DW"/>
														<outline text="feedRec.ctSubs = 1; //8/31/22 by DW" created="Wed, 31 Aug 2022 12:46:15 GMT"/>
														<outline text="saveFeed (feedRec, function (err, feedRec) {" created="Fri, 01 Apr 2022 14:17:29 GMT">
															<outline text="if (err) {" created="Sat, 03 Feb 2024 15:54:15 GMT">
																<outline text="callback (err);" created="Sat, 03 Feb 2024 15:54:25 GMT"/>
																<outline text="}" created="Sat, 03 Feb 2024 15:54:18 GMT"/>
																</outline>
															<outline text="else {" created="Sat, 03 Feb 2024 15:54:18 GMT">
																<outline text="let feedId = feedRec.feedId; //2/3/24 by DW" created="Sat, 03 Feb 2024 15:54:43 GMT"/>
																<outline text="addSubscription (screenname, feedUrl, feedId, function (err, result) {" created="Fri, 18 Mar 2022 15:36:26 GMT">
																	<outline text="if (err) {" created="Fri, 27 May 2022 14:17:11 GMT">
																		<outline text="callback (err);" created="Fri, 27 May 2022 14:14:09 GMT"/>
																		<outline text="}" created="Fri, 27 May 2022 14:17:15 GMT"/>
																		</outline>
																	<outline text="else {" created="Fri, 27 May 2022 14:17:15 GMT">
																		<outline text="addFeedToUserFeedsOpmlFile (screenname, feedRec, function (err) {" created="Sat, 28 May 2022 19:17:33 GMT">
																			<outline text="if (err) {" created="Sat, 28 May 2022 19:18:16 GMT">
																				<outline text="callback (err);" created="Fri, 27 May 2022 14:14:09 GMT"/>
																				<outline text="}" created="Sat, 28 May 2022 19:18:19 GMT"/>
																				</outline>
																			<outline text="else { //8/19/22 by DW -- return before we check in all the new feed items" created="Sat, 28 May 2022 19:18:19 GMT">
																				<outline text="let whenstart = new Date ();" created="Fri, 19 Aug 2022 15:15:17 GMT"/>
																				<outline text="checkFeedItems (feedRec, theFeed.items, true, function () {" created="Fri, 27 May 2022 15:20:45 GMT">
																					<outline text="myConsoleLog (&quot;subscribeToFeed: checkFeedItems returned after &quot; + utils.secondsSince (whenstart) + &quot; seconds&quot;);" created="Fri, 19 Aug 2022 15:12:55 GMT"/>
																					<outline text="});" created="Fri, 27 May 2022 15:20:50 GMT"/>
																					</outline>
																				<outline text="myConsoleLog (&quot;subscribeToFeed: returning before all the feed items are checked. &quot; + whenstart.toLocaleTimeString ());" created="Fri, 19 Aug 2022 15:12:55 GMT"/>
																				<outline text="callback (undefined, convertDatabaseFeed (feedRec));" created="Fri, 27 May 2022 14:14:09 GMT"/>
																				<outline text="}" created="Sat, 28 May 2022 19:18:21 GMT"/>
																				</outline>
																			<outline text="});" created="Sat, 28 May 2022 19:17:54 GMT"/>
																			</outline>
																		<outline text="}" created="Fri, 27 May 2022 14:17:17 GMT"/>
																		</outline>
																	<outline text="});" created="Fri, 18 Mar 2022 15:42:06 GMT"/>
																	</outline>
																<outline text="}" created="Sat, 03 Feb 2024 15:54:21 GMT"/>
																</outline>
															<outline text="});" created="Fri, 27 May 2022 15:20:38 GMT"/>
															</outline>
														<outline text="}" created="Sat, 19 Mar 2022 15:15:23 GMT"/>
														</outline>
													<outline text="});" created="Sat, 19 Mar 2022 15:15:01 GMT"/>
													</outline>
												<outline text="}" created="Fri, 14 Oct 2022 20:45:42 GMT"/>
												</outline>
											<outline text="else {" created="Fri, 14 Oct 2022 20:45:43 GMT">
												<outline text="const message = &quot;Can't add the new subscription because you've already created &quot; + actualMax + &quot; new subs.&quot;;" created="Wed, 20 Jul 2022 15:15:41 GMT"/>
												<outline text="callback ({message});" created="Wed, 20 Jul 2022 15:15:41 GMT"/>
												<outline text="}" created="Fri, 14 Oct 2022 20:45:45 GMT"/>
												</outline>
											<outline text="});" created="Fri, 14 Oct 2022 20:45:25 GMT"/>
											</outline>
										<outline text="}" created="Sat, 19 Mar 2022 15:15:23 GMT"/>
										</outline>
									<outline text="});" created="Wed, 20 Jul 2022 15:14:30 GMT"/>
									</outline>
								<outline text="}" created="Fri, 27 May 2022 14:18:21 GMT"/>
								</outline>
							<outline text="});" created="Tue, 29 Mar 2022 19:29:54 GMT"/>
							</outline>
						<outline text="});" created="Fri, 20 Oct 2023 14:03:52 GMT"/>
						</outline>
					<outline text="}" created="Fri, 27 May 2022 14:12:58 GMT"/>
					</outline>
				<outline text="function getRecentSubscriptions (callback) { //7/23/22 by DW" created="Sat, 23 Jul 2022 16:21:33 GMT">
					<outline text="Changes" isComment="true" created="Sat, 23 Jul 2022 16:25:20 GMT">
						<outline text="8/28/22; 1:25:14 PM by DW" created="Sun, 28 Aug 2022 17:25:14 GMT">
							<outline text="Add feed description to the list of returned values." created="Sun, 28 Aug 2022 17:25:15 GMT"/>
							</outline>
						<outline text="7/23/22; 12:25:23 PM by DW" created="Sat, 23 Jul 2022 16:25:22 GMT">
							<outline text="Used for the Log command in FeedLand." created="Sat, 23 Jul 2022 16:25:23 GMT"/>
							</outline>
						</outline>
					<outline text="const sqltext = &quot;select s.listName, s.feedUrl, f.title, f.description, s.whenUpdated from subscriptions as s, feeds as f where s.feedUrl = f.feedUrl and f.whoFirstSubscribed = s.listName order by s.whenUpdated desc limit &quot; + config.maxRecentSubscriptions + &quot;;&quot;;"/>
					<outline text="const sqltext = &quot;select s.listName, s.feedUrl, f.title, f.description, s.whenUpdated from subscriptions as s, feeds as f where s.feedUrl = f.feedUrl order by s.whenUpdated desc limit &quot; + config.maxRecentSubscriptions + &quot;;&quot;;" isComment="true"/>
					<outline text="const sqltext = &quot;select * from subscriptions order by whenUpdated desc limit &quot; + config.maxRecentSubscriptions + &quot;;&quot;;" isComment="true" created="Wed, 23 Mar 2022 14:22:51 GMT"/>
					<outline text="davesql.runSqltext (sqltext, function (err, result) {">
						<outline text="if (err) {">
							<outline text="callback (err);" created="Sat, 19 Mar 2022 16:17:21 GMT"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="var log = new Array ();" created="Sat, 23 Jul 2022 16:26:35 GMT"/>
							<outline text="result.forEach (function (item) {" created="Sat, 23 Jul 2022 16:26:48 GMT">
								<outline text="log.push ({" created="Sat, 23 Jul 2022 16:27:09 GMT">
									<outline text="subscriber: item.listName," created="Sat, 23 Jul 2022 16:27:22 GMT"/>
									<outline text="title: item.title," created="Sat, 23 Jul 2022 16:42:33 GMT"/>
									<outline text="description: item.description," created="Sat, 23 Jul 2022 16:42:33 GMT"/>
									<outline text="feedUrl: item.feedUrl," created="Sat, 23 Jul 2022 16:27:36 GMT"/>
									<outline text="when: item.whenUpdated" created="Sat, 23 Jul 2022 16:27:57 GMT"/>
									<outline text="});" created="Sat, 23 Jul 2022 16:27:13 GMT"/>
									</outline>
								<outline text="});" created="Sat, 23 Jul 2022 16:26:57 GMT"/>
								</outline>
							<outline text="callback (undefined, log);"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}" created="Sat, 23 Jul 2022 16:21:51 GMT"/>
					</outline>
				<outline text="function setCategoriesForSubscription (screenname, feedUrl, jsontext, callback) {">
					<outline text="Changes" isComment="true">
						<outline text="9/6/22; 10:10:59 AM by DW" created="Tue, 06 Sep 2022 14:10:59 GMT">
							<outline text="Protect against a null value in the array." created="Tue, 06 Sep 2022 14:10:59 GMT"/>
							</outline>
						<outline text="9/5/22; 10:35:34 AM by DW" created="Mon, 05 Sep 2022 14:35:34 GMT">
							<outline text="The cats are represented as a JSON array when passed to and from the database. " created="Mon, 05 Sep 2022 14:35:35 GMT"/>
							</outline>
						<outline text="1/3/21; 1:01:39 PM by DW">
							<outline text="Normalize the category string so it's like this">
								<outline text=",sports,medicine,texas,"/>
								</outline>
							</outline>
						</outline>
					<outline text="function normalizeCatString (jsontext) { //set up so we can query with LIKE verb -- 1/3/21 by DW">
						<outline text="var apiarray = JSON.parse (jsontext), newcatstring = &quot;&quot;;" created="Mon, 05 Sep 2022 14:36:56 GMT"/>
						<outline text="apiarray.forEach (function (item) {" created="Mon, 05 Sep 2022 14:36:56 GMT">
							<outline text="if (item != null) { //9/6/22 by DW" created="Tue, 06 Sep 2022 14:10:39 GMT">
								<outline text="newcatstring += &quot;,&quot; + utils.stringLower (utils.trimWhitespace (item));"/>
								<outline text="}" created="Tue, 06 Sep 2022 14:10:45 GMT"/>
								</outline>
							<outline text="});" created="Mon, 05 Sep 2022 14:37:29 GMT"/>
							</outline>
						<outline text="if (newcatstring.length == 0) {">
							<outline text="return (undefined);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="return (newcatstring + &quot;,&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="const sqltext = &quot;select * from subscriptions where listName = &quot; + davesql.encode (screenname) + &quot; and feedurl = &quot; + davesql.encode (feedUrl) + &quot;;&quot;;"/>
					<outline text="davesql.runSqltext (sqltext, function (err, result) {">
						<outline text="if (err) {">
							<outline text="callback (err);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="var theSubscription = result [0];"/>
							<outline text="if (theSubscription === undefined) {">
								<outline text="callback ({message: &quot;Can't set the categories because the user isn't subscribed to the feed.&quot;});"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="theSubscription.categories = normalizeCatString (jsontext);"/>
								<outline text="theSubscription.whenUpdated = new Date ();"/>
								<outline text="const sqltext = &quot;replace into subscriptions &quot; + davesql.encodeValues (theSubscription);"/>
								<outline text="davesql.runSqltext (sqltext, function (err, result) {">
									<outline text="callback (undefined, theSubscription);"/>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="" created="Tue, 06 Sep 2022 15:41:17 GMT"/>
				<outline text="function getStandardFeedElements () { //12/26/22 by DW" created="Mon, 26 Dec 2022 17:04:34 GMT">
					<outline text="Changes" isComment="true" created="Wed, 31 Jan 2024 19:58:34 GMT">
						<outline text="1/31/24; 2:58:38 PM by DW" created="Wed, 31 Jan 2024 19:58:37 GMT">
							<outline text="If config.flFeedsHaveIds is true, we get the feedId. " created="Wed, 31 Jan 2024 15:38:25 GMT"/>
							</outline>
						</outline>
					<outline text="const askForFeedId = (config.flFeedsHaveIds) ? &quot;, f.feedId &quot; : &quot;&quot;; //1/31/24 by DW" created="Wed, 31 Jan 2024 15:39:41 GMT"/>
					<outline text="const sqltext = &quot;s.feedUrl, f.title, f.htmlUrl, f.ctSubs, f.ctItems, f.whenCreated, f.whenUpdated, f.whenChecked, f.ctChecks, f.ctSecs, f.ctErrors, f.ctConsecutiveErrors, f.whenLastError, f.whoFirstSubscribed, count(s.feedUrl) as ct, f.whenUpdated&quot; + askForFeedId;" created="Mon, 26 Dec 2022 17:06:23 GMT"/>
					<outline text="console.log (&quot;getStandardFeedElements: sqltext == &quot; + sqltext);"/>
					<outline text="return (sqltext);" created="Wed, 31 Jan 2024 20:02:44 GMT"/>
					<outline text="}" created="Mon, 26 Dec 2022 17:05:58 GMT"/>
					</outline>
				<outline text="function getUsersOpmlUrl (screenname) {" created="Fri, 20 May 2022 13:56:50 GMT">
					<outline text="return (&quot;xxx&quot;);" created="Fri, 20 May 2022 13:57:44 GMT"/>
					<outline text="}" created="Fri, 20 May 2022 13:57:00 GMT"/>
					</outline>
				<outline text="function getFeedsInCategory (screenname, catname, callback) {">
					<outline text="Changes" isComment="true">
						<outline text="1/31/24; 10:38:24 AM by DW" created="Wed, 31 Jan 2024 15:38:23 GMT">
							<outline text="If config.flFeedsHaveIds is true, we get the feedId and return it to the caller. " created="Wed, 31 Jan 2024 15:38:25 GMT"/>
							</outline>
						<outline text="10/16/23; 11:28:09 AM by DW" created="Mon, 16 Oct 2023 15:28:08 GMT">
							<outline text="urlReadingList could be undefined. Check for that." created="Mon, 16 Oct 2023 15:28:09 GMT"/>
							</outline>
						<outline text="10/13/23; 2:04:41 PM by DW" created="Fri, 13 Oct 2023 18:04:40 GMT">
							<outline text="Treat empty string value for urlReadingList as undefined." created="Fri, 13 Oct 2023 18:04:41 GMT"/>
							</outline>
						<outline text="10/11/23; 9:58:38 AM by DW" created="Wed, 11 Oct 2023 13:58:38 GMT">
							<outline text="Get urlReadingList from the subscription." created="Wed, 11 Oct 2023 13:58:39 GMT"/>
							</outline>
						<outline text="11/5/22; 10:47:26 AM by DW" created="Sat, 05 Nov 2022 14:47:26 GMT">
							<outline text="Surrounded the catname with commas. " created="Sat, 05 Nov 2022 14:47:27 GMT">
								<outline text="https://github.com/scripting/feedlandServer/issues/17#issue-1434874863" created="Sat, 05 Nov 2022 14:47:43 GMT"/>
								</outline>
							</outline>
						<outline text="9/15/22; 11:49:19 AM by DW" created="Thu, 15 Sep 2022 15:49:19 GMT">
							<outline text="We were calling it an error if a user has no feeds in the category, but why is that an error? Let's try returing an empty list. " created="Thu, 15 Sep 2022 15:49:19 GMT"/>
							</outline>
						<outline text="9/10/22; 11:32:05 AM by DW" created="Sat, 10 Sep 2022 15:32:04 GMT">
							<outline text="It was a mistake to treat &quot;all&quot; differently. " created="Sat, 10 Sep 2022 15:32:05 GMT"/>
							</outline>
						<outline text="9/9/22; 11:56:17 AM by DW" created="Fri, 09 Sep 2022 15:56:17 GMT">
							<outline text="Now we get all the metadata from the feeds table." created="Fri, 09 Sep 2022 15:56:17 GMT"/>
							<outline text="If catname is all, we skip the LIKE operator." created="Fri, 09 Sep 2022 16:14:20 GMT"/>
							</outline>
						<outline text="8/28/22; 12:16:13 PM by DW" created="Sun, 28 Aug 2022 16:16:13 GMT">
							<outline text="Add the feed description to the list of returned values. " created="Sun, 28 Aug 2022 16:16:13 GMT"/>
							</outline>
						<outline text="7/20/22; 11:37:28 AM by DW" created="Wed, 20 Jul 2022 15:37:28 GMT">
							<outline text="Add f.whoFirstSubscribed to returned info." created="Wed, 20 Jul 2022 15:37:29 GMT"/>
							</outline>
						<outline text="12/4/20; 3:37:47 PM by DW">
							<outline text="Add s.categories to the values returned for each subscription. But only return categories if the value is non-null."/>
							</outline>
						<outline text="12/4/20; 3:09:13 PM by DW">
							<outline text="Remove listname."/>
							</outline>
						<outline text="4/24/18; 12:03:23 PM by DW">
							<outline text="Add listname to the data returned for each subscription."/>
							</outline>
						</outline>
					<outline text="var likeclause = (catname === undefined) ? &quot;&quot; : &quot; and categories like '%,&quot; + catname + &quot;,%'&quot;; //11/5/22 by DW" created="Fri, 09 Sep 2022 15:52:40 GMT"/>
					<outline text="var likeclause = (catname === undefined) ? &quot;&quot; : &quot; and categories like '%&quot; + catname + &quot;%'&quot;; //9/9/22 by DW" isComment="true" created="Fri, 09 Sep 2022 15:52:40 GMT"/>
					<outline text="" created="Wed, 31 Jan 2024 15:39:41 GMT"/>
					<outline text="const askForFeedId = (config.flFeedsHaveIds) ? &quot;, f.feedId &quot; : &quot;&quot;; //1/31/24 by DW" created="Wed, 31 Jan 2024 15:39:41 GMT"/>
					<outline text="const sqltext = &quot;select s.feedUrl, f.title, f.description, f.htmlUrl, f.ctSubs, f.ctItems, f.whenCreated, f.whenUpdated, f.whenChecked, f.ctChecks, f.ctSecs, f.ctErrors, f.ctConsecutiveErrors, f.whenLastError, s.categories, f.whoFirstSubscribed, s.urlReadingList &quot; + askForFeedId + &quot; from subscriptions as s, feeds as f where s.feedUrl = f.feedUrl and f.title is not null and s.listName = &quot; + davesql.encode (screenname) + likeclause + &quot; order by s.whenUpdated desc;&quot;;"/>
					<outline text="var sqltext = &quot;select s.feedUrl, f.title, f.description, f.htmlUrl, f.ctSubs, f.ctItems, f.whenCreated, f.whenUpdated, f.whenChecked, f.ctChecks, f.ctSecs, f.ctErrors, f.ctConsecutiveErrors, f.whenLastError, s.categories, f.whoFirstSubscribed, s.urlReadingList from subscriptions as s, feeds as f where s.feedUrl = f.feedUrl and f.title is not null and s.listName = &quot; + davesql.encode (screenname) + likeclause + &quot; order by s.whenUpdated desc;&quot;;" isComment="true"/>
					<outline text="console.log (&quot;getFeedsInCategory: sqltext == &quot; + sqltext);" isComment="true"/>
					<outline text="" created="Fri, 09 Sep 2022 16:14:41 GMT"/>
					<outline text="davesql.runSqltext (sqltext, function (err, result) {">
						<outline text="if (err) {">
							<outline text="callback (err);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="if (false) { // (result.length == 0) { //9/9/22 PM by DW" created="Fri, 09 Sep 2022 16:07:50 GMT">
								<outline text="let message = &quot;There are no feeds in the \&quot;&quot; + catname + &quot;\&quot; category.&quot;;" created="Fri, 09 Sep 2022 16:08:29 GMT"/>
								<outline text="callback ({message});"/>
								<outline text="}" created="Fri, 09 Sep 2022 16:07:56 GMT"/>
								</outline>
							<outline text="else {" created="Fri, 09 Sep 2022 16:07:57 GMT">
								<outline text="var returnedArray = new Array (); //9/5/22 by DW" created="Mon, 05 Sep 2022 13:50:40 GMT"/>
								<outline text="removeNullValues (result); " created="Mon, 05 Sep 2022 13:45:54 GMT"/>
								<outline text="result.forEach (function (sub) {">
									<outline text="if (sub.urlReadingList !== undefined) { //10/16/23 by DW" created="Mon, 16 Oct 2023 15:27:31 GMT">
										<outline text="if (sub.urlReadingList.length == 0) { //10/13/23 by DW" created="Fri, 13 Oct 2023 18:03:55 GMT">
											<outline text="sub.urlReadingList = undefined;" created="Fri, 13 Oct 2023 18:04:19 GMT"/>
											<outline text="}" created="Fri, 13 Oct 2023 18:04:10 GMT"/>
											</outline>
										<outline text="}" created="Mon, 16 Oct 2023 15:27:45 GMT"/>
										</outline>
									<outline text="returnedArray.push (convertCategories (sub));" created="Mon, 05 Sep 2022 13:50:58 GMT"/>
									<outline text="});"/>
									</outline>
								<outline text="callback (undefined, returnedArray);"/>
								<outline text="}" created="Fri, 09 Sep 2022 16:07:58 GMT"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function getSubscriptions (screenname, callback) {">
					<outline text="getFeedsInCategory (screenname, undefined, callback);" created="Fri, 09 Sep 2022 15:55:47 GMT"/>
					<outline text="" isComment="true" created="Fri, 09 Sep 2022 15:55:48 GMT"/>
					<outline text="Changes" isComment="true">
						<outline text="8/28/22; 12:16:13 PM by DW" created="Sun, 28 Aug 2022 16:16:13 GMT">
							<outline text="Add the feed description to the list of returned values. " created="Sun, 28 Aug 2022 16:16:13 GMT"/>
							</outline>
						<outline text="7/20/22; 11:37:28 AM by DW" created="Wed, 20 Jul 2022 15:37:28 GMT">
							<outline text="Add f.whoFirstSubscribed to returned info." created="Wed, 20 Jul 2022 15:37:29 GMT"/>
							</outline>
						<outline text="12/4/20; 3:37:47 PM by DW">
							<outline text="Add s.categories to the values returned for each subscription. But only return categories if the value is non-null."/>
							</outline>
						<outline text="12/4/20; 3:09:13 PM by DW">
							<outline text="Remove listname."/>
							</outline>
						<outline text="4/24/18; 12:03:23 PM by DW">
							<outline text="Add listname to the data returned for each subscription."/>
							</outline>
						</outline>
					<outline text="var sqltext = &quot;select s.feedUrl, f.title, f.description, f.htmlUrl, f.ctSubs, f.ctItems, f.whenCreated, f.whenUpdated, f.whenChecked, f.ctChecks, f.ctSecs, f.ctErrors, f.ctConsecutiveErrors, f.whenLastError, s.categories, f.whoFirstSubscribed from subscriptions as s, feeds as f where s.feedUrl = f.feedUrl and f.title is not null and s.listName = &quot; + davesql.encode (screenname) + &quot; order by s.whenUpdated desc;&quot;;" isComment="true"/>
					<outline text="console.log (&quot;getSubscriptions: sqltext == &quot; + sqltext);" isComment="true"/>
					<outline text="davesql.runSqltext (sqltext, function (err, result) {" isComment="true">
						<outline text="if (err) {">
							<outline text="callback (err);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="var returnedArray = new Array (); //9/5/22 by DW" created="Mon, 05 Sep 2022 13:50:40 GMT"/>
							<outline text="removeNullValues (result); " created="Mon, 05 Sep 2022 13:45:54 GMT"/>
							<outline text="result.forEach (function (sub) {">
								<outline text="returnedArray.push (convertCategories (sub));" created="Mon, 05 Sep 2022 13:50:58 GMT"/>
								<outline text="});"/>
								</outline>
							<outline text="callback (undefined, returnedArray);"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function getOpmlFromArray (metadata, feedsArray, flIncludeFeedsFromReadingLists=false) {">
					<outline text="Changes" isComment="true">
						<outline text="3/17/24; 2:48:25 PM by DW" created="Sun, 17 Mar 2024 18:48:24 GMT">
							<outline text="New optional param, flIncludeFeedsFromReadingLists. " created="Sun, 17 Mar 2024 18:48:25 GMT"/>
							</outline>
						<outline text="12/7/20; 10:50:12 AM by DW">
							<outline text="Replace three params, title, description, whenCreated, with an object, metadata."/>
							</outline>
						<outline text="12/6/20; 1:31:14 PM by DW">
							<outline text="Add optional description parameter. "/>
							</outline>
						</outline>
					<outline text="var opmltext = &quot;&quot;, indentlevel = 0, now = new Date ();"/>
					<outline text="function add (s) {">
						<outline text="opmltext += utils.filledString (&quot;\t&quot;, indentlevel) + s + &quot;\n&quot;;"/>
						<outline text="}"/>
						</outline>
					<outline text="function encode (s) {">
						<outline text="if ((s === undefined) || (s === null)) {">
							<outline text="return (&quot;&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="return (utils.encodeXml (s));"/>
						<outline text="}"/>
						</outline>
					<outline text="add (&quot;&lt;?xml version=\&quot;1.0\&quot;?&gt;&quot;);"/>
					<outline text="add (&quot;&lt;!-- OPML generated by &quot; + myProductName + &quot; v&quot; + myVersion + &quot; on &quot; + now.toUTCString () + &quot; --&gt;&quot;);" isComment="true"/>
					<outline text="add (&quot;&lt;opml version=\&quot;2.0\&quot;&gt;&quot;); indentlevel++;"/>
					<outline text="//add head">
						<outline text="add (&quot;&lt;head&gt;&quot;); indentlevel++;"/>
						<outline text=""/>
						<outline text="if (metadata.dateCreated !== undefined) {">
							<outline text="metadata.dateCreated = new Date (metadata.dateCreated).toUTCString ();"/>
							<outline text="}"/>
							</outline>
						<outline text="for (var x in metadata) {">
							<outline text="if (x !== &quot;name&quot;) {">
								<outline text="var s = metadata [x];"/>
								<outline text="if (s !== undefined) { //12/21/20 AM by DW -- the app actually got this error, go figure">
									<outline text="if (s.length &gt; 0) {">
										<outline text="add (&quot;&lt;&quot; + x + &quot;&gt;&quot; + encode (s) + &quot;&lt;/&quot; + x + &quot;&gt;&quot;);"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text=""/>
						<outline text="if (title !== undefined) {" isComment="true">
							<outline text="add (&quot;&lt;title&gt;&quot; + encode (title) + &quot;&lt;/title&gt;&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="if (description !== undefined) {" isComment="true">
							<outline text="add (&quot;&lt;description&gt;&quot; + encode (description) + &quot;&lt;/description&gt;&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="if (whenCreated !== undefined) {" isComment="true">
							<outline text="console.log (&quot;getOpmlFromArray: whenCreated == &quot; + whenCreated);" isComment="true"/>
							<outline text="add (&quot;&lt;dateCreated&gt;&quot; + new Date (whenCreated).toUTCString () + &quot;&lt;/dateCreated&gt;&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="add (&quot;&lt;dateModified&gt;&quot; + now.toUTCString () + &quot;&lt;/dateModified&gt;&quot;);"/>
						<outline text="add (&quot;&lt;/head&gt;&quot;); indentlevel--;"/>
						</outline>
					<outline text="add (&quot;&lt;body&gt;&quot;); indentlevel++;"/>
					<outline text="//add the &lt;outline&gt; elements">
						<outline text="function att (name, val) {">
							<outline text="if ((val === undefined) || (val === null)) {">
								<outline text="return (&quot;&quot;);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="return (&quot; &quot; + name + &quot;=\&quot;&quot; + utils.encodeXml (val) + &quot;\&quot;&quot;);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="function addOneSub (theSub) {">
							<outline text="Changes" isComment="true" created="Sat, 10 Sep 2022 16:54:54 GMT">
								<outline text="9/10/22; 12:56:41 PM by DW" created="Sat, 10 Sep 2022 16:56:41 GMT">
									<outline text="Support category attribute per the OPML 2.0 spec." created="Sat, 10 Sep 2022 16:56:42 GMT"/>
									</outline>
								<outline text="9/10/22; 12:54:56 PM by DW" created="Sat, 10 Sep 2022 16:54:56 GMT">
									<outline text="We used to support xmlUrl as a property of theSub, but it pre-dates FeedLand, so I'm taking the generality out. " created="Sat, 10 Sep 2022 16:54:57 GMT"/>
									</outline>
								</outline>
							<outline text="function getCatsAtt () {" created="Sat, 10 Sep 2022 17:03:59 GMT">
								<outline text="var catsatt = &quot;&quot;, catstring = theSub.categories;" created="Sat, 10 Sep 2022 16:56:10 GMT"/>
								<outline text="if (catstring !== undefined) {" created="Sat, 10 Sep 2022 16:58:21 GMT">
									<outline text="catsatt = utils.stringMid (catstring, 2, catstring.length - 2); //something like [&quot;all&quot;,&quot;nyt&quot;,&quot;tech&quot;]" created="Sat, 10 Sep 2022 17:18:07 GMT"/>
									<outline text="if (catsatt.length &gt; 0) {" created="Sat, 10 Sep 2022 17:18:54 GMT">
										<outline text="catsatt = utils.replaceAll (catsatt, &quot;\&quot;&quot;, &quot;&quot;);" created="Sat, 10 Sep 2022 17:20:38 GMT"/>
										<outline text="catsatt = att (&quot;category&quot;, catsatt);" created="Sat, 10 Sep 2022 17:19:08 GMT"/>
										<outline text="}" created="Sat, 10 Sep 2022 17:19:00 GMT"/>
										</outline>
									<outline text="}" created="Sat, 10 Sep 2022 16:58:30 GMT"/>
									</outline>
								<outline text="if (catstring !== undefined) {" isComment="true" created="Sat, 10 Sep 2022 16:58:21 GMT">
									<outline text="if (catstring != &quot;[]&quot;) { " created="Sat, 10 Sep 2022 16:58:34 GMT">
										<outline text="var catsarray;" created="Sat, 10 Sep 2022 17:01:55 GMT"/>
										<outline text="try {" created="Sat, 10 Sep 2022 17:01:55 GMT">
											<outline text="catsarray = JSON.parse (catstring); //something like [&quot;all&quot;,&quot;nyt&quot;,&quot;tech&quot;]" created="Sat, 10 Sep 2022 17:02:21 GMT"/>
											<outline text="catsarray.forEach (function (cat, ix) {" created="Sat, 10 Sep 2022 17:01:56 GMT">
												<outline text="catsatt += cat + &quot;,&quot;;" created="Sat, 10 Sep 2022 17:06:58 GMT"/>
												<outline text="});" created="Sat, 10 Sep 2022 17:06:52 GMT"/>
												</outline>
											<outline text="catsatt = utils.stringMid (catsatt, 1, catsatt.length - 1);" created="Sat, 10 Sep 2022 17:12:55 GMT"/>
											<outline text="catsatt = att (&quot;category&quot;, catsatt);" created="Sat, 10 Sep 2022 17:13:18 GMT"/>
											<outline text="}" created="Sat, 10 Sep 2022 17:01:59 GMT"/>
											</outline>
										<outline text="catch (err) {" created="Sat, 10 Sep 2022 17:02:00 GMT">
											<outline text="}" created="Sat, 10 Sep 2022 17:02:04 GMT"/>
											</outline>
										<outline text="}" created="Sat, 10 Sep 2022 16:58:43 GMT"/>
										</outline>
									<outline text="}" created="Sat, 10 Sep 2022 16:58:30 GMT"/>
									</outline>
								<outline text="return (catsatt);" created="Sat, 10 Sep 2022 17:05:24 GMT"/>
								<outline text="}" created="Sat, 10 Sep 2022 17:04:05 GMT"/>
								</outline>
							<outline text="add (&quot;&lt;outline type=\&quot;rss\&quot;&quot; + att (&quot;text&quot;, theSub.title) + att (&quot;xmlUrl&quot;, theSub.feedUrl) + att (&quot;htmlUrl&quot;, theSub.htmlUrl) +  getCatsAtt () + &quot; /&gt;&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="function addSubs (subs) {">
							<outline text="if (subs !== undefined) {">
								<outline text="for (var i = 0; i &lt; subs.length; i++) {">
									<outline text="var feed = subs [i];"/>
									<outline text="if (feed.subs !== undefined) {">
										<outline text="add (&quot;&lt;outline&quot; + att (&quot;text&quot;, feed.text) + &quot;&gt;&quot;); indentlevel++;"/>
										<outline text="addSubs (feed.subs);"/>
										<outline text="add (&quot;&lt;/outline&gt;&quot;); indentlevel--;"/>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="if (flIncludeFeedsFromReadingLists) { //3/17/24 by DW" created="Sun, 17 Mar 2024 18:49:11 GMT">
											<outline text="addOneSub (feed);"/>
											<outline text="}" created="Sun, 17 Mar 2024 18:49:22 GMT"/>
											</outline>
										<outline text="else {" created="Sun, 17 Mar 2024 18:49:23 GMT">
											<outline text="if (feed.urlReadingList === undefined) {" created="Sun, 17 Mar 2024 18:49:35 GMT">
												<outline text="addOneSub (feed);"/>
												<outline text="}" created="Sun, 17 Mar 2024 18:49:45 GMT"/>
												</outline>
											<outline text="}" created="Sun, 17 Mar 2024 18:49:26 GMT"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="addSubs (feedsArray);"/>
						<outline text="for (i = 0; i &lt; feedsArray.length; i++) {" isComment="true">
							<outline text="var feed = feedsArray [i];"/>
							<outline text="if (feed.subs !== undefined) {">
								<outline text="add (&quot;&lt;outline &quot; + att (&quot;text&quot;, feed.title) + &quot;&gt;&quot;); indentlevel++;"/>
								<outline text="addSubs (feed.subs);"/>
								<outline text="add (&quot;&lt;/outline&gt;&quot;); indentlevel--;"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="addOneSub (feed);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						</outline>
					<outline text="add (&quot;&lt;/body&gt;&quot;); indentlevel--;"/>
					<outline text="add (&quot;&lt;/opml&gt;&quot;); indentlevel--;"/>
					<outline text="return (opmltext);"/>
					<outline text="}"/>
					</outline>
				<outline text="function getUserOpmlSubscriptions (screenname, catname, callback) {">
					<outline text="Changes" isComment="true">
						<outline text="6/24/24; 9:22:39 AM by DW" created="Mon, 24 Jun 2024 13:22:39 GMT">
							<outline text="Changing the format of the title from:" created="Mon, 24 Jun 2024 13:22:40 GMT">
								<outline text="Subscriptions for davewiner (category: blogroll)" created="Mon, 24 Jun 2024 13:22:47 GMT"/>
								</outline>
							<outline text="to:" created="Mon, 24 Jun 2024 13:22:48 GMT">
								<outline text="davewiner/blogroll" created="Mon, 24 Jun 2024 13:22:50 GMT"/>
								</outline>
							</outline>
						<outline text="9/9/22; 11:42:41 AM by DW" created="Fri, 09 Sep 2022 15:42:41 GMT">
							<outline text="No need to have both dateCreated and dateModified if they're always the same. " created="Fri, 09 Sep 2022 15:42:42 GMT"/>
							</outline>
						<outline text="9/7/22; 10:34:55 AM by DW" created="Wed, 07 Sep 2022 14:34:55 GMT">
							<outline text="We support categories now." created="Wed, 07 Sep 2022 14:34:55 GMT"/>
							</outline>
						<outline text="5/23/22; 11:25:13 AM by DW" created="Mon, 23 May 2022 15:25:13 GMT">
							<outline text="Converted from feedBase, which had the idea of categories. We will have them too but we don't have them yet. " created="Mon, 23 May 2022 15:25:14 GMT"/>
							</outline>
						<outline text="12/5/20; 1:44:42 PM by DW">
							<outline text="New parameter, catname. If undefined, we output all of the users subscriptions. If it's specified, only those from the indicated category."/>
							</outline>
						</outline>
					<outline text="const whenFirstStartup = new Date (&quot;5/23/22; 11:27:12 AM&quot;);" created="Mon, 23 May 2022 15:26:49 GMT"/>
					<outline text="" created="Wed, 07 Sep 2022 14:31:22 GMT"/>
					<outline text="function getTheList (callback) {" created="Wed, 07 Sep 2022 14:31:23 GMT">
						<outline text="if (catname === undefined) {" created="Wed, 07 Sep 2022 14:31:41 GMT">
							<outline text="getSubscriptions (screenname, callback);" created="Wed, 07 Sep 2022 14:31:53 GMT"/>
							<outline text="}" created="Wed, 07 Sep 2022 14:31:42 GMT"/>
							</outline>
						<outline text="else {" created="Wed, 07 Sep 2022 14:31:44 GMT">
							<outline text="getFeedsInCategory (screenname, catname, callback);" created="Wed, 07 Sep 2022 14:32:09 GMT"/>
							<outline text="}" created="Wed, 07 Sep 2022 14:31:46 GMT"/>
							</outline>
						<outline text="}" created="Wed, 07 Sep 2022 14:31:32 GMT"/>
						</outline>
					<outline text="getTheList (function (err, feedsArray) {" created="Wed, 07 Sep 2022 14:21:30 GMT">
						<outline text="if (err) {">
							<outline text="callback (err);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {" created="Wed, 07 Sep 2022 14:32:58 GMT">
							<outline text="const categoryInfo = (catname === undefined) ? &quot;&quot; : &quot;, &quot; + catname + &quot; category&quot;;" created="Wed, 07 Sep 2022 14:35:19 GMT"/>
							<outline text="const categoryInfo = (catname === undefined) ? &quot;&quot; : &quot; (category: &quot; + catname + &quot;)&quot;;" isComment="true" created="Wed, 07 Sep 2022 14:35:19 GMT"/>
							<outline text="const title = (catname === undefined) ? screenname : screenname + &quot;/&quot; + catname; //6/24/24 by DW" created="Mon, 24 Jun 2024 13:24:21 GMT"/>
							<outline text="var metadata = {">
								<outline text="title,"/>
								<outline text="title: &quot;Subscriptions for &quot; + screenname + categoryInfo," isComment="true"/>
								<outline text="" created="Mon, 24 Jun 2024 13:28:53 GMT"/>
								<outline text="description: screenname + &quot;'s subscription list&quot; + categoryInfo + &quot;. List created by &quot; + myProductName + &quot; v&quot; + myVersion + &quot;.&quot; //6/24/24 by DW" created="Mon, 24 Jun 2024 13:26:53 GMT"/>
								<outline text="description: &quot;List created by &quot; + myProductName + &quot; v&quot; + myVersion" isComment="true"/>
								<outline text="" created="Mon, 24 Jun 2024 13:28:57 GMT"/>
								<outline text="dateCreated: new Date ()" isComment="true"/>
								<outline text="};"/>
								</outline>
							<outline text="const opmltext = getOpmlFromArray (metadata, feedsArray);"/>
							<outline text="callback (undefined, opmltext);"/>
							<outline text="}" created="Wed, 07 Sep 2022 14:32:59 GMT"/>
							</outline>
						<outline text="});" created="Wed, 07 Sep 2022 14:32:30 GMT"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function getHotlist (callback) { //7/26/22 by DW">
					<outline text="Changes" isComment="true" created="Sat, 30 Jul 2022 15:30:01 GMT">
						<outline text="7/30/22; 11:30:06 AM by DW" created="Sat, 30 Jul 2022 15:30:05 GMT">
							<outline text="We generate a list that can be viewed in the FeedLand client, so the values we return must match those in getSubscriptions, below. " created="Sat, 30 Jul 2022 15:30:06 GMT"/>
							</outline>
						</outline>
					<outline text="const sqltext = &quot;select &quot; + getStandardFeedElements () + &quot; from subscriptions as s, feeds as f where s.feedUrl = f.feedUrl and f.title is not null group by feedUrl order by ct desc limit 100;&quot;;" created="Sat, 30 Jul 2022 15:02:34 GMT"/>
					<outline text="const sqltext = &quot;select s.feedUrl, f.title, f.htmlUrl, count(s.feedUrl) as ct, f.whenUpdated from subscriptions as s, feeds as f where s.feedUrl = f.feedUrl and f.title is not null group by feedUrl order by ct desc limit 100;&quot;;" isComment="true" created="Sat, 30 Jul 2022 15:02:34 GMT"/>
					<outline text="davesql.runSqltext (sqltext, function (err, result) {">
						<outline text="if (err) {">
							<outline text="callback (err);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="removeNullValues (result);"/>
							<outline text="callback (undefined, result);"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="" created="Thu, 01 Jun 2023 18:13:24 GMT"/>
				<outline text="function getFeedlistFromOpml (urlOpml, callback) { //6/1/23 by DW" created="Thu, 01 Jun 2023 18:13:25 GMT">
					<outline text="Changes" isComment="true" created="Fri, 02 Jun 2023 14:16:45 GMT">
						<outline text="6/8/23; 10:37:08 AM by DW" created="Thu, 08 Jun 2023 14:37:08 GMT">
							<outline text="Return an error if the OPML file has no feeds." created="Thu, 08 Jun 2023 14:37:09 GMT"/>
							</outline>
						<outline text="6/3/23; 10:41:55 AM by DW" created="Sat, 03 Jun 2023 14:41:55 GMT">
							<outline text="We now return a package which includes the head section from the OPML file and the feed list. Previously we just returned the feed list." created="Sat, 03 Jun 2023 14:41:56 GMT"/>
							</outline>
						<outline text="6/2/23; 10:16:48 AM by DW" created="Fri, 02 Jun 2023 14:16:47 GMT">
							<outline text="We return a feedlist suitable for being displayed by viewFeedlist in feedlandHome. It may include feeds that someone has subscribed to locally, so we have all the usual info about them, or ones that have not been subscribed to so we only have the info that came from the OPML file. " created="Fri, 02 Jun 2023 14:16:48 GMT"/>
							</outline>
						</outline>
					<outline text="getUrlArrayFromOpml (urlOpml, function (err, urlArray, theOutline) {" created="Thu, 01 Jun 2023 18:14:16 GMT">
						<outline text="if (err) {" created="Thu, 01 Jun 2023 18:14:37 GMT">
							<outline text="callback (err);" created="Thu, 01 Jun 2023 18:14:46 GMT"/>
							<outline text="}" created="Thu, 01 Jun 2023 18:14:41 GMT"/>
							</outline>
						<outline text="else {" created="Thu, 01 Jun 2023 18:14:41 GMT">
							<outline text="if (urlArray.length == 0) { //6/8/23 by DW" created="Thu, 08 Jun 2023 14:35:53 GMT">
								<outline text="const message = &quot;Can't get the feed list because there are no feeds in the OPML file.&quot;;" created="Thu, 08 Jun 2023 14:36:27 GMT"/>
								<outline text="callback ({message});" created="Thu, 01 Jun 2023 18:14:46 GMT"/>
								<outline text="}" created="Thu, 08 Jun 2023 14:36:03 GMT"/>
								</outline>
							<outline text="else {" created="Thu, 08 Jun 2023 14:36:04 GMT">
								<outline text="var listtext = &quot;&quot;;" created="Wed, 03 Aug 2022 13:34:04 GMT"/>
								<outline text="urlArray.forEach (function (url) {" created="Wed, 03 Aug 2022 13:33:35 GMT">
									<outline text="listtext += davesql.encode (url) + &quot;,&quot;;" created="Wed, 03 Aug 2022 13:34:25 GMT"/>
									<outline text="});" created="Wed, 03 Aug 2022 13:33:47 GMT"/>
									</outline>
								<outline text="if (listtext.length &gt; 0) {" created="Wed, 03 Aug 2022 13:26:20 GMT">
									<outline text="listtext = utils.stringMid (listtext, 1, listtext.length - 1);" created="Wed, 03 Aug 2022 13:35:05 GMT"/>
									<outline text="}" created="Wed, 03 Aug 2022 13:35:03 GMT"/>
									</outline>
								<outline text="const sqltext = &quot;select * from feeds where feedUrl in (&quot; + listtext + &quot;);&quot;;" created="Thu, 01 Jun 2023 18:20:30 GMT"/>
								<outline text="davesql.runSqltext (sqltext, function (err, result) {">
									<outline text="if (err) {">
										<outline text="callback (err);"/>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="var theFeedlist = new Array ();" created="Thu, 01 Jun 2023 20:46:36 GMT"/>
										<outline text="result.forEach (function (item) {" created="Thu, 01 Jun 2023 20:20:38 GMT">
											<outline text="var newItem = new Object ();" created="Thu, 01 Jun 2023 21:41:30 GMT"/>
											<outline text="for (var x in item) {" created="Thu, 01 Jun 2023 21:41:30 GMT">
												<outline text="var val = item [x];" created="Thu, 01 Jun 2023 21:42:08 GMT"/>
												<outline text="if (val != null) {" created="Thu, 01 Jun 2023 21:42:19 GMT">
													<outline text="newItem [x] = val;" created="Thu, 01 Jun 2023 21:42:32 GMT"/>
													<outline text="}" created="Thu, 01 Jun 2023 21:42:26 GMT"/>
													</outline>
												<outline text="}" created="Thu, 01 Jun 2023 21:41:38 GMT"/>
												</outline>
											<outline text="theFeedlist.push (newItem);" created="Thu, 01 Jun 2023 20:47:31 GMT"/>
											<outline text="});" created="Thu, 01 Jun 2023 20:20:50 GMT"/>
											</outline>
										<outline text="" created="Thu, 01 Jun 2023 20:46:36 GMT"/>
										<outline text="function getOutlineElementsNotSubscribedTo () {" created="Thu, 01 Jun 2023 18:58:39 GMT">
											<outline text="var subscribedToStruct = new Object ();" created="Thu, 01 Jun 2023 20:20:20 GMT"/>
											<outline text="result.forEach (function (item) {" created="Thu, 01 Jun 2023 20:20:38 GMT">
												<outline text="subscribedToStruct [item.feedUrl] = item;" created="Thu, 01 Jun 2023 20:21:10 GMT"/>
												<outline text="});" created="Thu, 01 Jun 2023 20:20:50 GMT"/>
												</outline>
											<outline text="" created="Thu, 01 Jun 2023 20:28:00 GMT"/>
											<outline text="var elementsNotSubscribedTo = new Array ();" created="Thu, 01 Jun 2023 20:28:02 GMT"/>
											<outline text="opml.visitAll (theOutline, function (node) {" created="Sat, 03 Jul 2021 19:31:57 GMT">
												<outline text="if (notComment (node)) {" created="Sat, 20 Aug 2022 14:11:54 GMT">
													<outline text="if (node.type == &quot;rss&quot;) {" created="Sun, 21 Aug 2022 18:00:29 GMT">
														<outline text="if (node.xmlUrl !== undefined) {" created="Sat, 20 Aug 2022 14:12:11 GMT">
															<outline text="if (subscribedToStruct [node.xmlUrl] === undefined) {" created="Thu, 01 Jun 2023 20:29:46 GMT">
																<outline text="var item = {" created="Thu, 01 Jun 2023 21:51:23 GMT">
																	<outline text="title: node.text," created="Thu, 01 Jun 2023 21:53:04 GMT"/>
																	<outline text="feedUrl: node.xmlUrl," created="Thu, 01 Jun 2023 21:52:09 GMT"/>
																	<outline text="htmlUrl: node.htmlUrl," created="Thu, 01 Jun 2023 21:52:44 GMT"/>
																	<outline text="description: node.description" created="Thu, 01 Jun 2023 21:52:37 GMT"/>
																	<outline text="};" created="Thu, 01 Jun 2023 21:51:41 GMT"/>
																	</outline>
																<outline text="elementsNotSubscribedTo.push (item);" created="Thu, 01 Jun 2023 20:30:15 GMT"/>
																<outline text="}" created="Thu, 01 Jun 2023 20:29:55 GMT"/>
																</outline>
															<outline text="}" created="Sat, 20 Aug 2022 14:12:16 GMT"/>
															</outline>
														<outline text="}" created="Sun, 21 Aug 2022 18:00:33 GMT"/>
														</outline>
													<outline text="}" created="Sat, 20 Aug 2022 14:11:56 GMT"/>
													</outline>
												<outline text="return (true); //keep visiting" created="Sat, 03 Jul 2021 19:32:47 GMT"/>
												<outline text="});" created="Sat, 03 Jul 2021 19:32:16 GMT"/>
												</outline>
											<outline text="return (elementsNotSubscribedTo)" created="Thu, 01 Jun 2023 20:28:21 GMT"/>
											<outline text="}" created="Thu, 01 Jun 2023 20:19:47 GMT"/>
											</outline>
										<outline text="var elementsNotSubscribedTo = getOutlineElementsNotSubscribedTo ();" created="Thu, 01 Jun 2023 20:28:02 GMT"/>
										<outline text="elementsNotSubscribedTo.forEach (function (item) {" created="Thu, 01 Jun 2023 20:41:56 GMT">
											<outline text="theFeedlist.push (item);" created="Thu, 01 Jun 2023 20:49:00 GMT"/>
											<outline text="});" created="Thu, 01 Jun 2023 20:48:50 GMT"/>
											</outline>
										<outline text="" created="Thu, 01 Jun 2023 20:41:56 GMT"/>
										<outline text="const thePackage = { //6/3/23 by DW" created="Sat, 03 Jun 2023 14:42:23 GMT">
											<outline text="head: theOutline.opml.head," created="Sat, 03 Jun 2023 14:42:40 GMT"/>
											<outline text="feedlist: theFeedlist" created="Sat, 03 Jun 2023 14:43:06 GMT"/>
											<outline text="}" created="Sat, 03 Jun 2023 14:42:27 GMT"/>
											</outline>
										<outline text="callback (undefined, thePackage);"/>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="}" created="Thu, 08 Jun 2023 14:36:07 GMT"/>
								</outline>
							<outline text="}" created="Thu, 01 Jun 2023 18:14:43 GMT"/>
							</outline>
						<outline text="});" created="Thu, 01 Jun 2023 18:14:32 GMT"/>
						</outline>
					<outline text="}" created="Thu, 01 Jun 2023 18:13:50 GMT"/>
					</outline>
				<outline text="" created="Thu, 01 Jun 2023 18:13:26 GMT"/>
				<outline text="function getHotlistOpml (callback) { //7/26/22 by DW" created="Sat, 30 Jul 2022 21:58:41 GMT">
					<outline text="getHotlist (function (err, theHotlistArray) {" created="Sat, 30 Jul 2022 21:59:34 GMT">
						<outline text="if (err) {" created="Sat, 30 Jul 2022 21:59:54 GMT">
							<outline text="callback (err);" created="Sat, 30 Jul 2022 21:59:57 GMT"/>
							<outline text="}" created="Sat, 30 Jul 2022 22:00:00 GMT"/>
							</outline>
						<outline text="else {" created="Sat, 30 Jul 2022 22:00:01 GMT">
							<outline text="var metadata = {">
								<outline text="title: &quot;FeedLand hotlist in OPML&quot;,"/>
								<outline text="description: &quot;The most popular feeds on FeedLand, as an OPML subscription list.&quot;,"/>
								<outline text="dateCreated: new Date (&quot;7/30/22; 6:02:31 PM&quot;)"/>
								<outline text="};"/>
								</outline>
							<outline text="var opmltext = getOpmlFromArray (metadata, theHotlistArray);"/>
							<outline text="callback (undefined, opmltext);"/>
							<outline text="}" created="Sat, 30 Jul 2022 22:00:02 GMT"/>
							</outline>
						<outline text="});" created="Sat, 30 Jul 2022 21:59:51 GMT"/>
						</outline>
					<outline text="}" created="Sat, 30 Jul 2022 21:58:48 GMT"/>
					</outline>
				<outline text="function getFeedSearch (theSearchString, callback) { //12/26/22 by DW">
					<outline text="Changes" isComment="true" created="Sat, 30 Jul 2022 15:30:01 GMT">
						<outline text="12/26/22; 12:05:03 PM by DW" created="Mon, 26 Dec 2022 17:05:03 GMT">
							<outline text="Started with code from getHotlist." created="Mon, 26 Dec 2022 17:05:03 GMT">
								<outline text="select title from feeds where title like '%masto%';" created="Mon, 26 Dec 2022 16:59:54 GMT"/>
								</outline>
							</outline>
						<outline text="7/30/22; 11:30:06 AM by DW" created="Sat, 30 Jul 2022 15:30:05 GMT">
							<outline text="We generate a list that can be viewed in the FeedLand client, so the values we return must match those in getSubscriptions, below. " created="Sat, 30 Jul 2022 15:30:06 GMT"/>
							</outline>
						</outline>
					<outline text="const pattern = davesql.encode (&quot;%&quot; + theSearchString + &quot;%&quot;);" created="Mon, 26 Dec 2022 17:09:19 GMT"/>
					<outline text="const sqltext = &quot;select &quot; + getStandardFeedElements () + &quot; from subscriptions as s, feeds as f where s.feedUrl = f.feedUrl and f.title like + &quot; + pattern + &quot; group by feedUrl order by ct desc limit 100;&quot;;" created="Sat, 30 Jul 2022 15:02:34 GMT"/>
					<outline text="davesql.runSqltext (sqltext, function (err, result) {">
						<outline text="if (err) {">
							<outline text="callback (err);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="removeNullValues (result);"/>
							<outline text="callback (undefined, result);"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="" created="Thu, 15 Sep 2022 16:13:04 GMT"/>
				<outline text="function isUserInDatabase (screenname, callback) { //9/17/22 by DW" isComment="true">
					<outline text="const sqltext = &quot;select * from users where screenname=&quot; + davesql.encode (screenname) + &quot;;&quot;;"/>
					<outline text="davesql.runSqltext (sqltext, function (err, result) {">
						<outline text="if (err) {">
							<outline text="callback (false);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="if (result.length == 0) {">
								<outline text="callback (false);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="callback (true, result [0]);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="" created="Sat, 04 Nov 2023 14:43:59 GMT"/>
				<outline text="function findUserWithScreenname (screenname, callback) { //9/17/22 by DW" created="Sat, 04 Nov 2023 14:43:59 GMT">
					<outline text="Changes" isComment="true" created="Sat, 04 Nov 2023 14:44:19 GMT">
						<outline text="11/4/23; 10:44:24 AM by DW" created="Sat, 04 Nov 2023 14:44:23 GMT">
							<outline text="This used to be called isUserInDatabase, but there was another function with the same name that found the user with an email address. " created="Sat, 04 Nov 2023 14:44:24 GMT"/>
							<outline text="Obviously that was confusing and actually was the source of bugs. " created="Sat, 04 Nov 2023 14:44:56 GMT"/>
							<outline text="So I created two routines with different names that clearly differentiate. " created="Sat, 04 Nov 2023 14:45:18 GMT"/>
							<outline text="Makes the code much more understandable. " created="Sat, 04 Nov 2023 14:45:38 GMT"/>
							</outline>
						</outline>
					<outline text="const sqltext = &quot;select * from users where screenname=&quot; + davesql.encode (screenname) + &quot;;&quot;;"/>
					<outline text="davesql.runSqltext (sqltext, function (err, result) {">
						<outline text="if (err) {">
							<outline text="callback (false);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="if (result.length == 0) {">
								<outline text="callback (false);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="callback (true, removeNullValuesFromObject (result [0]));"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}" created="Sat, 04 Nov 2023 14:44:14 GMT"/>
					</outline>
				<outline text="function findUserWithEmail (emailaddress, callback) { //2/15/23 by DW" created="Wed, 15 Feb 2023 12:27:14 GMT">
					<outline text="Changes" isComment="true" created="Wed, 01 Nov 2023 14:05:57 GMT">
						<outline text="11/4/23; 10:50:49 AM by DW" created="Sat, 04 Nov 2023 14:50:49 GMT">
							<outline text="Moved this routine from feedlandServer and changed its name from isUserInDatabase to findUserWithEmail. " created="Sat, 04 Nov 2023 14:50:29 GMT"/>
							</outline>
						</outline>
					<outline text="const sqltext = &quot;select * from users where emailAddress = &quot; + davesql.encode (emailaddress) + &quot;;&quot;;" created="Tue, 13 Dec 2022 21:30:44 GMT"/>
					<outline text="davesql.runSqltext (sqltext, function (err, result) {">
						<outline text="if (err) {" created="Tue, 13 Dec 2022 22:02:51 GMT">
							<outline text="callback (false);" created="Tue, 13 Dec 2022 22:02:53 GMT"/>
							<outline text="}" created="Tue, 13 Dec 2022 22:02:56 GMT"/>
							</outline>
						<outline text="else {" created="Tue, 13 Dec 2022 22:02:57 GMT">
							<outline text="if (result.length == 0) {">
								<outline text="callback (false);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="callback (true, removeNullValuesFromObject (result [0]));"/>
								<outline text="}"/>
								</outline>
							<outline text="}" created="Tue, 13 Dec 2022 22:02:59 GMT"/>
							</outline>
						<outline text="});" created="Tue, 13 Dec 2022 22:02:47 GMT"/>
						</outline>
					<outline text="}" created="Wed, 15 Feb 2023 12:27:45 GMT"/>
					</outline>
				<outline text="" created="Sat, 04 Nov 2023 14:44:01 GMT"/>
				<outline text="function setUserPrefs (screenname, jsontext, callback) { //9/15/22 by DW">
					<outline text="Changes" isComment="true" created="Thu, 15 Sep 2022 17:56:49 GMT">
						<outline text="11/5/23; 11:11:40 AM by DW" created="Sun, 05 Nov 2023 16:11:40 GMT">
							<outline text="When you add a field to the users table, you have to add code here to copy the thing you added. User prefs are a mess this way. Sorry. " created="Sun, 05 Nov 2023 16:11:41 GMT"/>
							</outline>
						<outline text="5/11/23; 12:56:10 PM by DW" created="Thu, 11 May 2023 16:56:10 GMT">
							<outline text="Here's what's going on" created="Thu, 11 May 2023 17:11:50 GMT">
								<outline text="My test database was missing homePageCategoryList, but it's in the deployed database and initialized in the SQL code. The test database wasn't properly updated." created="Thu, 11 May 2023 17:11:56 GMT"/>
								<outline text="On the client they call the user's categories usersCategoryList and in the database it's called categories. " created="Thu, 11 May 2023 17:12:52 GMT"/>
								<outline text="Also we weren't calling normalizeCatString in the new code." created="Thu, 11 May 2023 17:15:17 GMT"/>
								<outline text="I did a very sloppy job of converting this code, and the mistakes are showing up now. " created="Thu, 11 May 2023 17:13:21 GMT"/>
								<outline text="The changes I made on 5/7 were wrong. " created="Thu, 11 May 2023 17:13:56 GMT"/>
								</outline>
							</outline>
						<outline text="5/11/23; 8:47:49 AM by DW" created="Thu, 11 May 2023 12:47:49 GMT">
							<outline text="Have to be careful when adding a date coming from browser-based JavaScript via JSON." created="Thu, 11 May 2023 12:47:49 GMT"/>
							</outline>
						<outline text="5/7/23; 11:31:38 AM by DW" created="Sun, 07 May 2023 15:31:37 GMT">
							<outline text="these fields don't exist in the users's table" created="Sun, 07 May 2023 15:36:38 GMT">
								<outline text="usersCategoryList" created="Sun, 07 May 2023 15:36:51 GMT"/>
								<outline text="homePageCategoryList" created="Sun, 07 May 2023 15:36:47 GMT"/>
								</outline>
							<outline text="feedlandHome must be getting these from appPrefs. " created="Sun, 07 May 2023 15:31:51 GMT"/>
							<outline text="so I am commenting out the code that copies it, because it makes the REPLACE INTO command fail. " created="Sun, 07 May 2023 15:32:03 GMT"/>
							<outline text="ultimately we're going to have to stop using appPrefs for this purpose, but the cleanup won't necessarily be easy without breakage. " created="Sun, 07 May 2023 15:32:24 GMT"/>
							</outline>
						<outline text="5/7/23; 1:46:47 PM by DW" created="Sat, 06 May 2023 17:46:46 GMT">
							<outline text="I originally wrote this when I didn't know that REPLACE INTO existed. " created="Sat, 06 May 2023 17:46:47 GMT"/>
							<outline text="Now when I'm working on Mark Twain, I need to be able to update some values but not others, because it doesn't use all the values that feedlandHome does. " created="Sat, 06 May 2023 17:47:00 GMT"/>
							<outline text="So I copy more carefully, only copying values that are present in the object provided by the caller. " created="Sat, 06 May 2023 17:47:46 GMT"/>
							</outline>
						<outline text="12/8/22; 12:48:09 PM by DW" created="Thu, 08 Dec 2022 17:48:09 GMT">
							<outline text="We created two new columns in the user table, emailAddress and emailSecret. They need to be copied when the prefs are updated." created="Thu, 08 Dec 2022 17:48:09 GMT"/>
							</outline>
						<outline text="11/15/22; 4:08:40 PM by DW" created="Tue, 15 Nov 2022 21:08:39 GMT">
							<outline text="Sometimes userRecFromDatabase is undefined, so we check before using it." created="Tue, 15 Nov 2022 21:08:40 GMT"/>
							</outline>
						<outline text="11/6/22; 12:21:13 PM by DW" created="Sun, 06 Nov 2022 17:21:13 GMT">
							<outline text="Rebuild the user's feed if one of the values that affects the feed changed. " created="Sun, 06 Nov 2022 17:21:13 GMT"/>
							</outline>
						<outline text="11/6/22; 9:38:59 AM by DW" created="Sun, 06 Nov 2022 13:38:59 GMT">
							<outline text="Add columns to users table -- myFeedTitle, myFeedDescription." created="Sun, 06 Nov 2022 13:39:00 GMT"/>
							</outline>
						<outline text="9/17/22; 9:18:49 AM by DW" created="Sat, 17 Sep 2022 13:18:49 GMT">
							<outline text="Add columns to users table, including whenCreated. " created="Sat, 17 Sep 2022 13:18:50 GMT"/>
							<outline text="Normalize category string so they are like what the user edits, not like what's stored in the subscriptions table. " created="Sat, 17 Sep 2022 13:39:39 GMT"/>
							</outline>
						<outline text="9/15/22; 1:56:51 PM by DW" created="Thu, 15 Sep 2022 17:56:51 GMT">
							<outline text="jsontext is the jsonified appPrefs from the users system. We pick the elements we're saving from the structure and put them in the database." created="Thu, 15 Sep 2022 17:56:52 GMT"/>
							</outline>
						</outline>
					<outline text="const now = new Date ();" created="Sat, 17 Sep 2022 13:17:52 GMT"/>
					<outline text="function normalizeCatString (s) {" created="Sat, 17 Sep 2022 13:35:55 GMT">
						<outline text="if (s == &quot;,all,&quot;) {" created="Sat, 17 Sep 2022 13:36:12 GMT">
							<outline text="s = &quot;All&quot;;" created="Sat, 17 Sep 2022 13:36:25 GMT"/>
							<outline text="}" created="Sat, 17 Sep 2022 13:36:23 GMT"/>
							</outline>
						<outline text="return (s);" created="Sat, 17 Sep 2022 13:36:12 GMT"/>
						<outline text="}" created="Sat, 17 Sep 2022 13:36:05 GMT"/>
						</outline>
					<outline text="" created="Sun, 07 May 2023 14:51:16 GMT"/>
					<outline text="var prefs;" created="Sat, 17 Sep 2022 13:13:13 GMT"/>
					<outline text="try {" created="Thu, 15 Sep 2022 17:58:17 GMT">
						<outline text="prefs = JSON.parse (jsontext);" created="Thu, 15 Sep 2022 17:58:27 GMT"/>
						<outline text="}" created="Thu, 15 Sep 2022 17:58:19 GMT"/>
						</outline>
					<outline text="catch (err) {" created="Thu, 15 Sep 2022 17:58:20 GMT">
						<outline text="callback (err);" created="Thu, 15 Sep 2022 17:58:52 GMT"/>
						<outline text="return;" created="Thu, 15 Sep 2022 17:58:59 GMT"/>
						<outline text="}" created="Thu, 15 Sep 2022 17:58:24 GMT"/>
						</outline>
					<outline text="" created="Sun, 07 May 2023 14:52:44 GMT"/>
					<outline text="var userRec = {" isComment="true">
						<outline text="screenname: maxStringLength (screenname, config.maxListNameLength),"/>
						<outline text="whenCreated: now,"/>
						<outline text="whenUpdated: now,"/>
						<outline text="" isComment="true" created="Sat, 17 Sep 2022 13:17:01 GMT"/>
						<outline text="ctStartups: prefs.ctStartups," isComment="true" created="Sat, 17 Sep 2022 13:03:09 GMT"/>
						<outline text="whenLastStartup: new Date (prefs.whenLastStartup)," isComment="true" created="Sat, 17 Sep 2022 13:03:32 GMT"/>
						<outline text="" isComment="true" created="Sat, 17 Sep 2022 13:03:11 GMT"/>
						<outline text="categories: normalizeCatString (prefs.usersCategoryList)," isComment="true" created="Sun, 11 Sep 2022 21:13:11 GMT"/>
						<outline text="homePageCategories: normalizeCatString (prefs.homePageCategoryList)," isComment="true" created="Sun, 11 Sep 2022 21:13:11 GMT"/>
						<outline text="" isComment="true" created="Mon, 26 Sep 2022 19:32:22 GMT"/>
						<outline text="newsproductCategoryList: normalizeCatString (prefs.newsproductCategoryList), //9/26/22 by DW" isComment="true" created="Mon, 26 Sep 2022 19:32:22 GMT"/>
						<outline text="newsproductTitle: prefs.newsproductTitle," isComment="true" created="Mon, 26 Sep 2022 19:32:22 GMT"/>
						<outline text="newsproductDescription: prefs.newsproductDescription," isComment="true" created="Mon, 26 Sep 2022 19:32:22 GMT"/>
						<outline text="newsproductImage: prefs.newsproductImage," isComment="true" created="Mon, 26 Sep 2022 19:32:22 GMT"/>
						<outline text="newsproductStyle: prefs.newsproductStyle," isComment="true" created="Mon, 26 Sep 2022 19:32:22 GMT"/>
						<outline text="newsproductScript: prefs.newsproductScript," isComment="true" created="Mon, 26 Sep 2022 19:32:22 GMT"/>
						<outline text="" isComment="true" created="Sun, 06 Nov 2022 13:37:17 GMT"/>
						<outline text="myFeedTitle: prefs.myFeedTitle,  //11/6/22 by DW" isComment="true" created="Sun, 06 Nov 2022 13:37:18 GMT"/>
						<outline text="myFeedDescription: prefs.myFeedDescription" isComment="true" created="Sun, 06 Nov 2022 13:37:18 GMT"/>
						<outline text="};"/>
						</outline>
					<outline text="" isComment="true" created="Sun, 07 May 2023 14:55:12 GMT"/>
					<outline text="function setupUserRec () { //5/7/23 by DW" created="Sun, 07 May 2023 14:55:12 GMT">
						<outline text="var userRec = {" created="Sun, 07 May 2023 14:55:40 GMT">
							<outline text="screenname: maxStringLength (screenname, config.maxListNameLength),"/>
							<outline text="whenCreated: now,"/>
							<outline text="whenUpdated: now,"/>
							<outline text="};" created="Sun, 07 May 2023 14:55:48 GMT"/>
							</outline>
						<outline text="function addDateToUserRec (name) { //5/11/23 by DW" created="Sun, 07 May 2023 14:51:16 GMT">
							<outline text="const value = new Date (prefs [name]);" created="Sun, 07 May 2023 14:52:15 GMT"/>
							<outline text="if (!isNaN (value)) {" created="Thu, 11 May 2023 12:46:44 GMT">
								<outline text="if (value !== undefined) {" created="Sun, 07 May 2023 14:51:30 GMT">
									<outline text="userRec [name] = value;" created="Sun, 07 May 2023 14:51:42 GMT"/>
									<outline text="}" created="Sun, 07 May 2023 14:51:37 GMT"/>
									</outline>
								<outline text="}" created="Thu, 11 May 2023 12:46:50 GMT"/>
								</outline>
							<outline text="}" created="Sun, 07 May 2023 14:51:29 GMT"/>
							</outline>
						<outline text="function addCategoriesToUserRec (name) { //5/11/23 by DW" created="Sun, 07 May 2023 14:51:16 GMT">
							<outline text="const value = prefs [name];" created="Sun, 07 May 2023 14:52:15 GMT"/>
							<outline text="if (value !== undefined) {" created="Sun, 07 May 2023 14:51:30 GMT">
								<outline text="userRec [name] = normalizeCatString (value);" created="Sun, 07 May 2023 14:51:42 GMT"/>
								<outline text="}" created="Sun, 07 May 2023 14:51:37 GMT"/>
								</outline>
							<outline text="}" created="Sun, 07 May 2023 14:51:29 GMT"/>
							</outline>
						<outline text="function addAppsToUserRec () { //5/25/23 by DW" created="Thu, 25 May 2023 16:08:05 GMT">
							<outline text="if (prefs.apps !== undefined) {" created="Thu, 25 May 2023 16:11:27 GMT">
								<outline text="userRec.apps = prefs.apps;" created="Thu, 25 May 2023 16:09:36 GMT"/>
								<outline text="}" created="Thu, 25 May 2023 16:11:32 GMT"/>
								</outline>
							<outline text="}" created="Thu, 25 May 2023 16:08:12 GMT"/>
							</outline>
						<outline text="function addToUserRec (name) {" created="Sun, 07 May 2023 14:51:16 GMT">
							<outline text="const value = prefs [name];" created="Sun, 07 May 2023 14:52:15 GMT"/>
							<outline text="if (value !== undefined) {" created="Sun, 07 May 2023 14:51:30 GMT">
								<outline text="userRec [name] = value;" created="Sun, 07 May 2023 14:51:42 GMT"/>
								<outline text="}" created="Sun, 07 May 2023 14:51:37 GMT"/>
								</outline>
							<outline text="}" created="Sun, 07 May 2023 14:51:29 GMT"/>
							</outline>
						<outline text="" created="Thu, 11 May 2023 17:10:11 GMT"/>
						<outline text="if (prefs.usersCategoryList !== undefined) { //5/11/23 by DW" created="Thu, 11 May 2023 17:10:11 GMT">
							<outline text="prefs.categories = prefs.usersCategoryList;" created="Thu, 11 May 2023 17:10:50 GMT"/>
							<outline text="}" created="Thu, 11 May 2023 17:10:20 GMT"/>
							</outline>
						<outline text="if (prefs.homePageCategoryList !== undefined) { //5/11/23 by DW" created="Thu, 11 May 2023 17:10:11 GMT">
							<outline text="prefs.homePageCategories = prefs.homePageCategoryList;" created="Thu, 11 May 2023 17:10:50 GMT"/>
							<outline text="}" created="Thu, 11 May 2023 17:10:20 GMT"/>
							</outline>
						<outline text="" created="Thu, 11 May 2023 17:10:12 GMT"/>
						<outline text="addToUserRec (&quot;ctStartups&quot;);" created="Sun, 07 May 2023 14:53:10 GMT"/>
						<outline text="addDateToUserRec (&quot;whenLastStartup&quot;);" created="Sun, 07 May 2023 14:53:10 GMT"/>
						<outline text="addCategoriesToUserRec (&quot;categories&quot;); //5/11/23 by DW" created="Sun, 07 May 2023 14:53:10 GMT"/>
						<outline text="addCategoriesToUserRec (&quot;homePageCategories&quot;); //5/11/23 by DW" created="Sun, 07 May 2023 14:53:10 GMT"/>
						<outline text="addCategoriesToUserRec (&quot;newsproductCategoryList&quot;); //5/11/23 by DW" created="Sun, 07 May 2023 14:53:10 GMT"/>
						<outline text="addToUserRec (&quot;newsproductTitle&quot;);" created="Sun, 07 May 2023 14:53:10 GMT"/>
						<outline text="addToUserRec (&quot;newsproductDescription&quot;);" created="Sun, 07 May 2023 14:53:10 GMT"/>
						<outline text="addToUserRec (&quot;newsproductImage&quot;);" created="Sun, 07 May 2023 14:53:10 GMT"/>
						<outline text="addToUserRec (&quot;newsproductStyle&quot;);" created="Sun, 07 May 2023 14:53:10 GMT"/>
						<outline text="addToUserRec (&quot;newsproductScript&quot;);" created="Sun, 07 May 2023 14:53:10 GMT"/>
						<outline text="addToUserRec (&quot;myFeedTitle&quot;);" created="Sun, 07 May 2023 14:53:10 GMT"/>
						<outline text="addToUserRec (&quot;myFeedDescription&quot;);" created="Sun, 07 May 2023 14:53:10 GMT"/>
						<outline text="addAppsToUserRec (); //5/25/23 by DW" created="Sun, 07 May 2023 14:53:10 GMT"/>
						<outline text="return (userRec);" created="Sun, 07 May 2023 14:57:20 GMT"/>
						<outline text="}" created="Sun, 07 May 2023 14:55:25 GMT"/>
						</outline>
					<outline text="var userRec = setupUserRec ();" created="Sun, 07 May 2023 14:55:12 GMT"/>
					<outline text="" created="Sun, 07 May 2023 14:55:13 GMT"/>
					<outline text="findUserWithScreenname (screenname, function (flInDatabase, userRecFromDatabase) {" created="Sat, 17 Sep 2022 13:07:53 GMT">
						<outline text="if (flInDatabase) {" created="Sat, 17 Sep 2022 13:08:27 GMT">
							<outline text="if (userRecFromDatabase.whenCreated != null) {" created="Sat, 17 Sep 2022 13:26:26 GMT">
								<outline text="userRec.whenCreated = userRecFromDatabase.whenCreated" created="Sat, 17 Sep 2022 13:15:52 GMT"/>
								<outline text="}" created="Sat, 17 Sep 2022 13:26:34 GMT"/>
								</outline>
							<outline text="userRec.emailAddress = userRecFromDatabase.emailAddress; //12/8/22 by DW" created="Sat, 17 Sep 2022 13:15:52 GMT"/>
							<outline text="userRec.emailSecret = userRecFromDatabase.emailSecret;" created="Sat, 17 Sep 2022 13:15:52 GMT"/>
							<outline text="userRec.role = userRecFromDatabase.role; //11/5/23 by DW" created="Sat, 17 Sep 2022 13:15:52 GMT"/>
							<outline text="}" created="Sat, 17 Sep 2022 13:08:43 GMT"/>
							</outline>
						<outline text="else { //12/12/22 by DW " created="Mon, 12 Dec 2022 14:22:44 GMT">
							<outline text="if (!config.flEnableNewUsers) {" created="Mon, 12 Dec 2022 14:24:27 GMT">
								<outline text="const message = &quot;Could not set the user's prefs because new users are not being accepted here at this time.&quot;;" created="Mon, 12 Dec 2022 14:25:08 GMT"/>
								<outline text="callback ({message});" created="Fri, 18 Mar 2022 15:46:22 GMT"/>
								<outline text="return;" created="Mon, 12 Dec 2022 14:26:24 GMT"/>
								<outline text="}" created="Mon, 12 Dec 2022 14:24:33 GMT"/>
								</outline>
							<outline text="}" created="Mon, 12 Dec 2022 14:22:46 GMT"/>
							</outline>
						<outline text="const sqltext = &quot;replace into users &quot; + davesql.encodeValues (userRec);"/>
						<outline text="davesql.runSqltext (sqltext, function (err, result) {">
							<outline text="if (err) {" created="Fri, 18 Mar 2022 15:46:18 GMT">
								<outline text="callback (err);" created="Fri, 18 Mar 2022 15:46:22 GMT"/>
								<outline text="}" created="Fri, 18 Mar 2022 15:46:25 GMT"/>
								</outline>
							<outline text="else {" created="Fri, 18 Mar 2022 15:46:27 GMT">
								<outline text="if (userRecFromDatabase !== undefined) { //11/15/22 by DW" created="Tue, 15 Nov 2022 21:08:02 GMT">
									<outline text="if ((userRecFromDatabase.myFeedTitle != prefs.myFeedTitle) || (userRecFromDatabase.myFeedDescription != prefs.myFeedDescription)) { //11/6/22 by DW" created="Sun, 06 Nov 2022 17:19:23 GMT">
										<outline text="config.buildUsersFeed (screenname); " created="Sun, 06 Nov 2022 17:01:02 GMT"/>
										<outline text="}" created="Sun, 06 Nov 2022 17:20:17 GMT"/>
										</outline>
									<outline text="}" created="Tue, 15 Nov 2022 21:08:15 GMT"/>
									</outline>
								<outline text="" created="Sun, 07 May 2023 15:37:56 GMT"/>
								<outline text="if (userRec.emailSecret !== undefined) { //5/7/23 by DW" created="Sun, 07 May 2023 15:37:57 GMT">
									<outline text="delete userRec.emailSecret;" created="Sun, 07 May 2023 15:38:46 GMT"/>
									<outline text="}" created="Sun, 07 May 2023 15:38:15 GMT"/>
									</outline>
								<outline text="" created="Sun, 07 May 2023 15:37:58 GMT"/>
								<outline text="callback (undefined, userRec);" created="Fri, 18 Mar 2022 15:46:28 GMT"/>
								<outline text="}" created="Fri, 18 Mar 2022 15:46:34 GMT"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="});" created="Sat, 17 Sep 2022 13:08:15 GMT"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function getAllUsers (callback) { //9/15/22 by DW" created="Thu, 15 Sep 2022 16:11:36 GMT">
					<outline text="Changes" isComment="true" created="Thu, 06 Oct 2022 16:30:40 GMT">
						<outline text="7/14/23; 11:41:42 AM by DW" created="Fri, 14 Jul 2023 15:41:41 GMT">
							<outline text="Sort by whenLastStartup, at most config.maxGetAllUsers people." created="Fri, 14 Jul 2023 15:41:43 GMT"/>
							</outline>
						<outline text="10/24/22; 10:26:04 AM by DW" created="Mon, 24 Oct 2022 14:25:38 GMT">
							<outline text="Include the number of subscriptions each user has." created="Mon, 24 Oct 2022 14:26:05 GMT"/>
							</outline>
						<outline text="10/6/22; 12:30:44 PM by DW" created="Thu, 06 Oct 2022 16:30:43 GMT">
							<outline text="Remove null values from returned array." created="Thu, 06 Oct 2022 16:30:44 GMT"/>
							</outline>
						</outline>
					<outline text="const sqltext = &quot;select users.screenname, users.ctStartups, users.whenLastStartup, users.whenCreated, users.whenUpdated, users.categories, users.homePageCategories, users.newsproductCategoryList, users.newsproductTitle, users.newsproductDescription, users.newsproductImage, users.newsproductStyle, count(*) as ctSubs from users inner join subscriptions on subscriptions.listname = users.screenname group by users.screenname order by users.whenLastStartup desc limit &quot; + davesql.encode (config.maxGetAllUsers) + &quot;;&quot;" created="Mon, 24 Oct 2022 14:04:28 GMT"/>
					<outline text="const sqltext = &quot;select users.screenname, users.ctStartups, users.whenLastStartup, users.whenCreated, users.whenUpdated, users.categories, users.homePageCategories, users.newsproductCategoryList, users.newsproductTitle, users.newsproductDescription, users.newsproductImage, users.newsproductStyle, count(*) as ctSubs from users inner join subscriptions on subscriptions.listname = users.screenname group by users.screenname;&quot;" isComment="true" created="Mon, 24 Oct 2022 14:04:28 GMT"/>
					<outline text="const sqltext = &quot;select * from users;&quot;;" isComment="true"/>
					<outline text="davesql.runSqltext (sqltext, function (err, result) {">
						<outline text="if (err) {" created="Fri, 18 Mar 2022 15:46:18 GMT">
							<outline text="callback (err);" created="Fri, 18 Mar 2022 15:46:22 GMT"/>
							<outline text="}" created="Fri, 18 Mar 2022 15:46:25 GMT"/>
							</outline>
						<outline text="else {" created="Fri, 18 Mar 2022 15:46:27 GMT">
							<outline text="removeNullValues (result); //10/6/22 by DW" created="Thu, 06 Oct 2022 16:40:49 GMT"/>
							<outline text="callback (undefined, result); " created="Fri, 18 Mar 2022 15:46:28 GMT"/>
							<outline text="}" created="Fri, 18 Mar 2022 15:46:34 GMT"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}" created="Thu, 15 Sep 2022 16:11:43 GMT"/>
					</outline>
				<outline text="function getUserCategories (screenname, callback) { //9/19/22 by DW" created="Tue, 13 Sep 2022 17:54:36 GMT">
					<outline text="findUserWithScreenname (screenname, function (flInDatabase, userRec) {" created="Sat, 17 Sep 2022 13:07:53 GMT">
						<outline text="if (flInDatabase) {" created="Sat, 17 Sep 2022 13:08:27 GMT">
							<outline text="const catsRec = {" created="Mon, 19 Sep 2022 13:45:27 GMT">
								<outline text="screenname," created="Mon, 19 Sep 2022 13:46:41 GMT"/>
								<outline text="categories: userRec.categories," created="Mon, 19 Sep 2022 13:45:58 GMT"/>
								<outline text="homePageCategories: userRec.homePageCategories" created="Mon, 19 Sep 2022 13:46:02 GMT"/>
								<outline text="};" created="Mon, 19 Sep 2022 13:45:32 GMT"/>
								</outline>
							<outline text="callback (undefined, catsRec);" created="Mon, 19 Sep 2022 13:44:59 GMT"/>
							<outline text="}" created="Sat, 17 Sep 2022 13:08:43 GMT"/>
							</outline>
						<outline text="else {" created="Mon, 19 Sep 2022 13:41:50 GMT">
							<outline text="callback ({message: &quot;Can't get the categories because there is no user named \&quot;&quot; + screenname + &quot;\&quot;.&quot;});"/>
							<outline text="}" created="Mon, 19 Sep 2022 13:41:53 GMT"/>
							</outline>
						<outline text="});" created="Sat, 17 Sep 2022 13:08:15 GMT"/>
						</outline>
					<outline text="}" created="Mon, 19 Sep 2022 13:40:14 GMT"/>
					</outline>
				<outline text="function getUserPrefs (screenname, callback) { //9/26/22 by DW" created="Tue, 13 Sep 2022 17:54:36 GMT">
					<outline text="Changes" isComment="true" created="Fri, 16 Dec 2022 14:10:47 GMT">
						<outline text="12/16/22; 9:10:50 AM by DW" created="Fri, 16 Dec 2022 14:10:49 GMT">
							<outline text="Don't return the emailSecret." created="Fri, 16 Dec 2022 14:10:51 GMT"/>
							</outline>
						</outline>
					<outline text="findUserWithScreenname (screenname, function (flInDatabase, userRec) {" created="Sat, 17 Sep 2022 13:07:53 GMT">
						<outline text="if (flInDatabase) {" created="Sat, 17 Sep 2022 13:08:27 GMT">
							<outline text="if (userRec.emailSecret !== undefined) { //12/16/22 by DW" created="Fri, 16 Dec 2022 14:11:18 GMT">
								<outline text="delete userRec.emailSecret;" created="Fri, 16 Dec 2022 14:11:55 GMT"/>
								<outline text="}" created="Fri, 16 Dec 2022 14:11:42 GMT"/>
								</outline>
							<outline text="if (userRec.apps !== undefined) { //5/25/23 by DW" created="Thu, 25 May 2023 16:26:02 GMT">
								<outline text="try {" created="Thu, 25 May 2023 16:26:25 GMT">
									<outline text="userRec.apps = JSON.parse (userRec.apps);" created="Thu, 25 May 2023 16:26:41 GMT"/>
									<outline text="}" created="Thu, 25 May 2023 16:26:31 GMT"/>
									</outline>
								<outline text="catch (err) {" created="Thu, 25 May 2023 16:26:31 GMT">
									<outline text="console.log (&quot;getUserPrefs: err.message == &quot; + err.message);" created="Thu, 25 May 2023 16:26:49 GMT"/>
									<outline text="}" created="Thu, 25 May 2023 16:26:35 GMT"/>
									</outline>
								<outline text="}" created="Thu, 25 May 2023 16:26:11 GMT"/>
								</outline>
							<outline text="callback (undefined, removeNullValuesFromObject (userRec));" created="Mon, 19 Sep 2022 13:44:59 GMT"/>
							<outline text="}" created="Sat, 17 Sep 2022 13:08:43 GMT"/>
							</outline>
						<outline text="else {" created="Mon, 19 Sep 2022 13:41:50 GMT">
							<outline text="callback ({message: &quot;Can't get the info because there is no user named \&quot;&quot; + screenname + &quot;\&quot;.&quot;});"/>
							<outline text="}" created="Mon, 19 Sep 2022 13:41:53 GMT"/>
							</outline>
						<outline text="});" created="Sat, 17 Sep 2022 13:08:15 GMT"/>
						</outline>
					<outline text="}" created="Mon, 19 Sep 2022 13:40:14 GMT"/>
					</outline>
				<outline text="" created="Fri, 10 Nov 2023 16:03:08 GMT"/>
				<outline text="function getUserInfo (screenname, callback) { //11/10/23 by DW" created="Fri, 10 Nov 2023 16:03:09 GMT">
					<outline text="getUserPrefs (screenname, function (err, userRec) {" created="Fri, 10 Nov 2023 16:03:48 GMT">
						<outline text="if (err) {" created="Fri, 10 Nov 2023 16:04:10 GMT">
							<outline text="callback (err);" created="Fri, 10 Nov 2023 16:04:13 GMT"/>
							<outline text="}" created="Fri, 10 Nov 2023 16:04:16 GMT"/>
							</outline>
						<outline text="else {" created="Fri, 10 Nov 2023 16:04:17 GMT">
							<outline text="delete userRec.apps;" created="Fri, 10 Nov 2023 16:04:39 GMT"/>
							<outline text="delete userRec.emailAddress;" created="Fri, 10 Nov 2023 16:45:30 GMT"/>
							<outline text="delete userRec.role;" created="Fri, 10 Nov 2023 16:45:30 GMT"/>
							<outline text="callback (undefined, userRec);" created="Fri, 10 Nov 2023 16:04:59 GMT"/>
							<outline text="}" created="Fri, 10 Nov 2023 16:04:19 GMT"/>
							</outline>
						<outline text="});" created="Fri, 10 Nov 2023 16:04:05 GMT"/>
						</outline>
					<outline text="}" created="Fri, 10 Nov 2023 16:03:21 GMT"/>
					</outline>
				<outline text="" created="Thu, 25 May 2023 14:36:18 GMT"/>
				<outline text="function getPrefsFromJson (screenname, callback) { //5/25/23 by DW" isComment="true" created="Thu, 25 May 2023 14:36:18 GMT">
					<outline text="const sqltext = &quot;select prefs from users where screenname = &quot; + davesql.encode (screenname) + &quot;;&quot;;" created="Thu, 25 May 2023 14:37:09 GMT"/>
					<outline text="davesql.runSqltext (sqltext, function (err, result) {">
						<outline text="if (err) {" created="Fri, 18 Mar 2022 15:46:18 GMT">
							<outline text="callback (err);" created="Fri, 18 Mar 2022 15:46:22 GMT"/>
							<outline text="}" created="Fri, 18 Mar 2022 15:46:25 GMT"/>
							</outline>
						<outline text="else {">
							<outline text="if (result.length == 0) {">
								<outline text="callback ({&quot;message&quot;: &quot;The user is not in the database.&quot;});"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="callback (undefined, result [0]);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}" created="Thu, 25 May 2023 14:36:41 GMT"/>
					</outline>
				<outline text="function setPrefsInJson (screenname, jsontext, callback) { //5/25/23 by DW" isComment="true" created="Thu, 25 May 2023 14:41:26 GMT">
					<outline text="const userRec = {" created="Thu, 25 May 2023 14:46:05 GMT">
						<outline text="screenname," created="Thu, 25 May 2023 14:47:29 GMT"/>
						<outline text="prefs: jsontext" created="Thu, 25 May 2023 14:47:35 GMT"/>
						<outline text="}" created="Thu, 25 May 2023 14:47:43 GMT"/>
						</outline>
					<outline text="const sqltext = &quot;replace into users &quot; + davesql.encodeValues (userRec);" created="Thu, 25 May 2023 14:46:05 GMT"/>
					<outline text="davesql.runSqltext (sqltext, function (err, result) {">
						<outline text="if (err) {" created="Fri, 18 Mar 2022 15:46:18 GMT">
							<outline text="callback (err);" created="Fri, 18 Mar 2022 15:46:22 GMT"/>
							<outline text="}" created="Fri, 18 Mar 2022 15:46:25 GMT"/>
							</outline>
						<outline text="else {" created="Fri, 18 Mar 2022 15:46:27 GMT">
							<outline text="callback (undefined, true);" created="Fri, 18 Mar 2022 15:46:22 GMT"/>
							<outline text="}" created="Fri, 18 Mar 2022 15:46:34 GMT"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}" created="Thu, 25 May 2023 14:41:37 GMT"/>
					</outline>
				<outline text="" created="Sat, 17 Sep 2022 14:59:49 GMT"/>
				<outline text="function addToLikesTable (screenname, itemId, callback) { //10/16/22 by DW" created="Sun, 16 Oct 2022 14:50:45 GMT">
					<outline text="Changes" isComment="true" created="Sun, 16 Oct 2022 14:51:51 GMT">
						<outline text="10/27/22; 1:15:09 PM by DW" created="Thu, 27 Oct 2022 17:15:08 GMT">
							<outline text="Pass the screenname to buildLikesFeed. " created="Thu, 27 Oct 2022 17:15:09 GMT"/>
							</outline>
						<outline text="10/16/22; 10:51:53 AM by DW" created="Sun, 16 Oct 2022 14:51:53 GMT">
							<outline text="After simplifying likes to being a string in the item table, so it could be quickly accessed as part of getting an item, I realized we also need the likes table, for more interesting queries." created="Sun, 16 Oct 2022 14:51:54 GMT"/>
							</outline>
						</outline>
					<outline text="const likesRec = {">
						<outline text="listName: screenname,"/>
						<outline text="itemId," created="Fri, 06 May 2022 14:32:14 GMT"/>
						<outline text="emotion: 1, //the default, just plain like" created="Fri, 06 May 2022 16:26:23 GMT"/>
						<outline text="whenCreated: new Date ()"/>
						<outline text="};"/>
						</outline>
					<outline text="const sqltext = &quot;replace into likes &quot; + davesql.encodeValues (likesRec);"/>
					<outline text="davesql.runSqltext (sqltext, function (err, result) {">
						<outline text="if (err) {" created="Fri, 18 Mar 2022 15:46:18 GMT">
							<outline text="if (callback !== undefined) {" created="Sun, 16 Oct 2022 14:53:52 GMT">
								<outline text="callback (err);" created="Fri, 18 Mar 2022 15:46:22 GMT"/>
								<outline text="}" created="Sun, 16 Oct 2022 14:53:58 GMT"/>
								</outline>
							<outline text="}" created="Fri, 18 Mar 2022 15:46:25 GMT"/>
							</outline>
						<outline text="else {" created="Fri, 18 Mar 2022 15:46:27 GMT">
							<outline text="if (callback !== undefined) {" created="Sun, 16 Oct 2022 14:53:52 GMT">
								<outline text="callback (undefined, likesRec);" created="Fri, 18 Mar 2022 15:46:22 GMT"/>
								<outline text="}" created="Sun, 16 Oct 2022 14:53:58 GMT"/>
								</outline>
							<outline text="buildLikesFeed (screenname); //9/17/22 by DW" created="Sat, 17 Sep 2022 17:00:27 GMT"/>
							<outline text="}" created="Fri, 18 Mar 2022 15:46:34 GMT"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}" created="Sun, 16 Oct 2022 14:51:02 GMT"/>
					</outline>
				<outline text="function removeFromLikesTable (screenname, itemId, callback) { //10/16/22 by DW" created="Sun, 16 Oct 2022 14:50:45 GMT">
					<outline text="const sqltext = &quot;delete from likes where listName=&quot; + davesql.encode (screenname) + &quot; and itemId=&quot; + davesql.encode (itemId) + &quot;;&quot;;"/>
					<outline text="davesql.runSqltext (sqltext, function (err, result) {">
						<outline text="if (err) {" created="Fri, 18 Mar 2022 15:46:18 GMT">
							<outline text="if (callback !== undefined) {" created="Sun, 16 Oct 2022 14:53:52 GMT">
								<outline text="callback (err);" created="Fri, 18 Mar 2022 15:46:22 GMT"/>
								<outline text="}" created="Sun, 16 Oct 2022 14:53:58 GMT"/>
								</outline>
							<outline text="}" created="Fri, 18 Mar 2022 15:46:25 GMT"/>
							</outline>
						<outline text="else {" created="Fri, 18 Mar 2022 15:46:27 GMT">
							<outline text="if (callback !== undefined) {" created="Sun, 16 Oct 2022 14:53:52 GMT">
								<outline text="const likesRec = new Object (); //return an empty object" created="Fri, 06 May 2022 16:45:28 GMT"/>
								<outline text="callback (undefined, likesRec);" created="Fri, 18 Mar 2022 15:46:22 GMT"/>
								<outline text="}" created="Sun, 16 Oct 2022 14:53:58 GMT"/>
								</outline>
							<outline text="}" created="Fri, 18 Mar 2022 15:46:34 GMT"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}" created="Sun, 16 Oct 2022 14:51:02 GMT"/>
					</outline>
				<outline text="function convertLikesToArray (likesString) { //10/15/22 by DW" created="Tue, 06 Sep 2022 15:47:13 GMT">
					<outline text="var likesArray = new Array ();" created="Sat, 15 Oct 2022 15:56:26 GMT"/>
					<outline text="if ((likesString !== undefined) &amp;&amp; (likesString !== null) &amp;&amp; (likesString.length &gt; 0)) { ">
						<outline text="var splits = likesString.split (&quot;,&quot;);" created="Mon, 05 Sep 2022 13:47:16 GMT"/>
						<outline text="splits.forEach (function (name) {" created="Mon, 05 Sep 2022 13:48:05 GMT">
							<outline text="if (name.length &gt; 0) {" created="Mon, 05 Sep 2022 13:48:31 GMT">
								<outline text="likesArray.push (name);" created="Mon, 05 Sep 2022 13:48:39 GMT"/>
								<outline text="}" created="Mon, 05 Sep 2022 13:48:36 GMT"/>
								</outline>
							<outline text="});" created="Mon, 05 Sep 2022 13:48:20 GMT"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="return (likesArray);" created="Tue, 06 Sep 2022 15:56:02 GMT"/>
					<outline text="}" created="Tue, 06 Sep 2022 15:47:18 GMT"/>
					</outline>
				<outline text="function convertLikesarrayToString (likesArray) {" created="Sat, 15 Oct 2022 16:10:34 GMT">
					<outline text="var likesString = &quot;&quot;;" created="Sat, 15 Oct 2022 16:10:55 GMT"/>
					<outline text="likesArray.forEach (function (name) {" created="Sat, 15 Oct 2022 16:10:45 GMT">
						<outline text="likesString += &quot;,&quot; + name;" created="Sat, 15 Oct 2022 16:11:28 GMT"/>
						<outline text="});" created="Sat, 15 Oct 2022 16:10:53 GMT"/>
						</outline>
					<outline text="if (likesString.length &gt; 0) {" created="Sat, 15 Oct 2022 16:13:23 GMT">
						<outline text="likesString += &quot;,&quot;;" created="Sat, 15 Oct 2022 16:11:56 GMT"/>
						<outline text="}" created="Sat, 15 Oct 2022 16:13:34 GMT"/>
						</outline>
					<outline text="return (likesString);" created="Sat, 15 Oct 2022 16:11:46 GMT"/>
					<outline text="}" created="Sat, 15 Oct 2022 16:10:41 GMT"/>
					</outline>
				<outline text="function isLiked (screenname, itemId, callback) {" created="Fri, 06 May 2022 14:34:46 GMT">
					<outline text="Changes" isComment="true" created="Sat, 15 Oct 2022 16:01:43 GMT">
						<outline text="10/15/22; 12:01:48 PM by DW" created="Sat, 15 Oct 2022 16:01:47 GMT">
							<outline text="Previously we had a separate table for Likes, now it's just a field in an item. " created="Sat, 15 Oct 2022 16:01:48 GMT"/>
							</outline>
						</outline>
					<outline text="getItemFromDatabase (itemId, function (err, itemRec) {" created="Sat, 07 May 2022 14:04:32 GMT">
						<outline text="if (err) {" created="Fri, 18 Mar 2022 15:46:18 GMT">
							<outline text="callback (err);" created="Fri, 18 Mar 2022 15:46:22 GMT"/>
							<outline text="}" created="Fri, 18 Mar 2022 15:46:25 GMT"/>
							</outline>
						<outline text="else {" created="Sat, 07 May 2022 14:05:01 GMT">
							<outline text="let likesArray = convertLikesToArray (itemRec.likes), flLiked = false;" created="Sat, 15 Oct 2022 15:52:01 GMT"/>
							<outline text="likesArray.forEach (function (name) {" created="Sat, 15 Oct 2022 16:00:09 GMT">
								<outline text="if (name == screenname) {" created="Sat, 15 Oct 2022 16:00:21 GMT">
									<outline text="flLiked = true;" created="Sat, 15 Oct 2022 16:00:35 GMT"/>
									<outline text="}" created="Sat, 15 Oct 2022 16:00:32 GMT"/>
									</outline>
								<outline text="});" created="Sat, 15 Oct 2022 16:00:16 GMT"/>
								</outline>
							<outline text="callback (undefined, flLiked, itemRec);" created="Sat, 15 Oct 2022 16:01:11 GMT"/>
							<outline text="}" created="Sat, 07 May 2022 14:05:03 GMT"/>
							</outline>
						<outline text="});" created="Sat, 07 May 2022 14:04:44 GMT"/>
						</outline>
					<outline text="" isComment="true" created="Sat, 15 Oct 2022 15:49:56 GMT"/>
					<outline text="var sqltext = &quot;select * from likes where listName=&quot; + davesql.encode (listName) + &quot; and itemId=&quot; + davesql.encode (itemId) + &quot;;&quot;;" isComment="true"/>
					<outline text="davesql.runSqltext (sqltext, function (err, result) {" isComment="true">
						<outline text="if (err) {">
							<outline text="callback (false);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="if (result.length == 0) {">
								<outline text="callback (false);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="callback (true, result [0]);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}" created="Fri, 06 May 2022 14:35:35 GMT"/>
					</outline>
				<outline text="function toggleItemLike (screenname, itemId, callback) {" created="Fri, 06 May 2022 14:27:42 GMT">
					<outline text="Changes" isComment="true" created="Sat, 07 May 2022 13:55:25 GMT">
						<outline text="10/15/22; 12:03:18 PM by DW" created="Sat, 15 Oct 2022 16:03:18 GMT">
							<outline text="Previously we had a separate table for Likes, now it's just a field in an item. " created="Sat, 15 Oct 2022 16:01:48 GMT"/>
							</outline>
						<outline text="5/7/22; 9:55:27 AM by DW" created="Sat, 07 May 2022 13:55:26 GMT">
							<outline text="Toggle the liked state of an item for one user. listName == the user's id, there's one list per user. " created="Sat, 07 May 2022 13:55:28 GMT"/>
							<outline text="We maintail the likes table and the ctLikes column in the items table. " created="Sat, 07 May 2022 13:56:14 GMT"/>
							</outline>
						</outline>
					<outline text="function updateLikesTable (flLiked) {" created="Sun, 16 Oct 2022 15:01:06 GMT">
						<outline text="if (flLiked) {" created="Sun, 16 Oct 2022 15:01:27 GMT">
							<outline text="removeFromLikesTable (screenname, itemId);" created="Sun, 16 Oct 2022 15:02:47 GMT"/>
							<outline text="}" created="Sun, 16 Oct 2022 15:01:32 GMT"/>
							</outline>
						<outline text="else {" created="Sun, 16 Oct 2022 15:01:32 GMT">
							<outline text="addToLikesTable (screenname, itemId);" created="Sun, 16 Oct 2022 15:02:54 GMT"/>
							<outline text="}" created="Sun, 16 Oct 2022 15:01:34 GMT"/>
							</outline>
						<outline text="}" created="Sun, 16 Oct 2022 15:01:12 GMT"/>
						</outline>
					<outline text="isLiked (screenname, itemId, function (err, flLiked, itemRec) {" created="Fri, 06 May 2022 14:36:46 GMT">
						<outline text="if (err) {" created="Sat, 15 Oct 2022 16:05:23 GMT">
							<outline text="callback (err);" created="Sat, 15 Oct 2022 16:05:27 GMT"/>
							<outline text="}" created="Sat, 15 Oct 2022 16:05:30 GMT"/>
							</outline>
						<outline text="else {" created="Sat, 15 Oct 2022 16:05:31 GMT">
							<outline text="let likesArray = convertLikesToArray (itemRec.likes), likesString = &quot;&quot;;" created="Sat, 15 Oct 2022 15:52:01 GMT"/>
							<outline text="if (flLiked) { //remove from array" created="Sat, 15 Oct 2022 16:06:57 GMT">
								<outline text="likesArray.forEach (function (name) {" created="Sat, 15 Oct 2022 16:07:46 GMT">
									<outline text="if (name != screenname) {" created="Sat, 15 Oct 2022 16:09:07 GMT">
										<outline text="likesString += &quot;,&quot; + name;" created="Sat, 15 Oct 2022 16:08:29 GMT"/>
										<outline text="}" created="Sat, 15 Oct 2022 16:09:12 GMT"/>
										</outline>
									<outline text="});" created="Sat, 15 Oct 2022 16:08:00 GMT"/>
									</outline>
								<outline text="if (likesString.length &gt; 0) {" created="Sat, 15 Oct 2022 16:13:23 GMT">
									<outline text="likesString += &quot;,&quot;;" created="Sat, 15 Oct 2022 16:11:56 GMT"/>
									<outline text="}" created="Sat, 15 Oct 2022 16:13:34 GMT"/>
									</outline>
								<outline text="}" created="Sat, 15 Oct 2022 16:07:05 GMT"/>
								</outline>
							<outline text="else { //add to array" created="Sat, 15 Oct 2022 16:07:06 GMT">
								<outline text="likesArray.push (screenname);" created="Sat, 15 Oct 2022 16:09:32 GMT"/>
								<outline text="likesString = convertLikesarrayToString (likesArray);" created="Sat, 15 Oct 2022 16:09:48 GMT"/>
								<outline text="}" created="Sat, 15 Oct 2022 16:07:08 GMT"/>
								</outline>
							<outline text="itemRec.likes = likesString;" created="Sat, 15 Oct 2022 16:14:16 GMT"/>
							<outline text="itemRec.ctLikes = likesArray.length;" created="Sun, 16 Oct 2022 12:40:25 GMT"/>
							<outline text="saveItem (itemRec, function (err, data) {" created="Fri, 22 Apr 2022 13:57:52 GMT">
								<outline text="if (err) {" created="Fri, 22 Apr 2022 14:13:10 GMT">
									<outline text="if (callback !== undefined) {" created="Sat, 07 May 2022 14:23:48 GMT">
										<outline text="callback (err);" created="Fri, 18 Mar 2022 15:46:22 GMT"/>
										<outline text="}" created="Sat, 07 May 2022 14:23:55 GMT"/>
										</outline>
									<outline text="}" created="Fri, 22 Apr 2022 14:13:16 GMT"/>
									</outline>
								<outline text="else {" created="Fri, 22 Apr 2022 14:13:17 GMT">
									<outline text="var convertedRec = convertDatabaseItem (itemRec);" created="Sat, 07 May 2022 14:06:36 GMT"/>
									<outline text="var jstruct = {" created="Thu, 24 Mar 2022 16:19:01 GMT">
										<outline text="item: convertedRec," created="Thu, 24 Mar 2022 16:19:22 GMT"/>
										<outline text="theFeed: undefined" created="Thu, 24 Mar 2022 16:19:28 GMT"/>
										<outline text="}" created="Thu, 24 Mar 2022 16:19:15 GMT"/>
										</outline>
									<outline text="updateSocketSubscribers (&quot;updatedItem&quot;, jstruct);" created="Sun, 20 Mar 2022 22:49:29 GMT"/>
									<outline text="updateLikesTable (flLiked);" created="Sun, 16 Oct 2022 15:00:42 GMT"/>
									<outline text="if (callback !== undefined) {" created="Sat, 07 May 2022 14:23:48 GMT">
										<outline text="callback (undefined, convertedRec);" created="Fri, 22 Apr 2022 14:13:19 GMT"/>
										<outline text="}" created="Sat, 07 May 2022 14:23:55 GMT"/>
										</outline>
									<outline text="}" created="Fri, 22 Apr 2022 14:13:28 GMT"/>
									</outline>
								<outline text="});" created="Fri, 22 Apr 2022 14:13:04 GMT"/>
								</outline>
							<outline text="}" created="Sat, 15 Oct 2022 16:05:33 GMT"/>
							</outline>
						<outline text="});" created="Fri, 06 May 2022 14:38:29 GMT"/>
						</outline>
					<outline text="function bumpItemLikedCount (itemId, flLiked, callback) { " isComment="true" created="Sat, 07 May 2022 13:58:48 GMT">
						<outline text="Changes" isComment="true" created="Sat, 07 May 2022 14:14:04 GMT">
							<outline text="5/7/22; 11:00:48 AM by DW" created="Sat, 07 May 2022 15:00:48 GMT">
								<outline text="Note we don't send the feed along with the socket update, because we don't have it, and the client doesn't even use it, so leave it undefined. " created="Sat, 07 May 2022 15:00:48 GMT"/>
								</outline>
							<outline text="5/7/22; 10:14:08 AM by DW" created="Sat, 07 May 2022 14:14:07 GMT">
								<outline text="Increment or decrement the item's ctLiked value. flLiked is true the item is liked and it wasn't liked before." created="Sat, 07 May 2022 14:14:09 GMT"/>
								</outline>
							</outline>
						<outline text="getItemFromDatabase (itemId, function (err, itemRec) {" created="Sat, 07 May 2022 14:04:32 GMT">
							<outline text="if (err) {" created="Fri, 18 Mar 2022 15:46:18 GMT">
								<outline text="if (callback !== undefined) {" created="Sat, 07 May 2022 14:23:48 GMT">
									<outline text="callback (err);" created="Fri, 18 Mar 2022 15:46:22 GMT"/>
									<outline text="}" created="Sat, 07 May 2022 14:23:55 GMT"/>
									</outline>
								<outline text="}" created="Fri, 18 Mar 2022 15:46:25 GMT"/>
								</outline>
							<outline text="else {" created="Sat, 07 May 2022 14:05:01 GMT">
								<outline text="if (flLiked) {" created="Sat, 07 May 2022 14:09:39 GMT">
									<outline text="itemRec.ctLikes++;" created="Sat, 07 May 2022 14:10:01 GMT"/>
									<outline text="}" created="Sat, 07 May 2022 14:09:43 GMT"/>
									</outline>
								<outline text="else {" created="Sat, 07 May 2022 14:09:44 GMT">
									<outline text="if (itemRec.ctLikes &gt; 0) {" created="Sat, 07 May 2022 14:10:25 GMT">
										<outline text="itemRec.ctLikes--;" created="Sat, 07 May 2022 14:10:01 GMT"/>
										<outline text="}" created="Sat, 07 May 2022 14:10:29 GMT"/>
										</outline>
									<outline text="}" created="Sat, 07 May 2022 14:09:46 GMT"/>
									</outline>
								<outline text="saveItem (itemRec, function (err, data) {" created="Fri, 22 Apr 2022 13:57:52 GMT">
									<outline text="if (err) {" created="Fri, 22 Apr 2022 14:13:10 GMT">
										<outline text="if (callback !== undefined) {" created="Sat, 07 May 2022 14:23:48 GMT">
											<outline text="callback (err);" created="Fri, 18 Mar 2022 15:46:22 GMT"/>
											<outline text="}" created="Sat, 07 May 2022 14:23:55 GMT"/>
											</outline>
										<outline text="}" created="Fri, 22 Apr 2022 14:13:16 GMT"/>
										</outline>
									<outline text="else {" created="Fri, 22 Apr 2022 14:13:17 GMT">
										<outline text="var convertedRec = convertDatabaseItem (itemRec);" created="Sat, 07 May 2022 14:06:36 GMT"/>
										<outline text="var jstruct = {" created="Thu, 24 Mar 2022 16:19:01 GMT">
											<outline text="item: convertedRec," created="Thu, 24 Mar 2022 16:19:22 GMT"/>
											<outline text="theFeed: undefined" created="Thu, 24 Mar 2022 16:19:28 GMT"/>
											<outline text="}" created="Thu, 24 Mar 2022 16:19:15 GMT"/>
											</outline>
										<outline text="updateSocketSubscribers (&quot;updatedItem&quot;, jstruct);" created="Sun, 20 Mar 2022 22:49:29 GMT"/>
										<outline text="if (callback !== undefined) {" created="Sat, 07 May 2022 14:23:48 GMT">
											<outline text="callback (undefined, convertedRec);" created="Fri, 22 Apr 2022 14:13:19 GMT"/>
											<outline text="}" created="Sat, 07 May 2022 14:23:55 GMT"/>
											</outline>
										<outline text="}" created="Fri, 22 Apr 2022 14:13:28 GMT"/>
										</outline>
									<outline text="});" created="Fri, 22 Apr 2022 14:13:04 GMT"/>
									</outline>
								<outline text="}" created="Sat, 07 May 2022 14:05:03 GMT"/>
								</outline>
							<outline text="});" created="Sat, 07 May 2022 14:04:44 GMT"/>
							</outline>
						<outline text="}" created="Sat, 07 May 2022 13:59:03 GMT"/>
						</outline>
					<outline text="isLiked (listName, itemId, function (flLiked, likeRec) {" isComment="true" created="Fri, 06 May 2022 14:36:46 GMT">
						<outline text="var sqltext, likesRec;" created="Fri, 06 May 2022 14:40:07 GMT"/>
						<outline text="if (flLiked) {" created="Fri, 06 May 2022 14:38:36 GMT">
							<outline text="sqltext = &quot;delete from likes where listName=&quot; + davesql.encode (listName) + &quot; and itemId=&quot; + davesql.encode (itemId) + &quot;;&quot;;"/>
							<outline text="likesRec = new Object (); //return an empty object" created="Fri, 06 May 2022 16:45:28 GMT"/>
							<outline text="}" created="Fri, 06 May 2022 14:38:38 GMT"/>
							</outline>
						<outline text="else {" created="Fri, 06 May 2022 14:38:39 GMT">
							<outline text="likesRec = {">
								<outline text="listName,"/>
								<outline text="itemId," created="Fri, 06 May 2022 14:32:14 GMT"/>
								<outline text="emotion: 1, //the default, just plain like" created="Fri, 06 May 2022 16:26:23 GMT"/>
								<outline text="whenCreated: new Date ()"/>
								<outline text="};"/>
								</outline>
							<outline text="sqltext = &quot;replace into likes &quot; + davesql.encodeValues (likesRec);"/>
							<outline text="}" created="Fri, 06 May 2022 14:38:41 GMT"/>
							</outline>
						<outline text="davesql.runSqltext (sqltext, function (err, result) {">
							<outline text="if (err) {" created="Fri, 18 Mar 2022 15:46:18 GMT">
								<outline text="callback (err);" created="Fri, 18 Mar 2022 15:46:22 GMT"/>
								<outline text="}" created="Fri, 18 Mar 2022 15:46:25 GMT"/>
								</outline>
							<outline text="else {" created="Fri, 18 Mar 2022 15:46:27 GMT">
								<outline text="console.log (&quot;toggleItemLike: listName == &quot; + listName + &quot;, itemId == &quot; + itemId);" created="Sat, 19 Mar 2022 14:48:47 GMT"/>
								<outline text="bumpItemLikedCount (itemId, !flLiked, function () {" created="Sat, 07 May 2022 13:57:58 GMT">
									<outline text="buildLikesFeed (); //9/17/22 by DW" created="Sat, 17 Sep 2022 17:00:27 GMT"/>
									<outline text="callback (undefined, likesRec);" created="Fri, 18 Mar 2022 15:46:28 GMT"/>
									<outline text="});" created="Sun, 18 Sep 2022 22:29:51 GMT"/>
									</outline>
								<outline text="}" created="Fri, 18 Mar 2022 15:46:34 GMT"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="});" created="Fri, 06 May 2022 14:38:29 GMT"/>
						</outline>
					<outline text="}" created="Fri, 06 May 2022 14:28:52 GMT"/>
					</outline>
				<outline text="function getLikes (itemId, callback) {" created="Fri, 06 May 2022 16:04:08 GMT">
					<outline text="getItemFromDatabase (itemId, function (err, itemRec) {" created="Sat, 15 Oct 2022 16:20:54 GMT">
						<outline text="if (err) {" created="Sat, 15 Oct 2022 16:21:45 GMT">
							<outline text="callback (err);" created="Sat, 15 Oct 2022 16:21:47 GMT"/>
							<outline text="}" created="Sat, 15 Oct 2022 16:21:52 GMT"/>
							</outline>
						<outline text="else {" created="Sat, 15 Oct 2022 16:21:53 GMT">
							<outline text="let likesArray = convertLikesToArray (itemRec.likes), returnedArray = new Array ();" created="Sat, 15 Oct 2022 15:52:01 GMT"/>
							<outline text="likesArray.forEach (function (name) {" created="Sat, 15 Oct 2022 16:22:34 GMT">
								<outline text="returnedArray.push ({" created="Fri, 06 May 2022 16:15:49 GMT">
									<outline text="who: name" created="Fri, 06 May 2022 16:15:59 GMT"/>
									<outline text="});" created="Fri, 06 May 2022 16:15:53 GMT"/>
									</outline>
								<outline text="});" created="Sat, 15 Oct 2022 16:22:40 GMT"/>
								</outline>
							<outline text="callback (undefined, returnedArray);" created="Fri, 18 Mar 2022 15:46:28 GMT"/>
							<outline text="}" created="Sat, 15 Oct 2022 16:21:55 GMT"/>
							</outline>
						<outline text="});" created="Sat, 15 Oct 2022 16:21:03 GMT"/>
						</outline>
					<outline text="" isComment="true" created="Sat, 15 Oct 2022 16:20:54 GMT"/>
					<outline text="var sqltext = &quot;select * from likes where itemId=&quot; + davesql.encode (itemId) + &quot;;&quot;;" isComment="true"/>
					<outline text="davesql.runSqltext (sqltext, function (err, result) {" isComment="true">
						<outline text="if (err) {" created="Fri, 18 Mar 2022 15:46:18 GMT">
							<outline text="callback (err);" created="Fri, 18 Mar 2022 15:46:22 GMT"/>
							<outline text="}" created="Fri, 18 Mar 2022 15:46:25 GMT"/>
							</outline>
						<outline text="else {" created="Fri, 18 Mar 2022 15:46:27 GMT">
							<outline text="var theLikes = new Array ();" created="Fri, 06 May 2022 16:15:17 GMT"/>
							<outline text="result.forEach (function (aLike) {" created="Fri, 06 May 2022 16:15:18 GMT">
								<outline text="theLikes.push ({" created="Fri, 06 May 2022 16:15:49 GMT">
									<outline text="who: aLike.listName" created="Fri, 06 May 2022 16:15:59 GMT"/>
									<outline text="});" created="Fri, 06 May 2022 16:15:53 GMT"/>
									</outline>
								<outline text="});" created="Fri, 06 May 2022 16:15:32 GMT"/>
								</outline>
							<outline text="callback (undefined, theLikes);" created="Fri, 18 Mar 2022 15:46:28 GMT"/>
							<outline text="}" created="Fri, 18 Mar 2022 15:46:34 GMT"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}" created="Fri, 06 May 2022 16:04:22 GMT"/>
					</outline>
				<outline text="function getALotOLikes (arrayOfIds, callback) {" isComment="true" created="Fri, 06 May 2022 17:10:22 GMT">
					<outline text="var allMyLikes = new Array ();" created="Fri, 06 May 2022 17:10:56 GMT"/>
					<outline text="function doNext (ix) {" created="Fri, 06 May 2022 17:11:03 GMT">
						<outline text="if (ix &gt;= arrayOfIds.length) {" created="Fri, 06 May 2022 17:11:13 GMT">
							<outline text="callback (undefined, allMyLikes);" created="Fri, 06 May 2022 17:11:21 GMT"/>
							<outline text="}" created="Fri, 06 May 2022 17:11:31 GMT"/>
							</outline>
						<outline text="else {" created="Fri, 06 May 2022 17:11:33 GMT">
							<outline text="getLikes (arrayOfIds [ix], function (err, theLikes) {" created="Fri, 06 May 2022 17:12:02 GMT">
								<outline text="if (err) {" created="Fri, 06 May 2022 17:12:32 GMT">
									<outline text="callback (err);" created="Fri, 06 May 2022 17:12:40 GMT"/>
									<outline text="}" created="Fri, 06 May 2022 17:12:45 GMT"/>
									</outline>
								<outline text="else {" created="Fri, 06 May 2022 17:12:46 GMT">
									<outline text="allMyLikes.push (theLikes);" created="Fri, 06 May 2022 17:12:58 GMT"/>
									<outline text="doNext (ix + 1);" created="Fri, 06 May 2022 17:13:08 GMT"/>
									<outline text="}" created="Fri, 06 May 2022 17:12:49 GMT"/>
									</outline>
								<outline text="});" created="Fri, 06 May 2022 17:12:27 GMT"/>
								</outline>
							<outline text="}" created="Fri, 06 May 2022 17:11:35 GMT"/>
							</outline>
						<outline text="}" created="Fri, 06 May 2022 17:11:12 GMT"/>
						</outline>
					<outline text="doNext (0);" created="Fri, 06 May 2022 17:10:57 GMT"/>
					<outline text="}" created="Fri, 06 May 2022 17:10:45 GMT"/>
					</outline>
				<outline text="" created="Sun, 16 Oct 2022 21:24:01 GMT"/>
				<outline text="function buildLikesFeed (screenname, callback) { //10/19/22 by DW" created="Wed, 19 Oct 2022 17:07:24 GMT">
					<outline text="Changes" isComment="true" created="Wed, 19 Oct 2022 17:12:31 GMT">
						<outline text="3/21/23; 9:31:44 AM by DW" created="Tue, 21 Mar 2023 13:31:43 GMT">
							<outline text="the user's listname property isn't their twitter id, it's just a feedland name. " created="Tue, 21 Mar 2023 13:31:44 GMT"/>
							</outline>
						<outline text="1/22/23; 1:08:47 PM by DW" created="Sun, 22 Jan 2023 18:08:46 GMT">
							<outline text="Respect new config.flLikesFeeds option." created="Sun, 22 Jan 2023 18:08:47 GMT"/>
							</outline>
						<outline text="10/27/22; 1:15:51 PM by DW" created="Thu, 27 Oct 2022 17:15:50 GMT">
							<outline text="New param, screenname. We build two feeds, one for all users and one for the indicated user. " created="Thu, 27 Oct 2022 17:15:51 GMT"/>
							</outline>
						<outline text="10/19/22; 1:12:34 PM by DW" created="Wed, 19 Oct 2022 17:12:33 GMT">
							<outline text="We finally got the query right? " created="Wed, 19 Oct 2022 17:12:34 GMT"/>
							</outline>
						</outline>
					<outline text="if (config.flLikesFeeds) { //1/22/23 by DW" created="Sun, 22 Jan 2023 18:08:07 GMT">
						<outline text="function buildOne (flForAll, callback) {" created="Thu, 27 Oct 2022 17:16:32 GMT">
							<outline text="const whenstart = new Date ();" created="Sat, 17 Sep 2022 16:59:06 GMT"/>
							<outline text="const whereClause = (flForAll) ? &quot;&quot; : &quot; where likes.listName=&quot; + davesql.encode (screenname) + &quot; &quot;;" created="Thu, 27 Oct 2022 17:17:05 GMT"/>
							<outline text="const sqltext = &quot;select likes.listName, likes.itemId, likes.whenCreated, items.title, items.link, items.description, items.pubDate, items.guid, items.enclosureUrl, items.enclosureType, items.enclosureLength from likes inner join items on likes.itemId = items.id &quot; + whereClause + &quot; order by likes.whenCreated desc limit &quot; + config.maxRssItems + &quot;;&quot;" created="Wed, 19 Oct 2022 17:07:35 GMT"/>
							<outline text="davesql.runSqltext (sqltext, function (err, likedRecs) {">
								<outline text="if (err) {" created="Fri, 18 Mar 2022 15:46:18 GMT">
									<outline text="callback (err);" created="Fri, 18 Mar 2022 15:46:22 GMT"/>
									<outline text="}" created="Fri, 18 Mar 2022 15:46:25 GMT"/>
									</outline>
								<outline text="else {" created="Fri, 18 Mar 2022 15:46:27 GMT">
									<outline text="let title = (flForAll) ? &quot;FeedLand likes for all users&quot; : &quot;FeedLand likes for &quot; + screenname;" created="Thu, 27 Oct 2022 17:21:39 GMT"/>
									<outline text="let description = (flForAll) ? &quot;Recent liked items from the people of FeedLand&quot; : &quot;Recent FeedLand likes for &quot; + screenname;" created="Thu, 27 Oct 2022 17:21:39 GMT"/>
									<outline text="let headElements = {" created="Sat, 17 Sep 2022 15:44:54 GMT">
										<outline text="title,"/>
										<outline text="link: &quot;http://feedland.org/?likes&quot;,"/>
										<outline text="description,"/>
										<outline text="language: &quot;en-us&quot;,"/>
										<outline text="generator: myProductName + &quot; v&quot; + myVersion,"/>
										<outline text="flRssCloudEnabled: true, "/>
										<outline text="rssCloudDomain: &quot;rpc.rsscloud.io&quot;,"/>
										<outline text="rssCloudPort: 5337,"/>
										<outline text="rssCloudPath: &quot;/pleaseNotify&quot;,"/>
										<outline text="rssCloudRegisterProcedure: &quot;&quot;,"/>
										<outline text="rssCloudProtocol: &quot;http-post&quot;,"/>
										<outline text="rssCloudUrl: &quot;http://rpc.rsscloud.io:5337/pleaseNotify&quot;, //11/28/23 by DW" created="Tue, 28 Nov 2023 17:32:55 GMT"/>
										<outline text="docs: &quot;http://cyber.law.harvard.edu/rss/rss.html&quot;," isComment="true"/>
										<outline text="twitterScreenName: &quot;davewiner&quot;," isComment="true"/>
										<outline text="maxFeedItems: 25"/>
										<outline text="};" created="Sat, 17 Sep 2022 15:44:57 GMT"/>
										</outline>
									<outline text="let historyArray = new Array ();" created="Sat, 17 Sep 2022 15:26:48 GMT"/>
									<outline text="likedRecs.forEach (function (likedRec) {" created="Wed, 19 Oct 2022 17:08:50 GMT">
										<outline text="var rssItem = {" created="Sat, 17 Sep 2022 15:35:22 GMT">
											<outline text="title: checkNull (likedRec.title),"/>
											<outline text="link: checkNull (likedRec.link)," created="Thu, 06 May 2021 13:33:40 GMT"/>
											<outline text="text: checkNull (likedRec.description)," created="Sat, 17 Sep 2022 15:37:17 GMT"/>
											<outline text="when: checkNull (likedRec.whenCreated),"/>
											<outline text="twitterScreenName: checkNull (likedRec.listName)," isComment="true" created="Wed, 19 Oct 2022 21:09:44 GMT"/>
											<outline text="guid: {" created="Wed, 19 Oct 2022 17:15:54 GMT">
												<outline text="flPermalink: false,"/>
												<outline text="value: likedRec.itemId"/>
												<outline text="}" created="Wed, 19 Oct 2022 17:15:57 GMT"/>
												</outline>
											<outline text="};" created="Sat, 17 Sep 2022 15:35:30 GMT"/>
											</outline>
										<outline text="if (notNull (likedRec.enclosureUrl) &amp;&amp; notNull (likedRec.enclosureType)) {" created="Sat, 17 Sep 2022 15:41:08 GMT">
											<outline text="if (!utils.beginsWith (likedRec.enclosureType.toLowerCase (), &quot;image&quot;)) {" created="Wed, 19 Oct 2022 21:13:04 GMT">
												<outline text="rssItem.enclosure = {" created="Sat, 17 Sep 2022 15:41:35 GMT">
													<outline text="url: checkNull (likedRec.enclosureUrl)," created="Sat, 17 Sep 2022 15:41:50 GMT"/>
													<outline text="type: checkNull (likedRec.enclosureType)," created="Sat, 17 Sep 2022 15:41:58 GMT"/>
													<outline text="length: checkNull (likedRec.enclosureLength)" created="Sat, 17 Sep 2022 15:42:12 GMT"/>
													<outline text="}" created="Sat, 17 Sep 2022 15:41:39 GMT"/>
													</outline>
												<outline text="}" created="Wed, 19 Oct 2022 21:13:09 GMT"/>
												</outline>
											<outline text="}" created="Sat, 17 Sep 2022 15:41:25 GMT"/>
											</outline>
										<outline text="" created="Tue, 21 Mar 2023 13:37:29 GMT"/>
										<outline text="if (notNull (likedRec.listName)) { //3/21/23 by DW" created="Tue, 21 Mar 2023 13:37:29 GMT">
											<outline text="rssItem.account = {" created="Tue, 21 Mar 2023 13:37:57 GMT">
												<outline text="service: config.myDomain," created="Tue, 21 Mar 2023 13:38:12 GMT"/>
												<outline text="name: likedRec.listName" created="Tue, 21 Mar 2023 13:38:17 GMT"/>
												<outline text="};" created="Tue, 21 Mar 2023 13:38:02 GMT"/>
												</outline>
											<outline text="}" created="Tue, 21 Mar 2023 13:37:37 GMT"/>
											</outline>
										<outline text="" created="Tue, 21 Mar 2023 13:37:30 GMT"/>
										<outline text="historyArray.push (rssItem);" created="Sat, 17 Sep 2022 15:43:21 GMT"/>
										<outline text="});" created="Wed, 19 Oct 2022 17:09:24 GMT"/>
										</outline>
									<outline text="let xmltext = rss.buildRssFeed (headElements, historyArray); "/>
									<outline text="let s3path = config.s3LikesPath + ((flForAll) ? &quot;all.xml&quot; : screenname + &quot;.xml&quot;);" created="Thu, 27 Oct 2022 17:24:16 GMT"/>
									<outline text="let urlFeed = &quot;http:/&quot; + s3path;" created="Thu, 27 Oct 2022 17:30:08 GMT"/>
									<outline text="s3.newObject (s3path, xmltext, &quot;text/xml&quot;, &quot;public-read&quot;, function (err, data) {">
										<outline text="if (err) {">
											<outline text="console.log (&quot;buildLikesFeed: err.message == &quot; + err.message);"/>
											<outline text="callback (err);" created="Fri, 29 Apr 2022 14:15:42 GMT"/>
											<outline text="}"/>
											</outline>
										<outline text="else {">
											<outline text="console.log (&quot;buildLikesFeed: &quot; + utils.secondsSince (whenstart) + &quot; secs.&quot;);"/>
											<outline text="checkOneFeed (urlFeed, function () { //10/17/22 by DW">
												<outline text="rss.cloudPing (undefined, urlFeed);"/>
												<outline text="});" created="Mon, 17 Oct 2022 13:48:04 GMT"/>
												</outline>
											<outline text="callback (undefined, urlFeed);"/>
											<outline text="}"/>
											</outline>
										<outline text="});"/>
										</outline>
									<outline text="fs.writeFile (&quot;likes.xml&quot;, xmltext, function (err) {" isComment="true" created="Sat, 17 Sep 2022 15:47:46 GMT">
										<outline text="if (callback !== undefined) {" created="Sat, 17 Sep 2022 17:05:06 GMT">
											<outline text="callback (undefined, xmltext);" created="Sat, 17 Sep 2022 15:48:52 GMT"/>
											<outline text="}" created="Sat, 17 Sep 2022 17:05:07 GMT"/>
											</outline>
										<outline text="});" created="Sat, 17 Sep 2022 15:48:27 GMT"/>
										</outline>
									<outline text="}" created="Fri, 18 Mar 2022 15:46:34 GMT"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}" created="Thu, 27 Oct 2022 17:16:49 GMT"/>
							</outline>
						<outline text="buildOne (true, function (err, data) {" created="Thu, 27 Oct 2022 17:16:32 GMT">
							<outline text="buildOne (false, function (err, data) {" created="Thu, 27 Oct 2022 17:33:08 GMT">
								<outline text="if (callback !== undefined) {" created="Thu, 27 Oct 2022 17:53:50 GMT">
									<outline text="callback (err, data);" created="Thu, 27 Oct 2022 17:53:59 GMT"/>
									<outline text="}" created="Thu, 27 Oct 2022 17:53:57 GMT"/>
									</outline>
								<outline text="});" created="Thu, 27 Oct 2022 17:53:44 GMT"/>
								</outline>
							<outline text="});" created="Thu, 27 Oct 2022 17:33:00 GMT"/>
							</outline>
						<outline text="}" created="Sun, 22 Jan 2023 18:08:35 GMT"/>
						</outline>
					<outline text="else {" created="Sun, 22 Jan 2023 18:24:21 GMT">
						<outline text="if (callback !== undefined) { //1/22/23 by DW" created="Thu, 27 Oct 2022 17:53:50 GMT">
							<outline text="callback (undefined, undefined);" created="Thu, 27 Oct 2022 17:53:59 GMT"/>
							<outline text="}" created="Thu, 27 Oct 2022 17:53:57 GMT"/>
							</outline>
						<outline text="}" created="Sun, 22 Jan 2023 18:24:23 GMT"/>
						</outline>
					<outline text="}" created="Wed, 19 Oct 2022 17:07:33 GMT"/>
					</outline>
				<outline text="" created="Sun, 08 Oct 2023 13:35:35 GMT"/>
				<outline text="function backupDatabase () { //8/22/22 by DW" created="Mon, 22 Aug 2022 18:25:33 GMT">
					<outline text="Changes" isComment="true" created="Fri, 30 Sep 2022 12:13:32 GMT">
						<outline text="9/30/22; 8:13:38 AM by DW" created="Fri, 30 Sep 2022 12:13:37 GMT">
							<outline text="We back up to the repo now too." created="Fri, 30 Sep 2022 12:13:38 GMT"/>
							</outline>
						</outline>
					<outline text="function uploadToGithub (path, data, type, callback) {">
						<outline text="const options = {">
							<outline text="flUseQueue: true, //10/1/22 by DW"/>
							<outline text="username: config.githubBackup.username,"/>
							<outline text="repo: config.githubBackup.repo,"/>
							<outline text="password: config.githubBackup.password,"/>
							<outline text="repoPath: config.githubBackup.basepath + path,"/>
							<outline text="data: data,"/>
							<outline text="type,"/>
							<outline text="committer: config.githubBackup.committer,"/>
							<outline text="message: config.githubBackup.message,"/>
							<outline text="userAgent: myProductName + &quot; v&quot; + myVersion"/>
							<outline text="};"/>
							</outline>
						<outline text="davegithub.uploadFile (options, function (err, response, body) {">
							<outline text="console.log (&quot;uploadToGithub: path == &quot; + options.username + &quot;/&quot; + options.repo + &quot;/&quot; + options.repoPath + &quot;, status == &quot; + response.statusCode);"/>
							<outline text="if (callback !== undefined) {">
								<outline text="callback ();"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function backupToFile (fname, result) {" created="Mon, 22 Aug 2022 18:30:24 GMT">
						<outline text="var f = config.backupFolder + fname;" created="Mon, 22 Aug 2022 18:28:13 GMT"/>
						<outline text="utils.sureFilePath (f, function () {" created="Mon, 22 Aug 2022 18:28:35 GMT">
							<outline text="var jsontext = utils.jsonStringify (result);" created="Mon, 22 Aug 2022 18:36:19 GMT"/>
							<outline text="fs.writeFile (f, jsontext, function (err) {" created="Mon, 22 Aug 2022 18:27:29 GMT">
								<outline text="if (err) {">
									<outline text="console.log (&quot;backupToFile: f == &quot; + f + &quot;, err.message == &quot; + err.message);" created="Mon, 22 Aug 2022 18:27:04 GMT"/>
									<outline text="}"/>
									</outline>
								<outline text="else {" created="Mon, 22 Aug 2022 18:35:49 GMT">
									<outline text="console.log (&quot;backupToFile: f == &quot; + f + &quot;, size == &quot; + utils.gigabyteString (jsontext.length));" created="Mon, 22 Aug 2022 18:27:04 GMT"/>
									<outline text="}" created="Mon, 22 Aug 2022 18:35:52 GMT"/>
									</outline>
								<outline text="});" created="Mon, 22 Aug 2022 18:27:54 GMT"/>
								</outline>
							<outline text="if (config.githubBackup.enabled) {" created="Fri, 30 Sep 2022 13:34:08 GMT">
								<outline text="uploadToGithub (fname, jsontext, &quot;application/json&quot;); //9/30/22 by DW" created="Fri, 30 Sep 2022 12:22:48 GMT"/>
								<outline text="}" created="Fri, 30 Sep 2022 13:34:15 GMT"/>
								</outline>
							<outline text="});" created="Mon, 22 Aug 2022 18:28:45 GMT"/>
							</outline>
						<outline text="}" created="Mon, 22 Aug 2022 18:30:34 GMT"/>
						</outline>
					<outline text="function backupQuery (sqltext, fname) {" created="Mon, 22 Aug 2022 18:32:28 GMT">
						<outline text="davesql.runSqltext (sqltext, function (err, result) {">
							<outline text="if (err) {">
								<outline text="console.log (&quot;backupQuery: fname == &quot; + fname + &quot;, err.message == &quot; + err.message);" created="Mon, 22 Aug 2022 18:27:04 GMT"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="result.forEach (function (item) {" created="Mon, 22 Aug 2022 22:25:29 GMT">
									<outline text="for (var x in item) {" created="Mon, 22 Aug 2022 22:25:41 GMT">
										<outline text="if (item [x] == null) {" created="Mon, 22 Aug 2022 22:25:47 GMT">
											<outline text="item [x] = undefined;" created="Mon, 22 Aug 2022 22:25:58 GMT"/>
											<outline text="}" created="Mon, 22 Aug 2022 22:26:04 GMT"/>
											</outline>
										<outline text="}" created="Mon, 22 Aug 2022 22:25:47 GMT"/>
										</outline>
									<outline text="});" created="Mon, 22 Aug 2022 22:25:40 GMT"/>
									</outline>
								<outline text="backupToFile (fname, result);" created="Mon, 22 Aug 2022 18:31:44 GMT"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}" created="Mon, 22 Aug 2022 18:32:38 GMT"/>
						</outline>
					<outline text="backupQuery (&quot;select * from feeds;&quot;, &quot;feeds.json&quot;);" created="Mon, 22 Aug 2022 18:26:28 GMT"/>
					<outline text="backupQuery (&quot;select * from subscriptions;&quot;, &quot;subscriptions.json&quot;);" created="Mon, 22 Aug 2022 18:26:28 GMT"/>
					<outline text="backupQuery (&quot;select * from likes;&quot;, &quot;likes.json&quot;);" created="Mon, 22 Aug 2022 18:26:28 GMT"/>
					<outline text="backupQuery (&quot;select * from users;&quot;, &quot;users.json&quot;); //9/30/22 by DW" created="Mon, 22 Aug 2022 18:26:28 GMT"/>
					<outline text="backupQuery (&quot;select * from items;&quot;, &quot;items.json&quot;);" isComment="true" created="Mon, 22 Aug 2022 18:26:28 GMT"/>
					<outline text="" created="Mon, 22 Aug 2022 22:10:16 GMT"/>
					<outline text="var when = utils.dateYesterday (new Date ());" created="Mon, 22 Aug 2022 22:10:17 GMT"/>
					<outline text="var year = when.getFullYear ();" created="Mon, 22 Aug 2022 22:15:13 GMT"/>
					<outline text="var month = utils.padWithZeros (when.getMonth () + 1, 2);" created="Mon, 22 Aug 2022 22:10:17 GMT"/>
					<outline text="var day = utils.padWithZeros (when.getDate (), 2);" created="Mon, 22 Aug 2022 22:16:06 GMT"/>
					<outline text="var datestring = year + &quot;-&quot; + month + &quot;-&quot; + day;" created="Mon, 22 Aug 2022 22:16:20 GMT"/>
					<outline text="backupQuery (&quot;select * from items where date (whenCreated) = '&quot; + datestring + &quot;';&quot;, &quot;items/&quot; + year + &quot;/&quot; + month + &quot;/&quot; + day + &quot;.json&quot;)" created="Mon, 22 Aug 2022 18:26:28 GMT"/>
					<outline text="getHotlist (function (err, theHotlistArray) { //9/23/22 by DW" created="Sat, 30 Jul 2022 21:59:34 GMT">
						<outline text="if (err) {" created="Sat, 30 Jul 2022 21:59:54 GMT">
							<outline text="console.log (&quot;backupDatabase: error backing up hotlist == &quot; + err.message);" created="Sat, 30 Jul 2022 21:59:57 GMT"/>
							<outline text="}" created="Sat, 30 Jul 2022 22:00:00 GMT"/>
							</outline>
						<outline text="else {" created="Sat, 30 Jul 2022 22:00:01 GMT">
							<outline text="let f = &quot;hotlist/&quot; + year + &quot;/&quot; + month + &quot;/&quot; + day + &quot;.json&quot;;" created="Fri, 23 Sep 2022 16:20:02 GMT"/>
							<outline text="backupToFile (f, theHotlistArray);" created="Mon, 22 Aug 2022 18:31:44 GMT"/>
							<outline text="}" created="Sat, 30 Jul 2022 22:00:02 GMT"/>
							</outline>
						<outline text="});" created="Sat, 30 Jul 2022 21:59:51 GMT"/>
						</outline>
					<outline text="}" created="Mon, 22 Aug 2022 18:25:43 GMT"/>
					</outline>
				<outline text="" created="Sat, 10 Dec 2022 15:20:42 GMT"/>
				<outline text="function rssCloudRenew (urlServer, port, path, feedUrl, domain, callback) {">
					<outline text="Changes" isComment="true">
						<outline text="11/17/23; 12:17:50 PM by DW" created="Fri, 17 Nov 2023 17:17:49 GMT">
							<outline text="Previously we were returning the unprocessed XML text we got back from the server. " created="Fri, 17 Nov 2023 17:17:50 GMT"/>
							<outline text="Now we're turning it into JSON and returning that, so it can be called from outside. " created="Fri, 17 Nov 2023 17:18:12 GMT"/>
							</outline>
						<outline text="8/18/23; 1:05:51 PM by DW" created="Fri, 18 Aug 2023 17:05:51 GMT">
							<outline text="Changed name of routine to rssCloudRenew from pleaseNotify." created="Fri, 18 Aug 2023 17:05:52 GMT"/>
							</outline>
						<outline text="12/12/22; 1:21:23 PM by DW" created="Mon, 12 Dec 2022 18:21:23 GMT">
							<outline text="New parameter, domain." created="Mon, 12 Dec 2022 18:21:23 GMT"/>
							</outline>
						<outline text="12/11/22; 1:13:34 PM by DW" created="Sun, 11 Dec 2022 18:13:34 GMT">
							<outline text="Use new requestWithRedirect function, it handles the redirects itself, apparently the built-in request function doesn't carry the body across redirects. " created="Sun, 11 Dec 2022 18:13:35 GMT"/>
							</outline>
						<outline text="12/10/22; 9:50:45 AM by DW" created="Sat, 10 Dec 2022 14:50:44 GMT">
							<outline text="Apparently we weren't following redirects because we used an option that only applies to GET requests? Not totally clear from docs." created="Sat, 10 Dec 2022 14:50:46 GMT"/>
							<outline text="Replaced with followAllRedirects and maxRedirects = 5." created="Sat, 10 Dec 2022 14:51:18 GMT"/>
							</outline>
						<outline text="10/8/22; 2:11:18 PM by DW" created="Sat, 08 Oct 2022 18:11:16 GMT">
							<outline text="Cribbed from RIver6." created="Sat, 08 Oct 2022 18:11:19 GMT"/>
							</outline>
						<outline text="2/9/17; 6:37:04 PM by DW">
							<outline text="Per Andrew's pull request, we now check for body.success in addition to watching for errors. "/>
							</outline>
						</outline>
					<outline text="var now = new Date ();"/>
					<outline text="const theRequest = {">
						<outline text="url: urlServer,"/>
						<outline text="method: &quot;POST&quot;,"/>
						<outline text="followAllRedirects: true, " created="Thu, 31 Jul 2014 16:39:18 GMT" pgfnum="43069"/>
						<outline text="maxRedirects: 5,"/>
						<outline text="headers: {">
							<outline text="&quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded&quot;" created="Sun, 04 Dec 2022 13:43:35 GMT"/>
							<outline text="},"/>
							</outline>
						<outline text="body: buildParamList ({" created="Sun, 20 Nov 2022 22:11:40 GMT">
							<outline text="domain, //12/12/22 by DW" created="Mon, 12 Dec 2022 18:22:26 GMT"/>
							<outline text="port,"/>
							<outline text="path,"/>
							<outline text="url1: feedUrl,"/>
							<outline text="protocol: &quot;http-post&quot;"/>
							<outline text="})" created="Sat, 10 Dec 2022 15:19:54 GMT"/>
							</outline>
						<outline text="};"/>
						</outline>
					<outline text="myConsoleLog (&quot;rssCloudRenew: feedUrl == &quot; + utils.jsonStringify (feedUrl)); //8/18/23 by DW" created="Sat, 10 Dec 2022 15:05:08 GMT"/>
					<outline text="myConsoleLog (&quot;rssCloudRenew: theRequest == &quot; + utils.jsonStringify (theRequest)); //11/21/23 by DW" created="Sat, 10 Dec 2022 15:05:08 GMT"/>
					<outline text="requestWithRedirect (theRequest, function (err, response, body) {">
						<outline text="if (err) {">
							<outline text="callback (err);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="var options = {">
								<outline text="explicitArray: false"/>
								<outline text="};"/>
								</outline>
							<outline text="xml2js.parseString (body, options, function (err, jstruct) {">
								<outline text="if (err) {" created="Fri, 17 Nov 2023 17:21:31 GMT">
									<outline text="myConsoleLog (&quot;rssCloudRenew: err.message == &quot; + err.message); " created="Sat, 10 Dec 2022 15:05:08 GMT"/>
									<outline text="callback (err);" created="Fri, 17 Nov 2023 17:21:34 GMT"/>
									<outline text="}" created="Fri, 17 Nov 2023 17:21:38 GMT"/>
									</outline>
								<outline text="else {" created="Fri, 17 Nov 2023 17:21:38 GMT">
									<outline text="myConsoleLog (&quot;rssCloudRenew: response from server == &quot; + utils.jsonStringify (jstruct)); " created="Sat, 10 Dec 2022 15:05:08 GMT"/>
									<outline text="callback (undefined, jstruct);" created="Fri, 17 Nov 2023 17:21:45 GMT"/>
									<outline text="}" created="Fri, 17 Nov 2023 17:21:40 GMT"/>
									</outline>
								<outline text="});" created="Fri, 17 Nov 2023 17:21:23 GMT"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function renewNextSubscriptionIfReady (options) { //rssCloud support">
					<outline text="Changes" isComment="true" created="Thu, 18 Nov 2021 13:08:48 GMT">
						<outline text="11/18/21; 8:08:53 AM by DW" created="Thu, 18 Nov 2021 13:08:50 GMT">
							<outline text="Make sure there wasn't an error accessing the database." created="Thu, 18 Nov 2021 13:08:56 GMT"/>
							</outline>
						</outline>
					<outline text="if (options.enabled &amp;&amp; options.flRequestNotify) {" created="Sun, 09 Oct 2022 14:51:08 GMT">
						<outline text="if (options.port !== undefined) { //http is enabled" created="Sun, 09 Oct 2022 14:53:48 GMT">
							<outline text="var sqltext = &quot;select * from feeds where urlCloudServer != '' order by whenLastCloudRenew asc limit 1;&quot;; //10/29/19 by DW"/>
							<outline text="davesql.runSqltext (sqltext, function (err, result) {">
								<outline text="if (err) {" created="Sat, 08 Oct 2022 18:26:12 GMT">
									<outline text="console.log (&quot;renewNextSubscriptionIfReady: err.message == &quot; + err.message);" created="Sun, 09 Oct 2022 14:54:43 GMT"/>
									<outline text="}" created="Sat, 08 Oct 2022 18:26:16 GMT"/>
									</outline>
								<outline text="else {" created="Sat, 08 Oct 2022 18:26:18 GMT">
									<outline text="if (result.length &gt; 0) { ">
										<outline text="var feedRec = result [0];"/>
										<outline text="if (utils.secondsSince (feedRec.whenLastCloudRenew) &gt; options.ctSecsBetwRenews) { //ready to be renewed">
											<outline text="rssCloudRenew (feedRec.urlCloudServer, options.port, options.feedUpdatedCallback, feedRec.feedUrl, options.domain, function (err, data) {">
												<outline text="if (err) {">
													<outline text="console.log (&quot;renewNextSubscriptionIfReady: err.message == &quot; + err.message + &quot;, feedRec.urlCloudServer == &quot; + feedRec.urlCloudServer + &quot;, feedRec.feedUrl == &quot; + feedRec.feedUrl);"/>
													<outline text="}"/>
													</outline>
												<outline text="else {" created="Sun, 09 Oct 2022 14:59:58 GMT">
													<outline text="console.log (&quot;renewNextSubscriptionIfReady: feedRec.feedUrl == &quot; + feedRec.feedUrl);"/>
													<outline text="}" created="Sun, 09 Oct 2022 15:00:02 GMT"/>
													</outline>
												<outline text="feedRec.whenLastCloudRenew = new Date ();"/>
												<outline text="feedRec.ctCloudRenews++;"/>
												<outline text="saveFeed (feedRec);" created="Fri, 22 Apr 2022 13:57:52 GMT"/>
												<outline text="});"/>
												</outline>
											<outline text="}"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="}" created="Sat, 08 Oct 2022 18:26:20 GMT"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}" created="Sun, 09 Oct 2022 14:54:00 GMT"/>
							</outline>
						<outline text="}" created="Sun, 09 Oct 2022 14:51:16 GMT"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function renewFeedNow (feedUrl, options, callback) { //rssCloud support" created="Sun, 09 Oct 2022 15:46:56 GMT">
					<outline text="isFeedInDatabase (feedUrl, function (flInDatabase, feedRec) {" created="Tue, 29 Mar 2022 19:29:53 GMT">
						<outline text="if (flInDatabase) {" created="Tue, 29 Mar 2022 19:30:01 GMT">
							<outline text="rssCloudRenew (feedRec.urlCloudServer, options.port, options.feedUpdatedCallback, feedRec.feedUrl, options.domain, function (err, data) {">
								<outline text="if (err) {">
									<outline text="console.log (&quot;renewFeedNow: err.message == &quot; + err.message + &quot;, feedRec.urlCloudServer == &quot; + feedRec.urlCloudServer + &quot;, feedRec.feedUrl == &quot; + feedRec.feedUrl);"/>
									<outline text="}"/>
									</outline>
								<outline text="else {" created="Sun, 09 Oct 2022 14:59:58 GMT">
									<outline text="console.log (&quot;renewFeedNow: feedRec.feedUrl == &quot; + feedRec.feedUrl);"/>
									<outline text="}" created="Sun, 09 Oct 2022 15:00:02 GMT"/>
									</outline>
								<outline text="feedRec.whenLastCloudRenew = new Date ();"/>
								<outline text="feedRec.ctCloudRenews++;"/>
								<outline text="saveFeed (feedRec);" created="Fri, 22 Apr 2022 13:57:52 GMT"/>
								<outline text="callback (err, data);" created="Sun, 09 Oct 2022 15:50:09 GMT"/>
								<outline text="});"/>
								</outline>
							<outline text="}" created="Tue, 29 Mar 2022 19:30:08 GMT"/>
							</outline>
						<outline text="else {" created="Sun, 09 Oct 2022 15:48:24 GMT">
							<outline text="const message = &quot;Can't renew the feed because it's not in the database.&quot;;" created="Sun, 09 Oct 2022 15:51:14 GMT"/>
							<outline text="callback ({message});" created="Sun, 09 Oct 2022 15:51:29 GMT"/>
							<outline text="}" created="Sun, 09 Oct 2022 15:48:27 GMT"/>
							</outline>
						<outline text="});" created="Tue, 29 Mar 2022 19:29:54 GMT"/>
						</outline>
					<outline text="}" created="Sun, 09 Oct 2022 15:47:09 GMT"/>
					</outline>
				<outline text="" created="Sun, 08 Oct 2023 13:14:25 GMT"/>
				<outline text="function processSubscriptionList (screenname, theList, flDeleteEnabled=true, callback) { //old code -- not doing it this way -- 10/9/23 by DW " created="Tue, 22 Mar 2022 14:13:09 GMT">
					<outline text="Changes" isComment="true" created="Tue, 22 Mar 2022 14:13:18 GMT">
						<outline text="2/3/24; 11:09:17 AM by DW" created="Sat, 03 Feb 2024 16:09:17 GMT">
							<outline text="Pass the feedId to addSubscription. " created="Sat, 03 Feb 2024 16:09:18 GMT"/>
							</outline>
						<outline text="10/9/23; 5:53:17 PM by DW" created="Mon, 09 Oct 2023 21:53:17 GMT">
							<outline text="old code -- should probably remove, but have to do it more carefully than i can right now" created="Mon, 09 Oct 2023 21:53:18 GMT"/>
							</outline>
						<outline text="6/30/22; 12:53:27 PM by DW" created="Thu, 30 Jun 2022 16:53:27 GMT">
							<outline text="New flDeleteEnabled param. So we can use this routine to import a list of feeds but not delete feeds that arent in the list." created="Thu, 30 Jun 2022 16:53:28 GMT"/>
							</outline>
						<outline text="5/17/22; 6:50:36 PM by DW" created="Tue, 17 May 2022 22:50:36 GMT">
							<outline text="Tell checkFeedAndItems the new items are from a new feed. " created="Tue, 17 May 2022 22:50:37 GMT"/>
							</outline>
						<outline text="3/22/22; 10:13:22 AM by DW" created="Tue, 22 Mar 2022 14:13:21 GMT">
							<outline text="theList is a flat array with each element describing a feed." created="Tue, 22 Mar 2022 14:13:22 GMT"/>
							<outline text="since the list element came from an outline, it uses the name xmlUrl where we would now use feedUrl." created="Tue, 22 Mar 2022 14:21:47 GMT"/>
							</outline>
						</outline>
					<outline text="getUserSubcriptions (screenname, function (err, subs) {" created="Fri, 18 Mar 2022 15:12:46 GMT">
						<outline text="function deleteFromSubs (feedUrl) {" created="Fri, 18 Mar 2022 15:51:01 GMT">
							<outline text="var newsubs = new Array (), fldeleted = false;" created="Fri, 18 Mar 2022 15:51:25 GMT"/>
							<outline text="subs.forEach (function (item) {" created="Fri, 18 Mar 2022 15:51:15 GMT">
								<outline text="if (item.feedUrl == feedUrl) {" created="Fri, 18 Mar 2022 15:51:40 GMT">
									<outline text="fldeleted = true;" created="Fri, 18 Mar 2022 16:03:30 GMT"/>
									<outline text="}" created="Fri, 18 Mar 2022 15:52:23 GMT"/>
									</outline>
								<outline text="else {" created="Fri, 18 Mar 2022 16:03:28 GMT">
									<outline text="newsubs.push (item);" created="Fri, 18 Mar 2022 15:52:28 GMT"/>
									<outline text="}" created="Fri, 18 Mar 2022 16:03:33 GMT"/>
									</outline>
								<outline text="});" created="Fri, 18 Mar 2022 15:51:37 GMT"/>
								</outline>
							<outline text="subs = newsubs;" created="Fri, 18 Mar 2022 15:52:48 GMT"/>
							<outline text="return (fldeleted); //if true, you don't need to sub" created="Fri, 18 Mar 2022 16:03:54 GMT"/>
							<outline text="}" created="Fri, 18 Mar 2022 15:51:11 GMT"/>
							</outline>
						<outline text="theList.forEach (function (item) {" created="Tue, 22 Mar 2022 14:19:12 GMT">
							<outline text="if (!deleteFromSubs (item.xmlUrl)) {" created="Fri, 18 Mar 2022 15:50:20 GMT">
								<outline text="checkFeedAndItems (item.xmlUrl, function (err, theFeed, feedRec) { //2/3/24 by DW" created="Sat, 19 Mar 2022 15:17:29 GMT">
									<outline text="addSubscription (screenname, item.xmlUrl, feedRec.feedId, function (err, result) {" created="Fri, 18 Mar 2022 15:36:26 GMT">
										<outline text="});" created="Fri, 18 Mar 2022 15:42:06 GMT"/>
										</outline>
									<outline text="});" created="Sat, 19 Mar 2022 15:17:43 GMT"/>
									</outline>
								<outline text="}" created="Fri, 18 Mar 2022 16:04:18 GMT"/>
								</outline>
							<outline text="});" created="Tue, 22 Mar 2022 14:19:21 GMT"/>
							</outline>
						<outline text="subs.forEach (function (item) { //each of the subscriptions that were not deleted" created="Fri, 18 Mar 2022 15:53:15 GMT">
							<outline text="if (flDeleteEnabled) {" created="Thu, 30 Jun 2022 16:54:26 GMT">
								<outline text="deleteSubscription (screenname, item.feedUrl, function (err, result) {" created="Fri, 18 Mar 2022 16:07:04 GMT">
									<outline text="console.log (&quot;Unsubbed: &quot; + item.feedUrl);" isComment="true" created="Fri, 18 Mar 2022 15:53:47 GMT"/>
									<outline text="});" created="Fri, 18 Mar 2022 16:07:43 GMT"/>
									</outline>
								<outline text="}" created="Thu, 30 Jun 2022 16:54:30 GMT"/>
								</outline>
							<outline text="});" created="Fri, 18 Mar 2022 15:53:34 GMT"/>
							</outline>
						<outline text="});" created="Fri, 18 Mar 2022 15:13:04 GMT"/>
						</outline>
					<outline text="theList.forEach (function (item) { //3/29/22 by DW">
						<outline text="isFeedInDatabase (item.xmlUrl, function (flInDatabase, feedRec2) {" created="Tue, 29 Mar 2022 19:29:53 GMT">
							<outline text="if (!flInDatabase) {" created="Tue, 29 Mar 2022 19:30:01 GMT">
								<outline text="const flNewFeed = true;" created="Tue, 17 May 2022 22:51:19 GMT"/>
								<outline text="checkFeedAndItems (item.xmlUrl, undefined, flNewFeed);  //5/17/22 by DW" created="Tue, 29 Mar 2022 19:40:39 GMT"/>
								<outline text="}" created="Tue, 29 Mar 2022 19:30:08 GMT"/>
								</outline>
							<outline text="});" created="Tue, 29 Mar 2022 19:29:54 GMT"/>
							</outline>
						<outline text="});" created="Tue, 29 Mar 2022 19:37:00 GMT"/>
						</outline>
					<outline text="}" created="Tue, 22 Mar 2022 14:14:09 GMT"/>
					</outline>
				<outline text="" created="Sun, 08 Oct 2023 13:14:25 GMT"/>
				<outline text="//reading lists -- 10/9/23 by DW" created="Sun, 08 Oct 2023 13:14:26 GMT">
					<outline text="function upgradeReadingLists (callback) { //10/25/23 by DW" isComment="true" created="Wed, 25 Oct 2023 13:43:50 GMT">
						<outline text="Changes" isComment="true" created="Sat, 28 Oct 2023 14:25:42 GMT">
							<outline text="10/28/23; 10:25:49 AM by DW" created="Sat, 28 Oct 2023 14:25:48 GMT">
								<outline text="This was written to do an upgrade to readinglists table that we ended up not doing, converting the feedUrls array to an array of objects, not an array of strings (urls)." created="Sat, 28 Oct 2023 14:25:49 GMT"/>
								</outline>
							</outline>
						<outline text="console.log (&quot;upgradeReadingLists&quot;);" created="Wed, 25 Oct 2023 15:12:31 GMT"/>
						<outline text="const sqltext = &quot;select * from readinglists;&quot;;" created="Tue, 10 Oct 2023 21:37:08 GMT"/>
						<outline text="davesql.runSqltext (sqltext, function (err, result) {">
							<outline text="if (err) {">
								<outline text="console.log (&quot;upgradeReadingLists: err.message == &quot; + err.message);"/>
								<outline text="if (callback !== undefined) {" created="Wed, 25 Oct 2023 19:51:51 GMT">
									<outline text="callback (err);" created="Wed, 25 Oct 2023 19:51:33 GMT"/>
									<outline text="}" created="Wed, 25 Oct 2023 19:51:56 GMT"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="function doNext (ix) {" created="Wed, 25 Oct 2023 13:51:28 GMT">
									<outline text="if (ix &lt; result.length) {" created="Wed, 25 Oct 2023 13:51:52 GMT">
										<outline text="const listRec = result [ix];" created="Wed, 25 Oct 2023 13:52:13 GMT"/>
										<outline text="getNodeArrayFromOpml (listRec.opmlUrl, function (err, theNodeArray) {" created="Thu, 01 Jun 2023 18:14:16 GMT">
											<outline text="if (err) {" created="Thu, 01 Jun 2023 18:14:37 GMT">
												<outline text="console.log (&quot;upgradeReadingLists: err.message == &quot; + err.message);"/>
												<outline text="}" created="Thu, 01 Jun 2023 18:14:41 GMT"/>
												</outline>
											<outline text="else {" created="Thu, 01 Jun 2023 18:14:41 GMT">
												<outline text="" created="Wed, 25 Oct 2023 20:44:12 GMT"/>
												<outline text="var feedUrlsArray = new Array ();" created="Wed, 25 Oct 2023 20:44:12 GMT"/>
												<outline text="theNodeArray.forEach (function (item) {" created="Wed, 25 Oct 2023 20:44:27 GMT">
													<outline text="feedUrlsArray.push (item.xmlUrl);" created="Wed, 25 Oct 2023 20:44:37 GMT"/>
													<outline text="});" created="Wed, 25 Oct 2023 20:44:33 GMT"/>
													</outline>
												<outline text="" created="Wed, 25 Oct 2023 20:44:12 GMT"/>
												<outline text="listRec.feedUrls = utils.jsonStringify (feedUrlsArray);" created="Sun, 08 Oct 2023 14:46:54 GMT"/>
												<outline text="const sqltext = &quot;replace into readinglists &quot; + davesql.encodeValues (listRec);" created="Wed, 25 Oct 2023 14:03:19 GMT"/>
												<outline text="davesql.runSqltext (sqltext, function (err, result) {">
													<outline text="if (err) {" created="Wed, 25 Oct 2023 14:04:28 GMT">
														<outline text="console.log (&quot;upgradeReadingLists: err.message == &quot; + err.message);"/>
														<outline text="}" created="Wed, 25 Oct 2023 14:04:32 GMT"/>
														</outline>
													<outline text="else {" created="Wed, 25 Oct 2023 14:04:33 GMT">
														<outline text="doNext (ix + 1);" created="Wed, 25 Oct 2023 14:04:24 GMT"/>
														<outline text="}" created="Wed, 25 Oct 2023 14:04:35 GMT"/>
														</outline>
													<outline text="});" created="Wed, 25 Oct 2023 14:04:15 GMT"/>
													</outline>
												<outline text="}" created="Thu, 01 Jun 2023 18:14:43 GMT"/>
												</outline>
											<outline text="});" created="Thu, 01 Jun 2023 18:14:32 GMT"/>
											</outline>
										<outline text="}" created="Wed, 25 Oct 2023 13:52:02 GMT"/>
										</outline>
									<outline text="else {" created="Wed, 25 Oct 2023 19:51:41 GMT">
										<outline text="if (callback !== undefined) {" created="Wed, 25 Oct 2023 19:52:05 GMT">
											<outline text="callback ();" created="Wed, 25 Oct 2023 19:51:43 GMT"/>
											<outline text="}" created="Wed, 25 Oct 2023 19:52:06 GMT"/>
											</outline>
										<outline text="}" created="Wed, 25 Oct 2023 19:51:47 GMT"/>
										</outline>
									<outline text="}" created="Wed, 25 Oct 2023 13:51:35 GMT"/>
									</outline>
								<outline text="doNext (0);" created="Wed, 25 Oct 2023 13:51:36 GMT"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}" created="Wed, 25 Oct 2023 13:43:59 GMT"/>
						</outline>
					<outline text="" isComment="true" created="Wed, 25 Oct 2023 21:12:22 GMT"/>
					<outline text="function createFeedRecordForReadingList (screenname, feedUrl, callback) { //11/28/23 by DW" created="Tue, 28 Nov 2023 15:56:20 GMT">
						<outline text="isFeedInDatabase (feedUrl, function (flInDatabase, feedRec) {" created="Tue, 28 Nov 2023 16:00:26 GMT">
							<outline text="if (flInDatabase) { //nothing to do" created="Tue, 28 Nov 2023 16:00:42 GMT">
								<outline text="callback (); " created="Tue, 28 Nov 2023 16:00:48 GMT"/>
								<outline text="}" created="Tue, 28 Nov 2023 16:00:53 GMT"/>
								</outline>
							<outline text="else {" created="Tue, 28 Nov 2023 16:00:55 GMT">
								<outline text="myConsoleLog (&quot;createFeedRecordForReadingList: feedUrl == &quot; + feedUrl);" created="Fri, 01 Dec 2023 16:14:55 GMT"/>
								<outline text="reallysimple.readFeed (feedUrl, function (err, theFeed) {" created="Tue, 28 Nov 2023 15:57:13 GMT">
									<outline text="if (err) {" created="Tue, 28 Nov 2023 15:57:18 GMT">
										<outline text="myConsoleLog (&quot;createFeedRecordForReadingList: err.message == &quot; + err.message);" created="Tue, 28 Nov 2023 16:30:21 GMT"/>
										<outline text="callback (err);" created="Tue, 28 Nov 2023 15:57:21 GMT"/>
										<outline text="}" created="Tue, 28 Nov 2023 15:57:25 GMT"/>
										</outline>
									<outline text="else {" created="Tue, 28 Nov 2023 15:57:25 GMT">
										<outline text="var feedRec = setupNewFeedRec (feedUrl, theFeed);" created="Fri, 27 May 2022 14:51:31 GMT"/>
										<outline text="feedRec.ctItems = theFeed.items.length; " created="Wed, 13 Jul 2022 14:48:45 GMT"/>
										<outline text="feedRec.whoFirstSubscribed = screenname; "/>
										<outline text="feedRec.ctSubs = 1;" created="Wed, 31 Aug 2022 12:46:15 GMT"/>
										<outline text="saveFeed (feedRec, function (err) {" created="Fri, 01 Apr 2022 14:17:29 GMT">
											<outline text="if (err) {" created="Tue, 28 Nov 2023 16:31:23 GMT">
												<outline text="myConsoleLog (&quot;createFeedRecordForReadingList: err.message == &quot; + err.message);" created="Tue, 28 Nov 2023 16:30:21 GMT"/>
												<outline text="}" created="Tue, 28 Nov 2023 16:31:26 GMT"/>
												</outline>
											<outline text="callback (); //12/13/23 by DW" created="Wed, 13 Dec 2023 17:11:04 GMT"/>
											<outline text="});" created="Tue, 28 Nov 2023 16:31:17 GMT"/>
											</outline>
										<outline text="}" created="Tue, 28 Nov 2023 15:57:27 GMT"/>
										</outline>
									<outline text="});" created="Tue, 28 Nov 2023 15:57:14 GMT"/>
									</outline>
								<outline text="}" created="Tue, 28 Nov 2023 16:00:56 GMT"/>
								</outline>
							<outline text="});" created="Tue, 28 Nov 2023 16:00:27 GMT"/>
							</outline>
						<outline text="}" created="Tue, 28 Nov 2023 15:56:38 GMT"/>
						</outline>
					<outline text="function addReadingListFeedsToDatabase (screenname, opmlUrl, callback) { //12/1/23 by DW" created="Fri, 01 Dec 2023 15:56:27 GMT">
						<outline text="getNodeArrayFromOpml (opmlUrl, function (err, theNodeArray) { //10/25/23 by DW" created="Fri, 01 Dec 2023 15:57:20 GMT">
							<outline text="if (err) {" created="Thu, 01 Jun 2023 18:14:37 GMT">
								<outline text="if (callback !== undefined) {" created="Fri, 01 Dec 2023 16:34:26 GMT">
									<outline text="callback (err);" created="Thu, 01 Jun 2023 18:14:46 GMT"/>
									<outline text="}" created="Fri, 01 Dec 2023 16:34:32 GMT"/>
									</outline>
								<outline text="}" created="Thu, 01 Jun 2023 18:14:41 GMT"/>
								</outline>
							<outline text="else {" created="Thu, 01 Jun 2023 18:14:41 GMT">
								<outline text="function doNextSub (ix) {" created="Mon, 09 Oct 2023 17:19:58 GMT">
									<outline text="if (ix &lt; theNodeArray.length) {" created="Mon, 09 Oct 2023 17:20:34 GMT">
										<outline text="const item = theNodeArray [ix];" created="Fri, 01 Dec 2023 16:04:57 GMT"/>
										<outline text="createFeedRecordForReadingList (screenname, item.xmlUrl, function (err) {" created="Fri, 01 Dec 2023 16:03:23 GMT">
											<outline text="doNextSub (ix + 1);" created="Fri, 01 Dec 2023 16:04:29 GMT"/>
											<outline text="});" created="Fri, 01 Dec 2023 16:04:14 GMT"/>
											</outline>
										<outline text="}" created="Mon, 09 Oct 2023 17:21:06 GMT"/>
										</outline>
									<outline text="else {" created="Mon, 09 Oct 2023 17:20:34 GMT">
										<outline text="if (callback !== undefined) {" created="Fri, 01 Dec 2023 16:34:26 GMT">
											<outline text="callback (undefined, theNodeArray);" created="Tue, 24 Oct 2023 17:43:10 GMT"/>
											<outline text="}" created="Fri, 01 Dec 2023 16:34:32 GMT"/>
											</outline>
										<outline text="}" created="Mon, 09 Oct 2023 17:22:06 GMT"/>
										</outline>
									<outline text="}" created="Mon, 09 Oct 2023 17:20:27 GMT"/>
									</outline>
								<outline text="doNextSub (0);" created="Mon, 09 Oct 2023 17:19:58 GMT"/>
								<outline text="}" created="Thu, 01 Jun 2023 18:14:43 GMT"/>
								</outline>
							<outline text="});" created="Fri, 01 Dec 2023 15:57:21 GMT"/>
							</outline>
						<outline text="}" created="Fri, 01 Dec 2023 15:56:48 GMT"/>
						</outline>
					<outline text="function checkSubsForOneUserAndOneReadingList (screenname, opmlUrl, callback) {" created="Mon, 23 Oct 2023 23:36:07 GMT">
						<outline text="Changes" isComment="true" created="Mon, 23 Oct 2023 23:36:36 GMT">
							<outline text="12/13/23; 11:39:08 AM by DW" created="Wed, 13 Dec 2023 16:39:07 GMT">
								<outline text="When this needs to be called. " created="Wed, 13 Dec 2023 16:39:09 GMT">
									<outline text="When a user subscribes to a reading list. " created="Wed, 13 Dec 2023 16:39:14 GMT"/>
									<outline text="When the user clicks the Check Now link on the reading list info page in FeedLand." created="Wed, 13 Dec 2023 16:39:22 GMT"/>
									</outline>
								<outline text="When there's an error subscribing to a feed, we don't stop, we keep going. " created="Wed, 13 Dec 2023 17:01:44 GMT"/>
								</outline>
							<outline text="11/19/23; 9:33:55 AM by DW" created="Sun, 19 Nov 2023 14:33:54 GMT">
								<outline text="When we create the subscription record, we stored the categories incorrectly. They need to be surrounded by commas, or they won't be found when building a river based on categories. I wrote up the process in this thread." created="Sun, 19 Nov 2023 14:33:55 GMT">
									<outline text="https://github.com/scripting/a8c-FeedLand-Support/issues/67"/>
									</outline>
								</outline>
							<outline text="10/25/23; 4:17:08 PM by DW" created="Wed, 25 Oct 2023 20:17:06 GMT">
								<outline text="We don't store the categories in the readinglist table, so we read the OPML file, and when we need the categories for a subscription, we get it from the OPML data we read.   " created="Wed, 25 Oct 2023 20:17:09 GMT"/>
								</outline>
							<outline text="10/24/23; 1:44:46 PM by DW" created="Mon, 23 Oct 2023 23:36:40 GMT">
								<outline text="This function has a long name. :-)" created="Mon, 23 Oct 2023 23:36:41 GMT"/>
								<outline text="For one user and one reading list, make sure the user is subscribed to all the feeds in the reading list. " created="Mon, 23 Oct 2023 23:36:57 GMT"/>
								<outline text="This has to be called when a user subscrbes to a list. Belive it or not this was missing in the first implementation of reading lists." created="Tue, 24 Oct 2023 17:27:56 GMT"/>
								</outline>
							</outline>
						<outline text="getSubscriptions (screenname, function (err, theSubscriptions) {" created="Tue, 24 Oct 2023 17:28:29 GMT">
							<outline text="if (err) {" created="Tue, 24 Oct 2023 17:42:50 GMT">
								<outline text="callback (err);" created="Tue, 24 Oct 2023 17:42:53 GMT"/>
								<outline text="}" created="Tue, 24 Oct 2023 17:42:56 GMT"/>
								</outline>
							<outline text="else {" created="Tue, 24 Oct 2023 17:42:57 GMT">
								<outline text="getReadingList (opmlUrl, function (err, listRec) {" created="Sun, 08 Oct 2023 14:08:22 GMT">
									<outline text="if (err) {" created="Sun, 08 Oct 2023 14:38:39 GMT">
										<outline text="callback (err);" created="Sun, 08 Oct 2023 14:38:41 GMT"/>
										<outline text="}" created="Sun, 08 Oct 2023 14:38:44 GMT"/>
										</outline>
									<outline text="else {" created="Sun, 08 Oct 2023 14:38:45 GMT">
										<outline text="getNodeArrayFromOpml (opmlUrl, function (err, theNodeArray) { //10/25/23 by DW" created="Thu, 01 Jun 2023 18:14:16 GMT">
											<outline text="if (err) {" created="Thu, 01 Jun 2023 18:14:37 GMT">
												<outline text="callback (err);" created="Thu, 01 Jun 2023 18:14:46 GMT"/>
												<outline text="}" created="Thu, 01 Jun 2023 18:14:41 GMT"/>
												</outline>
											<outline text="else {" created="Thu, 01 Jun 2023 18:14:41 GMT">
												<outline text="var urlsToSubscribeTo = new Array ();" created="Tue, 24 Oct 2023 17:35:46 GMT"/>
												<outline text="function notFindSubscription (feedUrl, opmlUrl) {" created="Tue, 24 Oct 2023 17:37:07 GMT">
													<outline text="var notfound = true;" created="Tue, 24 Oct 2023 17:37:49 GMT"/>
													<outline text="theSubscriptions.forEach (function (item) {" created="Tue, 24 Oct 2023 17:37:27 GMT">
														<outline text="if ((item.feedUrl == feedUrl) &amp;&amp; (item.urlReadingList == opmlUrl)) {" created="Tue, 24 Oct 2023 17:37:49 GMT">
															<outline text="notfound = false;" created="Tue, 24 Oct 2023 17:39:16 GMT"/>
															<outline text="}" created="Tue, 24 Oct 2023 17:39:23 GMT"/>
															</outline>
														<outline text="});" created="Tue, 24 Oct 2023 17:37:36 GMT"/>
														</outline>
													<outline text="return (notfound);" created="Tue, 24 Oct 2023 17:37:49 GMT"/>
													<outline text="}" created="Tue, 24 Oct 2023 17:37:20 GMT"/>
													</outline>
												<outline text="function getCategoriesFor (feedUrl) { //10/25/23 by DW" created="Wed, 25 Oct 2023 20:22:17 GMT">
													<outline text="var categories = undefined;" created="Wed, 25 Oct 2023 20:22:50 GMT"/>
													<outline text="theNodeArray.forEach (function (item) {" created="Wed, 25 Oct 2023 20:22:51 GMT">
														<outline text="if (item.xmlUrl == feedUrl) {" created="Wed, 25 Oct 2023 20:23:05 GMT">
															<outline text="categories = item.category;" created="Wed, 25 Oct 2023 20:23:21 GMT"/>
															<outline text="}" created="Wed, 25 Oct 2023 20:23:13 GMT"/>
															</outline>
														<outline text="});" created="Wed, 25 Oct 2023 20:23:01 GMT"/>
														</outline>
													<outline text="" created="Thu, 30 Nov 2023 21:11:35 GMT"/>
													<outline text="if (categories === undefined) { //11/30/23 by DW" created="Thu, 30 Nov 2023 21:11:36 GMT">
														<outline text="return (undefined);" created="Thu, 30 Nov 2023 21:12:11 GMT"/>
														<outline text="}" created="Thu, 30 Nov 2023 21:11:47 GMT"/>
														</outline>
													<outline text="else {" created="Thu, 30 Nov 2023 21:11:54 GMT">
														<outline text="return (&quot;,&quot; + categories + &quot;,&quot;); //11/19/23 by DW"/>
														<outline text="}" created="Thu, 30 Nov 2023 21:11:55 GMT"/>
														</outline>
													<outline text="" created="Thu, 30 Nov 2023 21:11:37 GMT"/>
													<outline text="return (categories);" isComment="true" created="Wed, 25 Oct 2023 20:23:47 GMT"/>
													<outline text="}" created="Wed, 25 Oct 2023 20:22:29 GMT"/>
													</outline>
												<outline text="listRec.feedUrls.forEach (function (feedUrl) {" created="Tue, 24 Oct 2023 17:35:46 GMT">
													<outline text="if (notFindSubscription (feedUrl, opmlUrl)) {" created="Tue, 24 Oct 2023 17:36:24 GMT">
														<outline text="urlsToSubscribeTo.push (feedUrl);" created="Tue, 24 Oct 2023 17:40:37 GMT"/>
														<outline text="}" created="Tue, 24 Oct 2023 17:36:58 GMT"/>
														</outline>
													<outline text="});" created="Tue, 24 Oct 2023 17:35:59 GMT"/>
													</outline>
												<outline text="console.log (&quot;checkSubsForOneUserAndOneReadingList: urlsToSubscribeTo == &quot; + utils.jsonStringify (urlsToSubscribeTo));" created="Tue, 24 Oct 2023 17:41:26 GMT"/>
												<outline text="" created="Tue, 24 Oct 2023 18:03:11 GMT"/>
												<outline text="function doNextSub (ix) {" created="Mon, 09 Oct 2023 17:19:58 GMT">
													<outline text="if (ix &lt; urlsToSubscribeTo.length) {" created="Mon, 09 Oct 2023 17:20:34 GMT">
														<outline text="const theFeedUrl = urlsToSubscribeTo [ix];" created="Wed, 25 Oct 2023 20:25:34 GMT"/>
														<outline text="const subRec = {" created="Sat, 07 Jan 2023 15:53:16 GMT">
															<outline text="listName: screenname, " created="Sat, 07 Jan 2023 15:53:44 GMT"/>
															<outline text="feedUrl: theFeedUrl," created="Tue, 10 Oct 2023 16:07:25 GMT"/>
															<outline text="categories: getCategoriesFor (theFeedUrl)," created="Wed, 11 Oct 2023 20:14:16 GMT"/>
															<outline text="categories: &quot;,podcasts,&quot;, //fix me" isComment="true" created="Wed, 11 Oct 2023 20:14:16 GMT"/>
															<outline text="whenUpdated: new Date ()," created="Tue, 10 Oct 2023 16:07:28 GMT"/>
															<outline text="urlReadingList: opmlUrl" created="Tue, 10 Oct 2023 16:07:56 GMT"/>
															<outline text="};" created="Sat, 07 Jan 2023 15:53:20 GMT"/>
															</outline>
														<outline text="const sqltext = &quot;replace into subscriptions &quot; + davesql.encodeValues (subRec);" created="Sat, 07 Jan 2023 15:52:17 GMT"/>
														<outline text="davesql.runSqltext (sqltext, function (err, result) {">
															<outline text="if (err) {" created="Fri, 18 Mar 2022 15:46:18 GMT">
																<outline text="myConsoleLog (&quot;checkSubsForOneUserAndOneReadingList: err.message == &quot; + err.message);" created="Fri, 18 Mar 2022 15:46:22 GMT"/>
																<outline text="doNextSub (ix + 1);" created="Fri, 18 Mar 2022 15:46:28 GMT"/>
																<outline text="}" created="Fri, 18 Mar 2022 15:46:25 GMT"/>
																</outline>
															<outline text="else {" created="Fri, 18 Mar 2022 15:46:27 GMT">
																<outline text="myConsoleLog (&quot;checkSubsForOneUserAndOneReadingList: subscribed &quot; + screenname + &quot; to &quot; + utils.jsonStringify (subRec));" created="Tue, 10 Oct 2023 17:19:20 GMT"/>
																<outline text="createFeedRecordForReadingList (screenname, theFeedUrl, function (err) {" created="Tue, 28 Nov 2023 16:17:08 GMT">
																	<outline text="doNextSub (ix + 1);" created="Fri, 18 Mar 2022 15:46:28 GMT"/>
																	<outline text="});" created="Tue, 28 Nov 2023 16:17:26 GMT"/>
																	</outline>
																<outline text="}" created="Fri, 18 Mar 2022 15:46:34 GMT"/>
																</outline>
															<outline text="});"/>
															</outline>
														<outline text="}" created="Mon, 09 Oct 2023 17:21:06 GMT"/>
														</outline>
													<outline text="else {" created="Mon, 09 Oct 2023 17:20:34 GMT">
														<outline text="callback (undefined, urlsToSubscribeTo);" created="Tue, 24 Oct 2023 17:43:10 GMT"/>
														<outline text="}" created="Mon, 09 Oct 2023 17:22:06 GMT"/>
														</outline>
													<outline text="}" created="Mon, 09 Oct 2023 17:20:27 GMT"/>
													</outline>
												<outline text="doNextSub (0);" created="Mon, 09 Oct 2023 17:19:58 GMT"/>
												<outline text="}" created="Thu, 01 Jun 2023 18:14:43 GMT"/>
												</outline>
											<outline text="});" created="Thu, 01 Jun 2023 18:14:32 GMT"/>
											</outline>
										<outline text="}" created="Sun, 08 Oct 2023 14:38:46 GMT"/>
										</outline>
									<outline text="});" created="Sun, 08 Oct 2023 14:38:35 GMT"/>
									</outline>
								<outline text="}" created="Tue, 24 Oct 2023 17:42:59 GMT"/>
								</outline>
							<outline text="});" created="Tue, 24 Oct 2023 17:31:44 GMT"/>
							</outline>
						<outline text="}" created="Mon, 23 Oct 2023 23:37:26 GMT"/>
						</outline>
					<outline text="" created="Fri, 01 Dec 2023 15:56:28 GMT"/>
					<outline text="function parseFeedUrls (result) {" created="Mon, 23 Oct 2023 15:17:46 GMT">
						<outline text="result.forEach (function (item) { //10/23/23 by DW" created="Mon, 23 Oct 2023 14:48:34 GMT">
							<outline text="try {" created="Mon, 23 Oct 2023 15:03:57 GMT">
								<outline text="item.feedUrls = JSON.parse (item.feedUrls);" created="Mon, 23 Oct 2023 15:04:08 GMT"/>
								<outline text="}" created="Mon, 23 Oct 2023 15:04:01 GMT"/>
								</outline>
							<outline text="catch (err) {" created="Mon, 23 Oct 2023 15:04:01 GMT">
								<outline text="}" created="Mon, 23 Oct 2023 15:04:05 GMT"/>
								</outline>
							<outline text="});" created="Mon, 23 Oct 2023 15:03:54 GMT"/>
							</outline>
						<outline text="return (result);" created="Mon, 23 Oct 2023 15:18:51 GMT"/>
						<outline text="}" created="Mon, 23 Oct 2023 15:17:51 GMT"/>
						</outline>
					<outline text="function isReadingListInDatabase (opmlUrl, callback) { //10/9/23 by DW" created="Sun, 08 Oct 2023 21:07:15 GMT">
						<outline text="const sqltext = &quot;select * from readinglists where opmlUrl = &quot; + davesql.encode (opmlUrl) + &quot;;&quot;;" created="Sun, 08 Oct 2023 21:08:45 GMT"/>
						<outline text="davesql.runSqltext (sqltext, function (err, result) {">
							<outline text="if (err) {">
								<outline text="callback (false);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="if (result.length == 0) {" created="Sun, 08 Oct 2023 21:11:01 GMT">
									<outline text="callback (false);"/>
									<outline text="}" created="Sun, 08 Oct 2023 21:11:16 GMT"/>
									</outline>
								<outline text="else {" created="Sun, 08 Oct 2023 21:11:16 GMT">
									<outline text="callback (true, result [0]);"/>
									<outline text="}" created="Sun, 08 Oct 2023 21:11:18 GMT"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}" created="Sun, 08 Oct 2023 21:08:40 GMT"/>
						</outline>
					<outline text="function isUserSubscribedToReadingList (opmlUrl, screenname, callback) { //10/8/23 by DW">
						<outline text="var sqltext = &quot;select * from readinglistsubscriptions where screenname=&quot; + davesql.encode (screenname) + &quot; and opmlUrl=&quot; + davesql.encode (opmlUrl) + &quot;;&quot;;"/>
						<outline text="davesql.runSqltext (sqltext, function (err, result) {">
							<outline text="if (err) {">
								<outline text="callback (false);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="const jstruct = {" created="Wed, 18 May 2022 16:11:29 GMT">
									<outline text="flSubscribed: false" created="Wed, 18 May 2022 16:13:13 GMT"/>
									<outline text="}" created="Wed, 18 May 2022 16:13:24 GMT"/>
									</outline>
								<outline text="if (result.length &gt; 0) {">
									<outline text="jstruct.flSubscribed = true;" created="Wed, 18 May 2022 16:12:13 GMT"/>
									<outline text="jstruct.theSubscription = result [0];" created="Wed, 18 May 2022 16:12:50 GMT"/>
									<outline text="}"/>
									</outline>
								<outline text="callback (undefined, jstruct);" created="Wed, 18 May 2022 16:14:00 GMT"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function addReadingListSubscription (screenname, opmlUrl, callback) { //10/8/23 by DW" created="Sun, 08 Oct 2023 21:21:31 GMT">
						<outline text="var subsRec = {">
							<outline text="opmlUrl,"/>
							<outline text="screenname," created="Sun, 08 Oct 2023 21:56:49 GMT"/>
							<outline text="whenCreated: new Date ()" created="Sun, 08 Oct 2023 21:50:24 GMT"/>
							<outline text="};"/>
							</outline>
						<outline text="var sqltext = &quot;replace into readinglistsubscriptions &quot; + davesql.encodeValues (subsRec);"/>
						<outline text="davesql.runSqltext (sqltext, function (err, result) {">
							<outline text="if (err) {" created="Fri, 18 Mar 2022 15:46:18 GMT">
								<outline text="callback (err);" created="Fri, 18 Mar 2022 15:46:22 GMT"/>
								<outline text="}" created="Fri, 18 Mar 2022 15:46:25 GMT"/>
								</outline>
							<outline text="else {" created="Fri, 18 Mar 2022 15:46:27 GMT">
								<outline text="callback (undefined, subsRec);" created="Fri, 18 Mar 2022 15:46:28 GMT"/>
								<outline text="}" created="Fri, 18 Mar 2022 15:46:34 GMT"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}" created="Sun, 08 Oct 2023 21:21:39 GMT"/>
						</outline>
					<outline text="function addReadingListToDatabase (opmlUrl, whoFirstSubscribed, callback) { //10/8/23 by DW" created="Sun, 08 Oct 2023 21:24:28 GMT">
						<outline text="Changes" isComment="true" created="Thu, 12 Oct 2023 13:19:48 GMT">
							<outline text="10/28/23; 10:30:35 AM by DW" created="Sat, 28 Oct 2023 14:30:34 GMT">
								<outline text="We were creating the reading list in the database with an empty feedUrl array. Why? We have all the info right here, in the freaking outline. " created="Sat, 28 Oct 2023 14:30:35 GMT"/>
								</outline>
							<outline text="10/12/23; 9:19:52 AM by DW" created="Thu, 12 Oct 2023 13:19:51 GMT">
								<outline text="Read the OPML file to get the head section, where we get the title and description for the listRec." created="Thu, 12 Oct 2023 13:19:52 GMT"/>
								</outline>
							</outline>
						<outline text="getOutlineFromOpml (opmlUrl, function (err, theOutline) { //10/12/23 by DW" created="Thu, 12 Oct 2023 13:22:05 GMT">
							<outline text="if (err) {" created="Thu, 12 Oct 2023 14:02:16 GMT">
								<outline text="callback (err);" created="Thu, 12 Oct 2023 14:02:25 GMT"/>
								<outline text="}" created="Thu, 12 Oct 2023 14:02:19 GMT"/>
								</outline>
							<outline text="else {" created="Thu, 12 Oct 2023 14:02:19 GMT">
								<outline text="var title, description;" created="Thu, 12 Oct 2023 14:03:24 GMT"/>
								<outline text="if (theOutline.opml.head !== undefined) {" created="Thu, 12 Oct 2023 14:03:44 GMT">
									<outline text="title = theOutline.opml.head.title;" created="Thu, 12 Oct 2023 14:04:14 GMT"/>
									<outline text="description = theOutline.opml.head.description;" created="Thu, 12 Oct 2023 14:04:15 GMT"/>
									<outline text="}" created="Thu, 12 Oct 2023 14:03:53 GMT"/>
									</outline>
								<outline text="const listRec = {">
									<outline text="opmlUrl," created="Sun, 08 Oct 2023 21:48:45 GMT"/>
									<outline text="title, description, //10/12/23 by DW" created="Thu, 12 Oct 2023 14:01:24 GMT"/>
									<outline text="whenCreated: new Date ()," created="Sun, 08 Oct 2023 21:50:24 GMT"/>
									<outline text="whenChecked: new Date (0),"/>
									<outline text="whoFirstSubscribed, " created="Mon, 09 Oct 2023 14:47:27 GMT"/>
									<outline text="feedUrls: getUrlArrayFromOutline (theOutline) //10/28/23 by DW" created="Sat, 28 Oct 2023 14:39:58 GMT"/>
									<outline text="feedUrls: utils.jsonStringify (new Array ()) //empty array" isComment="true"/>
									<outline text="};"/>
									</outline>
								<outline text="var sqltext = &quot;replace into readinglists &quot; + davesql.encodeValues (listRec) + &quot;;&quot;;"/>
								<outline text="davesql.runSqltext (sqltext, function (err, result) {">
									<outline text="if (err) {" created="Sun, 08 Oct 2023 21:47:44 GMT">
										<outline text="callback (err);" created="Sun, 08 Oct 2023 21:47:54 GMT"/>
										<outline text="}" created="Sun, 08 Oct 2023 21:47:48 GMT"/>
										</outline>
									<outline text="else {" created="Sun, 08 Oct 2023 21:47:49 GMT">
										<outline text="callback (undefined, listRec);" created="Sun, 08 Oct 2023 21:48:01 GMT"/>
										<outline text="}" created="Sun, 08 Oct 2023 21:47:51 GMT"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="}" created="Thu, 12 Oct 2023 14:02:21 GMT"/>
								</outline>
							<outline text="});" created="Thu, 12 Oct 2023 13:22:09 GMT"/>
							</outline>
						<outline text="}" created="Sun, 08 Oct 2023 21:24:39 GMT"/>
						</outline>
					<outline text="" created="Tue, 28 Nov 2023 16:14:42 GMT"/>
					<outline text="function subscribeToReadingList (screenname, opmlUrl, callback) { //10/8/23 by DW" created="Sun, 08 Oct 2023 21:02:16 GMT">
						<outline text="Changes" isComment="true" created="Fri, 01 Dec 2023 16:31:57 GMT">
							<outline text="6/20/24; 8:50:37 AM by DW" created="Thu, 20 Jun 2024 12:50:36 GMT">
								<outline text="We weren't supplying a callback to checkSubsForOneUserAndOneReadingList. " created="Thu, 20 Jun 2024 12:50:37 GMT"/>
								<outline text="The function doesn't check if the callback is defined, so it always dies when this happens." created="Thu, 20 Jun 2024 12:50:59 GMT"/>
								<outline text="This was a crashing bug. " created="Thu, 20 Jun 2024 12:51:18 GMT"/>
								</outline>
							<outline text="12/13/23; 11:44:38 AM by DW" created="Wed, 13 Dec 2023 16:44:37 GMT">
								<outline text="After we return, make sure the user is subscribed to each of the feeds in the reading list." created="Wed, 13 Dec 2023 16:44:38 GMT"/>
								</outline>
							<outline text="12/1/23; 11:31:59 AM by DW" created="Fri, 01 Dec 2023 16:31:58 GMT">
								<outline text="The question is how much work to do now, and how much to wait for the next time the reading list is checked. " created="Fri, 01 Dec 2023 16:32:00 GMT"/>
								<outline text="What I decided was that we'd make sure each of the feeds in the list that exists are in the database and the user is subscribed to them." created="Fri, 01 Dec 2023 16:32:19 GMT"/>
								<outline text="But we return before all that is done, because it could take a minute or two if there are a lot of feeds. " created="Fri, 01 Dec 2023 16:32:53 GMT"/>
								</outline>
							</outline>
						<outline text="isReadingListInDatabase (opmlUrl, function (flInDatabase, listRec) {" created="Tue, 29 Mar 2022 19:29:53 GMT">
							<outline text="function subscribeUserToReadingList () {" created="Fri, 01 Dec 2023 15:49:49 GMT">
								<outline text="addReadingListSubscription (screenname, opmlUrl, function (err, theSubscription) {" created="Fri, 18 Mar 2022 15:36:26 GMT">
									<outline text="if (err) {" created="Fri, 27 May 2022 14:17:11 GMT">
										<outline text="callback (err);" created="Fri, 27 May 2022 14:14:09 GMT"/>
										<outline text="}" created="Fri, 27 May 2022 14:17:15 GMT"/>
										</outline>
									<outline text="else {" created="Fri, 27 May 2022 14:17:15 GMT">
										<outline text="callback (undefined, theSubscription);" created="Fri, 27 May 2022 14:14:09 GMT"/>
										<outline text="addReadingListFeedsToDatabase (screenname, opmlUrl, function (err) {" created="Tue, 24 Oct 2023 17:44:03 GMT">
											<outline text="if (!err) {" created="Wed, 13 Dec 2023 16:43:23 GMT">
												<outline text="checkSubsForOneUserAndOneReadingList (screenname, opmlUrl, function (err, urlsToSubscribeTo) { //6/20/24 by DW" created="Wed, 13 Dec 2023 16:43:56 GMT">
													<outline text="if (err) {" created="Thu, 20 Jun 2024 12:52:33 GMT">
														<outline text="console.log (&quot;subscribeToReadingList: err.message == &quot; + err.message);" created="Thu, 20 Jun 2024 12:52:37 GMT"/>
														<outline text="}" created="Thu, 20 Jun 2024 12:52:36 GMT"/>
														</outline>
													<outline text="});" created="Thu, 20 Jun 2024 12:50:26 GMT"/>
													</outline>
												<outline text="}" created="Wed, 13 Dec 2023 16:43:28 GMT"/>
												</outline>
											<outline text="});" created="Wed, 13 Dec 2023 16:43:21 GMT"/>
											</outline>
										<outline text="}" created="Fri, 27 May 2022 14:17:17 GMT"/>
										</outline>
									<outline text="});" created="Fri, 18 Mar 2022 15:42:06 GMT"/>
									</outline>
								<outline text="}" created="Fri, 01 Dec 2023 15:50:01 GMT"/>
								</outline>
							<outline text="if (flInDatabase) {" created="Tue, 29 Mar 2022 19:30:01 GMT">
								<outline text="isUserSubscribedToReadingList (opmlUrl, screenname, function (err, jstruct) {" created="Fri, 27 May 2022 14:15:06 GMT">
									<outline text="if (err) {" created="Fri, 27 May 2022 15:43:07 GMT">
										<outline text="callback (err);" created="Fri, 27 May 2022 15:43:11 GMT"/>
										<outline text="}" created="Fri, 27 May 2022 15:43:15 GMT"/>
										</outline>
									<outline text="else {" created="Fri, 27 May 2022 15:43:16 GMT">
										<outline text="if (jstruct.flSubscribed) {" created="Fri, 27 May 2022 14:15:39 GMT">
											<outline text="callback (undefined, listRec, jstruct.theSubscription);" created="Fri, 27 May 2022 14:14:09 GMT"/>
											<outline text="}" created="Fri, 27 May 2022 14:15:43 GMT"/>
											</outline>
										<outline text="else {" created="Fri, 27 May 2022 14:15:45 GMT">
											<outline text="subscribeUserToReadingList (); //12/1/23 by DW" created="Fri, 01 Dec 2023 15:50:32 GMT"/>
											<outline text="addReadingListSubscription (screenname, opmlUrl, function (err, theSubscription) {" isComment="true" created="Fri, 18 Mar 2022 15:36:26 GMT">
												<outline text="if (err) {" created="Fri, 27 May 2022 14:17:11 GMT">
													<outline text="callback (err);" created="Fri, 27 May 2022 14:14:09 GMT"/>
													<outline text="}" created="Fri, 27 May 2022 14:17:15 GMT"/>
													</outline>
												<outline text="else {" created="Fri, 27 May 2022 14:17:15 GMT">
													<outline text="checkSubsForOneUserAndOneReadingList (screenname, opmlUrl, function (err, urlsToSubscribeTo) { //10/24/23 by DW" created="Tue, 24 Oct 2023 17:44:03 GMT">
														<outline text="if (err) {" created="Tue, 24 Oct 2023 17:57:01 GMT">
															<outline text="callback (err);" created="Tue, 24 Oct 2023 17:57:29 GMT"/>
															<outline text="}" created="Tue, 24 Oct 2023 17:57:04 GMT"/>
															</outline>
														<outline text="else {" created="Tue, 24 Oct 2023 17:57:04 GMT">
															<outline text="callback (undefined, listRec, theSubscription);" created="Fri, 27 May 2022 14:14:09 GMT"/>
															<outline text="}" created="Tue, 24 Oct 2023 17:57:06 GMT"/>
															</outline>
														<outline text="});" created="Tue, 24 Oct 2023 17:56:01 GMT"/>
														</outline>
													<outline text="}" created="Fri, 27 May 2022 14:17:17 GMT"/>
													</outline>
												<outline text="});" created="Fri, 18 Mar 2022 15:42:06 GMT"/>
												</outline>
											<outline text="}" created="Fri, 27 May 2022 14:15:47 GMT"/>
											</outline>
										<outline text="}" created="Fri, 27 May 2022 15:43:18 GMT"/>
										</outline>
									<outline text="});" created="Fri, 27 May 2022 14:15:22 GMT"/>
									</outline>
								<outline text="}" created="Tue, 29 Mar 2022 19:30:08 GMT"/>
								</outline>
							<outline text="else {" created="Fri, 27 May 2022 14:18:20 GMT">
								<outline text="const whoFirstSubscribed = screenname;" created="Mon, 09 Oct 2023 14:48:21 GMT"/>
								<outline text="addReadingListToDatabase (opmlUrl, whoFirstSubscribed, function (err, listRec) {" created="Sun, 08 Oct 2023 21:23:39 GMT">
									<outline text="if (err) {" created="Sun, 08 Oct 2023 21:24:06 GMT">
										<outline text="callback (err);" created="Sun, 08 Oct 2023 21:24:08 GMT"/>
										<outline text="}" created="Sun, 08 Oct 2023 21:24:12 GMT"/>
										</outline>
									<outline text="else {" created="Sun, 08 Oct 2023 21:24:13 GMT">
										<outline text="subscribeUserToReadingList (); //12/1/23 by DW" created="Fri, 01 Dec 2023 15:49:24 GMT"/>
										<outline text="addReadingListSubscription (screenname, opmlUrl, function (err, theSubscription) {" isComment="true" created="Fri, 18 Mar 2022 15:36:26 GMT">
											<outline text="if (err) {" created="Fri, 27 May 2022 14:17:11 GMT">
												<outline text="callback (err);" created="Fri, 27 May 2022 14:14:09 GMT"/>
												<outline text="}" created="Fri, 27 May 2022 14:17:15 GMT"/>
												</outline>
											<outline text="else {" created="Fri, 27 May 2022 14:17:15 GMT">
												<outline text="callback (undefined, listRec, theSubscription);" created="Fri, 27 May 2022 14:14:09 GMT"/>
												<outline text="}" created="Fri, 27 May 2022 14:17:17 GMT"/>
												</outline>
											<outline text="});" created="Fri, 18 Mar 2022 15:42:06 GMT"/>
											</outline>
										<outline text="}" created="Sun, 08 Oct 2023 21:24:15 GMT"/>
										</outline>
									<outline text="});" created="Sun, 08 Oct 2023 21:23:57 GMT"/>
									</outline>
								<outline text="}" created="Fri, 27 May 2022 14:18:21 GMT"/>
								</outline>
							<outline text="});" created="Tue, 29 Mar 2022 19:29:54 GMT"/>
							</outline>
						<outline text="}" created="Sun, 08 Oct 2023 21:02:29 GMT"/>
						</outline>
					<outline text="" created="Tue, 28 Nov 2023 16:14:42 GMT"/>
					<outline text="function getReadingList (opmlUrl, callback) { //10/8/23 by DW" created="Sun, 08 Oct 2023 14:29:10 GMT">
						<outline text="const sqltext = &quot;select * from readinglists where opmlurl=&quot; + davesql.encode (opmlUrl) + &quot;;&quot;;" created="Sun, 08 Oct 2023 14:29:32 GMT"/>
						<outline text="davesql.runSqltext (sqltext, function (err, result) {">
							<outline text="if (err) {">
								<outline text="callback (err);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="if (result.length == 0) {" created="Mon, 09 Oct 2023 16:01:28 GMT">
									<outline text="const message = &quot;There is no readling list with that URL.&quot;;" created="Mon, 09 Oct 2023 16:02:00 GMT"/>
									<outline text="callback ({message});" created="Mon, 09 Oct 2023 16:02:27 GMT"/>
									<outline text="}" created="Mon, 09 Oct 2023 16:02:37 GMT"/>
									</outline>
								<outline text="else {" created="Mon, 09 Oct 2023 16:02:39 GMT">
									<outline text="var feedUrls = undefined;" created="Mon, 09 Oct 2023 16:05:56 GMT"/>
									<outline text="try {" created="Sun, 08 Oct 2023 14:36:34 GMT">
										<outline text="feedUrls = JSON.parse (result [0].feedUrls);" created="Sun, 08 Oct 2023 14:37:04 GMT"/>
										<outline text="}" created="Sun, 08 Oct 2023 14:36:38 GMT"/>
										</outline>
									<outline text="catch (err) {" created="Sun, 08 Oct 2023 14:36:39 GMT">
										<outline text="const message = &quot;Couldn't parse the feedUrls value for the reading list record.&quot;;" created="Mon, 09 Oct 2023 16:02:00 GMT"/>
										<outline text="callback ({message});" created="Mon, 09 Oct 2023 16:02:27 GMT"/>
										<outline text="}" created="Sun, 08 Oct 2023 14:36:43 GMT"/>
										</outline>
									<outline text="" created="Mon, 09 Oct 2023 16:04:10 GMT"/>
									<outline text="if (feedUrls !== undefined) {" created="Mon, 09 Oct 2023 16:04:10 GMT">
										<outline text="const listRec = {" created="Mon, 09 Oct 2023 16:02:57 GMT">
											<outline text="opmlUrl, " created="Sun, 08 Oct 2023 14:33:29 GMT"/>
											<outline text="title: result [0].title," created="Sun, 08 Oct 2023 14:33:49 GMT"/>
											<outline text="description: result [0].description," created="Sun, 08 Oct 2023 14:33:49 GMT"/>
											<outline text="whenCreated: result [0].whenCreated," created="Sun, 08 Oct 2023 14:33:49 GMT"/>
											<outline text="whenChecked: result [0].whenChecked," created="Sun, 08 Oct 2023 14:33:49 GMT"/>
											<outline text="ctChecks: result [0].ctChecks," created="Sun, 08 Oct 2023 14:33:49 GMT"/>
											<outline text="feedUrls" created="Sun, 08 Oct 2023 14:34:22 GMT"/>
											<outline text="}" created="Mon, 09 Oct 2023 16:03:11 GMT"/>
											</outline>
										<outline text="callback (undefined, listRec);" created="Sun, 08 Oct 2023 14:40:07 GMT"/>
										<outline text="}" created="Mon, 09 Oct 2023 16:06:27 GMT"/>
										</outline>
									<outline text="}" created="Mon, 09 Oct 2023 16:02:42 GMT"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}" created="Sun, 08 Oct 2023 14:29:28 GMT"/>
						</outline>
					<outline text="function saveReadingList (listRec, callback) { //10/10/23 by DW" created="Sun, 08 Oct 2023 21:24:28 GMT">
						<outline text="var sqltext = &quot;replace into readinglists &quot; + davesql.encodeValues (listRec) + &quot;;&quot;;"/>
						<outline text="davesql.runSqltext (sqltext, function (err, result) {">
							<outline text="if (err) {" created="Sun, 08 Oct 2023 21:47:44 GMT">
								<outline text="callback (err);" created="Sun, 08 Oct 2023 21:47:54 GMT"/>
								<outline text="}" created="Sun, 08 Oct 2023 21:47:48 GMT"/>
								</outline>
							<outline text="else {" created="Sun, 08 Oct 2023 21:47:49 GMT">
								<outline text="callback (undefined, listRec);" created="Sun, 08 Oct 2023 21:48:01 GMT"/>
								<outline text="}" created="Sun, 08 Oct 2023 21:47:51 GMT"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}" created="Sun, 08 Oct 2023 21:24:39 GMT"/>
						</outline>
					<outline text="function saveReadingListFeedUrls (opmlUrl, feedUrls, callback) { //10/9/23 by DW" created="Mon, 09 Oct 2023 17:27:12 GMT">
						<outline text="getReadingList (opmlUrl, function (err, listRec) {" created="Sun, 08 Oct 2023 14:08:22 GMT">
							<outline text="if (err) {" created="Sun, 08 Oct 2023 14:38:39 GMT">
								<outline text="callback (err);" created="Sun, 08 Oct 2023 14:38:41 GMT"/>
								<outline text="}" created="Sun, 08 Oct 2023 14:38:44 GMT"/>
								</outline>
							<outline text="else {" created="Sun, 08 Oct 2023 14:38:45 GMT">
								<outline text="listRec.feedUrls = utils.jsonStringify (feedUrls);" created="Mon, 09 Oct 2023 17:29:14 GMT"/>
								<outline text="listRec.whenChecked = new Date ();" created="Mon, 09 Oct 2023 17:29:43 GMT"/>
								<outline text="listRec.ctChecks++;" created="Mon, 09 Oct 2023 17:29:43 GMT"/>
								<outline text="" created="Mon, 09 Oct 2023 17:30:09 GMT"/>
								<outline text="const sqltext = &quot;replace into readinglists &quot; + davesql.encodeValues (listRec) + &quot;;&quot;;" created="Sun, 08 Oct 2023 14:29:32 GMT"/>
								<outline text="davesql.runSqltext (sqltext, function (err, result) {">
									<outline text="if (err) {">
										<outline text="callback (err);"/>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="callback (undefined, listRec);" created="Mon, 09 Oct 2023 17:32:27 GMT"/>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="}" created="Sun, 08 Oct 2023 14:38:46 GMT"/>
								</outline>
							<outline text="});" created="Sun, 08 Oct 2023 14:38:35 GMT"/>
							</outline>
						<outline text="}" created="Mon, 09 Oct 2023 17:28:04 GMT"/>
						</outline>
					<outline text="function getReadingListSubscribers (opmlUrl, callback) { //10/9/23 by DW" created="Mon, 09 Oct 2023 16:53:15 GMT">
						<outline text="const sqltext = &quot;select screenname from readinglistsubscriptions where opmlUrl = &quot; + davesql.encode (opmlUrl) + &quot;;&quot;;" created="Mon, 09 Oct 2023 16:53:50 GMT"/>
						<outline text="davesql.runSqltext (sqltext, function (err, result) {">
							<outline text="if (err) {">
								<outline text="callback (err);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="var subslist = new Array ();" created="Mon, 09 Oct 2023 17:00:22 GMT"/>
								<outline text="result.forEach (function (item) {" created="Mon, 09 Oct 2023 17:00:22 GMT">
									<outline text="subslist.push (item.screenname);" created="Mon, 09 Oct 2023 17:00:57 GMT"/>
									<outline text="});" created="Mon, 09 Oct 2023 17:00:53 GMT"/>
									</outline>
								<outline text="callback (undefined, subslist);" created="Mon, 09 Oct 2023 16:55:10 GMT"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}" created="Mon, 09 Oct 2023 16:53:37 GMT"/>
						</outline>
					<outline text="function batchSubscribe (urls, users, flSubscribe, urlReadingList, newNodeArray, callback) { //10/9/23 by DW" created="Mon, 09 Oct 2023 17:06:46 GMT">
						<outline text="" created="Wed, 11 Oct 2023 20:12:43 GMT"/>
						<outline text="var cats = new Object ();" created="Wed, 11 Oct 2023 20:12:43 GMT"/>
						<outline text="if (newNodeArray !== undefined) {" created="Wed, 11 Oct 2023 20:18:48 GMT">
							<outline text="newNodeArray.forEach (function (item) {" created="Wed, 11 Oct 2023 20:13:01 GMT">
								<outline text="if (item.category !== undefined) { //12/14/23 by DW" created="Thu, 14 Dec 2023 16:37:41 GMT">
									<outline text="cats [item.xmlUrl] = &quot;,&quot; + item.category + &quot;,&quot;;" created="Wed, 11 Oct 2023 20:13:24 GMT"/>
									<outline text="}" created="Thu, 14 Dec 2023 16:37:52 GMT"/>
									</outline>
								<outline text="});" created="Wed, 11 Oct 2023 20:13:12 GMT"/>
								</outline>
							<outline text="}" created="Wed, 11 Oct 2023 20:18:53 GMT"/>
							</outline>
						<outline text="" created="Thu, 14 Dec 2023 16:40:43 GMT"/>
						<outline text="var queue = new Array ();" created="Mon, 09 Oct 2023 17:08:35 GMT"/>
						<outline text="urls.forEach (function (url) {" created="Mon, 09 Oct 2023 17:08:57 GMT">
							<outline text="users.forEach (function (user) {" created="Mon, 09 Oct 2023 17:09:18 GMT">
								<outline text="queue.push ({url, user, fl: flSubscribe});" created="Mon, 09 Oct 2023 17:09:33 GMT"/>
								<outline text="});" created="Mon, 09 Oct 2023 17:09:28 GMT"/>
								</outline>
							<outline text="});" created="Mon, 09 Oct 2023 17:09:08 GMT"/>
							</outline>
						<outline text="console.log (&quot;batchSubscribe: queue == &quot; + utils.jsonStringify (queue));" isComment="true" created="Mon, 09 Oct 2023 17:10:19 GMT"/>
						<outline text="" created="Tue, 10 Oct 2023 15:52:47 GMT"/>
						<outline text="function getSub (screenname, feedUrl, callback) { //10/10/23 by DW" created="Tue, 10 Oct 2023 15:57:24 GMT">
							<outline text="const sqltext = &quot;select * from subscriptions where listname = &quot; + davesql.encode (screenname) + &quot; and feedUrl = &quot; + davesql.encode (feedUrl) + &quot; and urlReadingList = &quot; + davesql.encode (urlReadingList) + &quot;;&quot;;" created="Tue, 10 Oct 2023 15:57:41 GMT"/>
							<outline text="davesql.runSqltext (sqltext, function (err, result) {">
								<outline text="if (err) {">
									<outline text="callback (err);"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="if (result.length == 0) {" created="Mon, 09 Oct 2023 16:01:28 GMT">
										<outline text="callback (undefined, undefined);" created="Mon, 09 Oct 2023 16:02:27 GMT"/>
										<outline text="}" created="Mon, 09 Oct 2023 16:02:37 GMT"/>
										</outline>
									<outline text="else {" created="Mon, 09 Oct 2023 16:02:39 GMT">
										<outline text="callback (undefined, result [0]);" created="Mon, 09 Oct 2023 16:02:27 GMT"/>
										<outline text="}" created="Mon, 09 Oct 2023 16:02:42 GMT"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}" created="Tue, 10 Oct 2023 15:57:36 GMT"/>
							</outline>
						<outline text="function addSub (screenname, feedUrl, callback) { //10/10/23 by DW" created="Tue, 10 Oct 2023 15:52:47 GMT">
							<outline text="Changes" isComment="true" created="Tue, 10 Oct 2023 15:53:19 GMT">
								<outline text="10/10/23; 11:53:22 AM by DW" created="Tue, 10 Oct 2023 15:53:21 GMT">
									<outline text="A special subscription routine for subs that come from a reading list. " created="Tue, 10 Oct 2023 15:53:23 GMT"/>
									</outline>
								</outline>
							<outline text="getSub (screenname, feedUrl, function (err, subRec) {" created="Tue, 10 Oct 2023 16:02:51 GMT">
								<outline text="if (err) {" created="Tue, 10 Oct 2023 16:03:51 GMT">
									<outline text="callback (err);" created="Tue, 10 Oct 2023 16:03:54 GMT"/>
									<outline text="}" created="Tue, 10 Oct 2023 16:03:57 GMT"/>
									</outline>
								<outline text="else {" created="Tue, 10 Oct 2023 16:03:57 GMT">
									<outline text="if (subRec === undefined) { //the sub isn't there, create it" created="Tue, 10 Oct 2023 16:04:20 GMT">
										<outline text="const subRec = {" created="Sat, 07 Jan 2023 15:53:16 GMT">
											<outline text="listName: screenname, " created="Sat, 07 Jan 2023 15:53:44 GMT"/>
											<outline text="feedUrl," created="Tue, 10 Oct 2023 16:07:25 GMT"/>
											<outline text="categories: cats [feedUrl]," created="Wed, 11 Oct 2023 20:14:16 GMT"/>
											<outline text="whenUpdated: new Date ()," created="Tue, 10 Oct 2023 16:07:28 GMT"/>
											<outline text="urlReadingList" created="Tue, 10 Oct 2023 16:07:56 GMT"/>
											<outline text="};" created="Sat, 07 Jan 2023 15:53:20 GMT"/>
											</outline>
										<outline text="const sqltext = &quot;insert into subscriptions &quot; + davesql.encodeValues (subRec);" created="Sat, 07 Jan 2023 15:52:17 GMT"/>
										<outline text="davesql.runSqltext (sqltext, function (err, result) {">
											<outline text="if (err) {" created="Fri, 18 Mar 2022 15:46:18 GMT">
												<outline text="callback (err);" created="Fri, 18 Mar 2022 15:46:22 GMT"/>
												<outline text="}" created="Fri, 18 Mar 2022 15:46:25 GMT"/>
												</outline>
											<outline text="else {" created="Fri, 18 Mar 2022 15:46:27 GMT">
												<outline text="myConsoleLog (&quot;batchSubscribe: added subscription, subRec == &quot; + utils.jsonStringify (subRec));" created="Tue, 10 Oct 2023 17:19:20 GMT"/>
												<outline text="callback (undefined, subRec);" created="Fri, 18 Mar 2022 15:46:28 GMT"/>
												<outline text="}" created="Fri, 18 Mar 2022 15:46:34 GMT"/>
												</outline>
											<outline text="});"/>
											</outline>
										<outline text="}" created="Tue, 10 Oct 2023 16:04:41 GMT"/>
										</outline>
									<outline text="else {" created="Tue, 10 Oct 2023 16:10:24 GMT">
										<outline text="callback (undefined, subRec);" created="Fri, 18 Mar 2022 15:46:28 GMT"/>
										<outline text="}" created="Tue, 10 Oct 2023 16:10:26 GMT"/>
										</outline>
									<outline text="}" created="Tue, 10 Oct 2023 16:03:59 GMT"/>
									</outline>
								<outline text="});" created="Tue, 10 Oct 2023 16:03:37 GMT"/>
								</outline>
							<outline text="checkFeedAndItems (feedUrl, function (err, theFeed, feedRec) {" isComment="true" created="Sat, 19 Mar 2022 16:38:28 GMT">
								<outline text="if (err) {" created="Sat, 19 Mar 2022 20:52:14 GMT">
									<outline text="callback (err);" created="Sat, 19 Mar 2022 20:52:36 GMT"/>
									<outline text="}" created="Sat, 19 Mar 2022 20:52:29 GMT"/>
									</outline>
								<outline text="else {" created="Sat, 19 Mar 2022 20:52:42 GMT">
									<outline text="getSub (screenname, feedUrl, function (err, subRec) {" created="Tue, 10 Oct 2023 16:02:51 GMT">
										<outline text="if (err) {" created="Tue, 10 Oct 2023 16:03:51 GMT">
											<outline text="callback (err);" created="Tue, 10 Oct 2023 16:03:54 GMT"/>
											<outline text="}" created="Tue, 10 Oct 2023 16:03:57 GMT"/>
											</outline>
										<outline text="else {" created="Tue, 10 Oct 2023 16:03:57 GMT">
											<outline text="if (subRec === undefined) { //the sub isn't there, create it" created="Tue, 10 Oct 2023 16:04:20 GMT">
												<outline text="const subRec = {" created="Sat, 07 Jan 2023 15:53:16 GMT">
													<outline text="listName: screenname, " created="Sat, 07 Jan 2023 15:53:44 GMT"/>
													<outline text="feedUrl," created="Tue, 10 Oct 2023 16:07:25 GMT"/>
													<outline text="whenUpdated: new Date ()," created="Tue, 10 Oct 2023 16:07:28 GMT"/>
													<outline text="urlReadingList" created="Tue, 10 Oct 2023 16:07:56 GMT"/>
													<outline text="};" created="Sat, 07 Jan 2023 15:53:20 GMT"/>
													</outline>
												<outline text="const sqltext = &quot;insert into subscriptions &quot; + davesql.encodeValues (subRec);" created="Sat, 07 Jan 2023 15:52:17 GMT"/>
												<outline text="davesql.runSqltext (sqltext, function (err, result) {">
													<outline text="if (err) {" created="Fri, 18 Mar 2022 15:46:18 GMT">
														<outline text="callback (err);" created="Fri, 18 Mar 2022 15:46:22 GMT"/>
														<outline text="}" created="Fri, 18 Mar 2022 15:46:25 GMT"/>
														</outline>
													<outline text="else {" created="Fri, 18 Mar 2022 15:46:27 GMT">
														<outline text="console.log (&quot;batchSubscribe: added subscription, screenname == &quot; + screenname + &quot;, feedUrl == &quot; + feedUrl + &quot;, urlReadingList == &quot; + urlReadingList);" created="Tue, 10 Oct 2023 17:19:20 GMT"/>
														<outline text="callback (undefined, subRec);" created="Fri, 18 Mar 2022 15:46:28 GMT"/>
														<outline text="}" created="Fri, 18 Mar 2022 15:46:34 GMT"/>
														</outline>
													<outline text="});"/>
													</outline>
												<outline text="}" created="Tue, 10 Oct 2023 16:04:41 GMT"/>
												</outline>
											<outline text="else {" created="Tue, 10 Oct 2023 16:10:24 GMT">
												<outline text="callback (undefined, subRec);" created="Fri, 18 Mar 2022 15:46:28 GMT"/>
												<outline text="}" created="Tue, 10 Oct 2023 16:10:26 GMT"/>
												</outline>
											<outline text="}" created="Tue, 10 Oct 2023 16:03:59 GMT"/>
											</outline>
										<outline text="});" created="Tue, 10 Oct 2023 16:03:37 GMT"/>
										</outline>
									<outline text="}" created="Sat, 19 Mar 2022 20:52:43 GMT"/>
									</outline>
								<outline text="});" created="Sat, 19 Mar 2022 16:38:53 GMT"/>
								</outline>
							<outline text="}" created="Tue, 10 Oct 2023 15:53:16 GMT"/>
							</outline>
						<outline text="function deleteSub (screenname, feedUrl, callback) { //10/10/23 by DW" created="Tue, 10 Oct 2023 16:11:01 GMT">
							<outline text="Changes" isComment="true" created="Tue, 10 Oct 2023 15:53:19 GMT">
								<outline text="10/10/23; 12:11:47 PM by DW" created="Tue, 10 Oct 2023 15:53:21 GMT">
									<outline text="A special unsub routine for subs that come from a reading list. " created="Tue, 10 Oct 2023 15:53:23 GMT"/>
									<outline text="It must have the urlReadingList value. The user can have a normal subscription and that's unaffected by reading list operations." created="Tue, 10 Oct 2023 16:12:06 GMT"/>
									</outline>
								</outline>
							<outline text="getSub (screenname, feedUrl, function (err, subRec) {" created="Tue, 10 Oct 2023 16:02:51 GMT">
								<outline text="if (err) {" created="Tue, 10 Oct 2023 16:03:51 GMT">
									<outline text="callback (err);" created="Tue, 10 Oct 2023 16:03:54 GMT"/>
									<outline text="}" created="Tue, 10 Oct 2023 16:03:57 GMT"/>
									</outline>
								<outline text="else {" created="Tue, 10 Oct 2023 16:03:57 GMT">
									<outline text="if (subRec === undefined) { //the sub isn't there, nothing to do" created="Tue, 10 Oct 2023 16:04:20 GMT">
										<outline text="callback (undefined, undefined);" created="Fri, 18 Mar 2022 15:46:28 GMT"/>
										<outline text="}" created="Tue, 10 Oct 2023 16:04:41 GMT"/>
										</outline>
									<outline text="else {" created="Tue, 10 Oct 2023 16:10:24 GMT">
										<outline text="const sqltext = &quot;delete from subscriptions where listname = &quot; + davesql.encode (screenname) + &quot; and feedUrl = &quot; + davesql.encode (feedUrl) + &quot; and urlReadingList = &quot; + davesql.encode (urlReadingList) + &quot;;&quot;;" created="Sat, 07 Jan 2023 15:52:17 GMT"/>
										<outline text="davesql.runSqltext (sqltext, function (err, result) {">
											<outline text="if (err) {" created="Fri, 18 Mar 2022 15:46:18 GMT">
												<outline text="callback (err);" created="Fri, 18 Mar 2022 15:46:22 GMT"/>
												<outline text="}" created="Fri, 18 Mar 2022 15:46:25 GMT"/>
												</outline>
											<outline text="else {" created="Fri, 18 Mar 2022 15:46:27 GMT">
												<outline text="myConsoleLog (&quot;batchSubscribe: deleted subscription, screenname == &quot; + screenname + &quot;, feedUrl == &quot; + feedUrl + &quot;, urlReadingList == &quot; + urlReadingList);" created="Tue, 10 Oct 2023 17:19:20 GMT"/>
												<outline text="callback (undefined, result [0]);" created="Fri, 18 Mar 2022 15:46:28 GMT"/>
												<outline text="}" created="Fri, 18 Mar 2022 15:46:34 GMT"/>
												</outline>
											<outline text="});"/>
											</outline>
										<outline text="}" created="Tue, 10 Oct 2023 16:10:26 GMT"/>
										</outline>
									<outline text="}" created="Tue, 10 Oct 2023 16:03:59 GMT"/>
									</outline>
								<outline text="});" created="Tue, 10 Oct 2023 16:03:37 GMT"/>
								</outline>
							<outline text="}" created="Tue, 10 Oct 2023 16:11:23 GMT"/>
							</outline>
						<outline text="" created="Tue, 10 Oct 2023 15:52:48 GMT"/>
						<outline text="function doNextSub (ix) {" created="Mon, 09 Oct 2023 17:19:58 GMT">
							<outline text="if (ix &lt; queue.length) {" created="Mon, 09 Oct 2023 17:20:34 GMT">
								<outline text="const task = queue [ix];" created="Mon, 09 Oct 2023 17:22:16 GMT"/>
								<outline text="if (task.fl) {" created="Mon, 09 Oct 2023 17:22:33 GMT">
									<outline text="addSub (task.user, task.url, function (err) {" created="Mon, 09 Oct 2023 17:22:55 GMT">
										<outline text="doNextSub (ix + 1);" created="Mon, 09 Oct 2023 17:24:57 GMT"/>
										<outline text="});" created="Mon, 09 Oct 2023 17:24:36 GMT"/>
										</outline>
									<outline text="}" created="Mon, 09 Oct 2023 17:22:48 GMT"/>
									</outline>
								<outline text="else {" created="Mon, 09 Oct 2023 17:22:50 GMT">
									<outline text="deleteSub (task.user, task.url, function (err) {" created="Mon, 09 Oct 2023 17:22:59 GMT">
										<outline text="doNextSub (ix + 1);" created="Mon, 09 Oct 2023 17:24:57 GMT"/>
										<outline text="});" created="Mon, 09 Oct 2023 17:24:36 GMT"/>
										</outline>
									<outline text="}" created="Mon, 09 Oct 2023 17:22:52 GMT"/>
									</outline>
								<outline text="}" created="Mon, 09 Oct 2023 17:21:06 GMT"/>
								</outline>
							<outline text="else {" created="Mon, 09 Oct 2023 17:20:34 GMT">
								<outline text="callback ();" created="Mon, 09 Oct 2023 17:22:03 GMT"/>
								<outline text="}" created="Mon, 09 Oct 2023 17:22:06 GMT"/>
								</outline>
							<outline text="}" created="Mon, 09 Oct 2023 17:20:27 GMT"/>
							</outline>
						<outline text="doNextSub (0);" created="Mon, 09 Oct 2023 17:19:58 GMT"/>
						<outline text="}" created="Mon, 09 Oct 2023 17:08:23 GMT"/>
						</outline>
					<outline text="function getReadingListSubscriptions (screenname, callback) { //10/13/23 by DW" created="Fri, 13 Oct 2023 13:29:34 GMT">
						<outline text="const sqltext = &quot;select s.opmlUrl, s.whenCreated, r.title, r.description, r.ctChecks, r.whenChecked, r.whoFirstSubscribed, r.feedUrls from readinglistsubscriptions as s, readinglists as r where s.opmlUrl = r.opmlUrl and s.screenname = &quot; + davesql.encode (screenname) + &quot;;&quot;;" created="Fri, 13 Oct 2023 13:40:49 GMT"/>
						<outline text="davesql.runSqltext (sqltext, function (err, result) {">
							<outline text="if (err) {">
								<outline text="callback (err);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="result = removeNullValues (result);" created="Mon, 23 Oct 2023 15:17:09 GMT"/>
								<outline text="result = parseFeedUrls (result);" created="Mon, 23 Oct 2023 15:17:22 GMT"/>
								<outline text="callback (undefined, result);" created="Fri, 13 Oct 2023 13:32:29 GMT"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}" created="Fri, 13 Oct 2023 13:29:57 GMT"/>
						</outline>
					<outline text="function getReadingListsInfo (jsontext, callback) { //10/19/23 by DW" created="Thu, 19 Oct 2023 15:50:40 GMT">
						<outline text="Changes" isComment="true" created="Thu, 19 Oct 2023 15:52:22 GMT">
							<outline text="10/23/23; 10:48:05 AM by DW" created="Mon, 23 Oct 2023 14:48:05 GMT">
								<outline text="Before returning, parse the feedUrls jsontext. " created="Mon, 23 Oct 2023 14:48:06 GMT"/>
								</outline>
							<outline text="10/19/23; 11:52:24 AM by DW" created="Thu, 19 Oct 2023 15:52:23 GMT">
								<outline text="jsontext is an array of urls of reading lists. we return information about each of those lists." created="Thu, 19 Oct 2023 15:52:25 GMT"/>
								</outline>
							</outline>
						<outline text="var theList, flerror = false;" created="Thu, 19 Oct 2023 15:51:23 GMT"/>
						<outline text="try {" created="Thu, 19 Oct 2023 15:51:23 GMT">
							<outline text="theList = JSON.parse (jsontext);" created="Thu, 19 Oct 2023 15:51:43 GMT"/>
							<outline text="}" created="Thu, 19 Oct 2023 15:51:27 GMT"/>
							</outline>
						<outline text="catch (err) {" created="Thu, 19 Oct 2023 15:51:28 GMT">
							<outline text="callback (err);" created="Thu, 19 Oct 2023 15:51:34 GMT"/>
							<outline text="flerror = true;" created="Thu, 19 Oct 2023 15:51:37 GMT"/>
							<outline text="}" created="Thu, 19 Oct 2023 15:51:32 GMT"/>
							</outline>
						<outline text="if (!flerror) {" created="Thu, 19 Oct 2023 16:03:43 GMT">
							<outline text="function getWhereClause () {" created="Thu, 19 Oct 2023 15:54:15 GMT">
								<outline text="var listtext = &quot;&quot;;" created="Wed, 03 Aug 2022 13:34:04 GMT"/>
								<outline text="theList.forEach (function (url) {" created="Wed, 03 Aug 2022 13:33:35 GMT">
									<outline text="if (listtext.length &gt; 0) {" created="Thu, 19 Oct 2023 16:00:24 GMT">
										<outline text="listtext += &quot;,&quot;;" created="Thu, 19 Oct 2023 16:00:37 GMT"/>
										<outline text="}" created="Thu, 19 Oct 2023 16:00:30 GMT"/>
										</outline>
									<outline text="listtext += davesql.encode (url);" created="Wed, 03 Aug 2022 13:34:25 GMT"/>
									<outline text="});" created="Wed, 03 Aug 2022 13:33:47 GMT"/>
									</outline>
								<outline text="return (&quot;opmlUrl in (&quot; + listtext + &quot;)&quot;);" created="Sat, 23 Apr 2022 13:55:06 GMT"/>
								<outline text="}" created="Thu, 19 Oct 2023 15:54:22 GMT"/>
								</outline>
							<outline text="const sqltext = &quot;select * from readinglists where &quot; + getWhereClause () + &quot;;&quot;;" created="Thu, 19 Oct 2023 16:03:44 GMT"/>
							<outline text="davesql.runSqltext (sqltext, function (err, result) {">
								<outline text="if (err) {">
									<outline text="callback (err);"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="result = removeNullValues (result);" created="Mon, 23 Oct 2023 15:17:09 GMT"/>
									<outline text="result = parseFeedUrls (result);" created="Mon, 23 Oct 2023 15:17:22 GMT"/>
									<outline text="callback (undefined, result);" created="Fri, 13 Oct 2023 13:32:29 GMT"/>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}" created="Thu, 19 Oct 2023 16:06:47 GMT"/>
							</outline>
						<outline text="}" created="Thu, 19 Oct 2023 15:51:08 GMT"/>
						</outline>
					<outline text="function deleteFeedSubscriptionsFromReadingList (screenname, opmlUrl, callback) { //10/13/23 by DW" created="Fri, 13 Oct 2023 14:22:07 GMT">
						<outline text="const sqltext = &quot;delete from subscriptions where listname = &quot; + davesql.encode (screenname) + &quot; and urlReadingList = &quot; + davesql.encode (opmlUrl) + &quot;;&quot;;" created="Sat, 07 Jan 2023 15:52:17 GMT"/>
						<outline text="davesql.runSqltext (sqltext, function (err, result) {">
							<outline text="if (err) {" created="Fri, 18 Mar 2022 15:46:18 GMT">
								<outline text="callback (err);" created="Fri, 18 Mar 2022 15:46:22 GMT"/>
								<outline text="}" created="Fri, 18 Mar 2022 15:46:25 GMT"/>
								</outline>
							<outline text="else {" created="Fri, 18 Mar 2022 15:46:27 GMT">
								<outline text="callback (undefined, result);" created="Fri, 18 Mar 2022 15:46:28 GMT"/>
								<outline text="}" created="Fri, 18 Mar 2022 15:46:34 GMT"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}" created="Fri, 13 Oct 2023 14:22:33 GMT"/>
						</outline>
					<outline text="function deleteReadingListSubscription (screenname, opmlUrl, callback) { //10/13/23 by DW" created="Fri, 13 Oct 2023 14:12:14 GMT">
						<outline text="const sqltext = &quot;delete from readinglistsubscriptions where screenname = &quot; + davesql.encode (screenname) + &quot; and opmlUrl = &quot; + davesql.encode (opmlUrl) + &quot;;&quot;;" created="Sat, 07 Jan 2023 15:52:17 GMT"/>
						<outline text="davesql.runSqltext (sqltext, function (err, result) {">
							<outline text="if (err) {" created="Fri, 18 Mar 2022 15:46:18 GMT">
								<outline text="callback (err);" created="Fri, 18 Mar 2022 15:46:22 GMT"/>
								<outline text="}" created="Fri, 18 Mar 2022 15:46:25 GMT"/>
								</outline>
							<outline text="else {" created="Fri, 18 Mar 2022 15:46:27 GMT">
								<outline text="deleteFeedSubscriptionsFromReadingList (screenname, opmlUrl, function (err, result) {" created="Fri, 13 Oct 2023 14:23:46 GMT">
									<outline text="if (err) {" created="Fri, 13 Oct 2023 14:25:28 GMT">
										<outline text="callback (err);" created="Fri, 18 Mar 2022 15:46:22 GMT"/>
										<outline text="}" created="Fri, 13 Oct 2023 14:25:31 GMT"/>
										</outline>
									<outline text="else {" created="Fri, 13 Oct 2023 14:25:31 GMT">
										<outline text="callback (undefined, result);" created="Fri, 18 Mar 2022 15:46:28 GMT"/>
										<outline text="}" created="Fri, 13 Oct 2023 14:25:33 GMT"/>
										</outline>
									<outline text="});" created="Fri, 13 Oct 2023 14:23:59 GMT"/>
									</outline>
								<outline text="}" created="Fri, 18 Mar 2022 15:46:34 GMT"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}" created="Fri, 13 Oct 2023 14:12:27 GMT"/>
						</outline>
					<outline text="function getReadingListFollowers (opmlUrl, callback) { //10/28/23 by DW">
						<outline text="const sqltext = &quot;select * from readinglistsubscriptions where opmlUrl=&quot; + davesql.encode (opmlUrl) + &quot;;&quot;;"/>
						<outline text="davesql.runSqltext (sqltext, function (err, result) {">
							<outline text="if (err) {">
								<outline text="callback (err);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="callback (undefined, result);"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function checkReadingList (opmlUrl, callback) { //10/8/23 by DW" created="Sun, 08 Oct 2023 13:14:26 GMT">
						<outline text="Changes" isComment="true" created="Thu, 27 Jun 2024 13:09:24 GMT">
							<outline text="6/27/24; 9:15:03 AM by DW" created="Thu, 27 Jun 2024 13:15:03 GMT">
								<outline text="I find on a new server I set up that the check count for reading lists is never being incremented. " created="Thu, 27 Jun 2024 13:15:04 GMT"/>
								</outline>
							<outline text="6/27/24; 9:09:26 AM by DW" created="Thu, 27 Jun 2024 13:09:25 GMT">
								<outline text="How reading lists work">
									<outline text="I'm working out some problems in reading lists, a feature I added late in the development process of FeedLand. I love the feature, but absolutely detest the code. I love it best when I don't have to look at the code. It's complicated. This is how it works."/>
									<outline text="The feature allows the user to subscribe to an OPML subscription list. That means when it's time to check a list this is what we do. ">
										<outline text="Read the list, compile an array of feedUrls of the feeds it contains, and then compare it to the stored list of feeds for that list. "/>
										<outline text="We subscribe each user that's subscribed to the list from the feeds that were removed from the list, and unsub each user from the feeds that are no longer in the list. "/>
										</outline>
									<outline text="Each subscription for each user is identified as being from the list, using the url of the reading list. The user could be subscribed to a feed many times, once for each list, and once perhaps on their own. If the user unsubs from the list, only the subscription from the list is removed. "/>
									</outline>
								</outline>
							</outline>
						<outline text="myConsoleLog (&quot;checkReadingList: opmlUrl == &quot; + opmlUrl + &quot;, hello&quot;);" created="Tue, 10 Oct 2023 22:02:13 GMT"/>
						<outline text="function addFeedsIfNecessary (urlsToCheck, callback) {" created="Wed, 11 Oct 2023 19:38:45 GMT">
							<outline text="Changes" isComment="true" created="Wed, 11 Oct 2023 19:45:22 GMT">
								<outline text="6/27/24; 9:17:02 AM by DW" created="Thu, 27 Jun 2024 13:17:02 GMT">
									<outline text="This is a slow process because it has to read the feed, and also check the items. Why shouldn't this be left to the normal feed-checking process?" created="Thu, 27 Jun 2024 13:17:02 GMT"/>
									<outline text="So I created a new routine, addFeedIfNecessary and call that instead of checkFeedAndItems." created="Thu, 27 Jun 2024 13:24:40 GMT"/>
									</outline>
								<outline text="10/11/23; 10:55:13 AM by DW" created="Wed, 11 Oct 2023 14:55:13 GMT">
									<outline text="Create the feed record for each new feed, if it doesn't exist. Also reads the feed for the first time. " created="Wed, 11 Oct 2023 14:55:13 GMT"/>
									</outline>
								</outline>
							<outline text="function doNextUrl (ix) {" created="Mon, 09 Oct 2023 17:19:58 GMT">
								<outline text="if (ix &lt; urlsToCheck.length) {" created="Mon, 09 Oct 2023 17:20:34 GMT">
									<outline text="myConsoleLog (&quot;addFeedsIfNecessary: urlsToCheck [ix] == &quot; + urlsToCheck [ix]);" created="Tue, 10 Oct 2023 22:02:13 GMT"/>
									<outline text="addFeedIfNecessary (urlsToCheck [ix], function (err) { //6/28/24 by DW" created="Thu, 27 Jun 2024 13:31:27 GMT">
										<outline text="doNextUrl (ix + 1);" created="Mon, 09 Oct 2023 17:24:57 GMT"/>
										<outline text="});" created="Thu, 27 Jun 2024 13:31:37 GMT"/>
										</outline>
									<outline text="checkFeedAndItems (urlsToCheck [ix], function (err) {" isComment="true" created="Wed, 11 Oct 2023 19:40:05 GMT">
										<outline text="doNextUrl (ix + 1);" created="Mon, 09 Oct 2023 17:24:57 GMT"/>
										<outline text="});" created="Wed, 11 Oct 2023 19:40:20 GMT"/>
										</outline>
									<outline text="}" created="Mon, 09 Oct 2023 17:21:06 GMT"/>
									</outline>
								<outline text="else {" created="Mon, 09 Oct 2023 17:20:34 GMT">
									<outline text="callback ();" created="Mon, 09 Oct 2023 17:22:03 GMT"/>
									<outline text="}" created="Mon, 09 Oct 2023 17:22:06 GMT"/>
									</outline>
								<outline text="}" created="Mon, 09 Oct 2023 17:20:27 GMT"/>
								</outline>
							<outline text="doNextUrl (0);" created="Mon, 09 Oct 2023 17:19:58 GMT"/>
							<outline text="}" created="Wed, 11 Oct 2023 19:39:14 GMT"/>
							</outline>
						<outline text="function getTwoArrays (callback) {" created="Mon, 09 Oct 2023 16:09:10 GMT">
							<outline text="getReadingList (opmlUrl, function (err, listRec) {" created="Sun, 08 Oct 2023 14:08:22 GMT">
								<outline text="if (err) {" created="Sun, 08 Oct 2023 14:38:39 GMT">
									<outline text="callback (err);" created="Sun, 08 Oct 2023 14:38:41 GMT"/>
									<outline text="}" created="Sun, 08 Oct 2023 14:38:44 GMT"/>
									</outline>
								<outline text="else {" created="Sun, 08 Oct 2023 14:38:45 GMT">
									<outline text="getNodeArrayFromOpml (opmlUrl, function (err, newNodeArray, theOutline) {" created="Thu, 01 Jun 2023 18:14:16 GMT">
										<outline text="if (err) {" created="Thu, 01 Jun 2023 18:14:37 GMT">
											<outline text="callback (err);" created="Thu, 01 Jun 2023 18:14:46 GMT"/>
											<outline text="}" created="Thu, 01 Jun 2023 18:14:41 GMT"/>
											</outline>
										<outline text="else {" created="Thu, 01 Jun 2023 18:14:41 GMT">
											<outline text="callback (err, listRec.feedUrls, newNodeArray);" created="Sun, 08 Oct 2023 14:46:54 GMT"/>
											<outline text="}" created="Thu, 01 Jun 2023 18:14:43 GMT"/>
											</outline>
										<outline text="});" created="Thu, 01 Jun 2023 18:14:32 GMT"/>
										</outline>
									<outline text="}" created="Sun, 08 Oct 2023 14:38:46 GMT"/>
									</outline>
								<outline text="});" created="Sun, 08 Oct 2023 14:38:35 GMT"/>
								</outline>
							<outline text="}" created="Mon, 09 Oct 2023 16:09:23 GMT"/>
							</outline>
						<outline text="getTwoArrays (function (err, oldlist, newNodeArray) {" created="Mon, 09 Oct 2023 16:09:11 GMT">
							<outline text="if (err) {" created="Mon, 09 Oct 2023 16:10:56 GMT">
								<outline text="myConsoleLog (&quot;checkReadingList: err.message == &quot; + err.message);" created="Tue, 10 Oct 2023 22:02:13 GMT"/>
								<outline text="callback (err);" created="Mon, 09 Oct 2023 16:10:58 GMT"/>
								<outline text="}" created="Mon, 09 Oct 2023 16:11:02 GMT"/>
								</outline>
							<outline text="else {" created="Mon, 09 Oct 2023 16:11:02 GMT">
								<outline text="myConsoleLog (&quot;checkReadingList: oldlist.length == &quot; + oldlist.length + &quot;, newNodeArray == &quot; + newNodeArray.length);" isComment="true" created="Tue, 10 Oct 2023 22:02:13 GMT"/>
								<outline text="" isComment="true" created="Thu, 27 Jun 2024 13:43:27 GMT"/>
								<outline text="var newlist = new Array ();" created="Wed, 11 Oct 2023 20:06:06 GMT"/>
								<outline text="newNodeArray.forEach (function (item) {" created="Wed, 11 Oct 2023 20:06:16 GMT">
									<outline text="newlist.push (item.xmlUrl);" created="Wed, 11 Oct 2023 20:06:30 GMT"/>
									<outline text="});" created="Wed, 11 Oct 2023 20:06:25 GMT"/>
									</outline>
								<outline text="" created="Wed, 11 Oct 2023 20:06:07 GMT"/>
								<outline text="console.log (&quot;oldlist == &quot; + utils.jsonStringify (oldlist));" isComment="true" created="Mon, 09 Oct 2023 16:17:57 GMT"/>
								<outline text="console.log (&quot;newlist == &quot; + utils.jsonStringify (newlist));" isComment="true" created="Mon, 09 Oct 2023 16:17:57 GMT"/>
								<outline text="" isComment="true" created="Mon, 09 Oct 2023 16:37:45 GMT"/>
								<outline text="function isUrlInArray (url, theArray) {" created="Mon, 09 Oct 2023 16:37:45 GMT">
									<outline text="var flfound = false;" created="Mon, 09 Oct 2023 16:39:14 GMT"/>
									<outline text="theArray.forEach (function (item) {" created="Mon, 09 Oct 2023 16:38:21 GMT">
										<outline text="if (item == url) {" created="Mon, 09 Oct 2023 16:38:50 GMT">
											<outline text="flfound = true;" created="Mon, 09 Oct 2023 16:38:56 GMT"/>
											<outline text="}" created="Mon, 09 Oct 2023 16:39:03 GMT"/>
											</outline>
										<outline text="});" created="Mon, 09 Oct 2023 16:38:42 GMT"/>
										</outline>
									<outline text="return (flfound);" created="Mon, 09 Oct 2023 16:39:21 GMT"/>
									<outline text="}" created="Mon, 09 Oct 2023 16:38:12 GMT"/>
									</outline>
								<outline text="" created="Mon, 09 Oct 2023 16:41:23 GMT"/>
								<outline text="var urlsToRemove = [];" created="Mon, 09 Oct 2023 16:37:45 GMT"/>
								<outline text="oldlist.forEach (function (item) {" created="Mon, 09 Oct 2023 16:37:45 GMT">
									<outline text="if (!isUrlInArray (item, newlist)) {" created="Mon, 09 Oct 2023 16:40:17 GMT">
										<outline text="urlsToRemove.push (item);" created="Mon, 09 Oct 2023 16:40:36 GMT"/>
										<outline text="}" created="Mon, 09 Oct 2023 16:40:32 GMT"/>
										</outline>
									<outline text="});" created="Mon, 09 Oct 2023 16:40:06 GMT"/>
									</outline>
								<outline text="" created="Mon, 09 Oct 2023 16:43:03 GMT"/>
								<outline text="var urlsToAdd = [];" created="Mon, 09 Oct 2023 16:37:45 GMT"/>
								<outline text="newlist.forEach (function (item) {" created="Mon, 09 Oct 2023 16:37:45 GMT">
									<outline text="if (!isUrlInArray (item, oldlist)) {" created="Mon, 09 Oct 2023 16:40:17 GMT">
										<outline text="urlsToAdd.push (item);" created="Mon, 09 Oct 2023 16:40:36 GMT"/>
										<outline text="}" created="Mon, 09 Oct 2023 16:40:32 GMT"/>
										</outline>
									<outline text="});" created="Mon, 09 Oct 2023 16:40:06 GMT"/>
									</outline>
								<outline text="" created="Tue, 10 Oct 2023 17:21:23 GMT"/>
								<outline text="if (urlsToAdd.length &gt; 0) {" created="Wed, 11 Oct 2023 12:19:55 GMT">
									<outline text="myConsoleLog (&quot;checkReadingList: urlsToAdd == &quot; + utils.jsonStringify (urlsToAdd));" created="Mon, 09 Oct 2023 16:17:57 GMT"/>
									<outline text="}" created="Wed, 11 Oct 2023 12:20:00 GMT"/>
									</outline>
								<outline text="if (urlsToRemove.length &gt; 0) {" created="Wed, 11 Oct 2023 12:20:08 GMT">
									<outline text="myConsoleLog (&quot;checkReadingList: urlsToRemove == &quot; + utils.jsonStringify (urlsToRemove));" created="Mon, 09 Oct 2023 16:17:57 GMT"/>
									<outline text="}" created="Wed, 11 Oct 2023 12:20:17 GMT"/>
									</outline>
								<outline text="" created="Mon, 09 Oct 2023 16:52:45 GMT"/>
								<outline text="getReadingListSubscribers (opmlUrl, function (err, usersList) {" created="Mon, 09 Oct 2023 16:52:45 GMT">
									<outline text="if (err) {" created="Mon, 09 Oct 2023 16:56:17 GMT">
										<outline text="callback (err);" created="Mon, 09 Oct 2023 16:56:19 GMT"/>
										<outline text="}" created="Mon, 09 Oct 2023 16:56:23 GMT"/>
										</outline>
									<outline text="else {" created="Mon, 09 Oct 2023 16:56:23 GMT">
										<outline text="console.log (&quot;usersList == &quot; + utils.jsonStringify (usersList));" isComment="true" created="Mon, 09 Oct 2023 16:56:45 GMT"/>
										<outline text="addFeedsIfNecessary (urlsToAdd, function () {" created="Wed, 11 Oct 2023 19:43:17 GMT">
											<outline text="batchSubscribe (urlsToAdd, usersList, true, opmlUrl, newNodeArray, function (err) {" created="Mon, 09 Oct 2023 17:11:02 GMT">
												<outline text="batchSubscribe (urlsToRemove, usersList, false, opmlUrl, undefined, function (err) {" created="Mon, 09 Oct 2023 17:14:15 GMT">
													<outline text="saveReadingListFeedUrls (opmlUrl, newlist, callback);" created="Mon, 09 Oct 2023 17:27:12 GMT"/>
													<outline text="});" created="Mon, 09 Oct 2023 17:14:17 GMT"/>
													</outline>
												<outline text="});" created="Mon, 09 Oct 2023 17:11:23 GMT"/>
												</outline>
											<outline text="});" created="Wed, 11 Oct 2023 19:43:27 GMT"/>
											</outline>
										<outline text="}" created="Mon, 09 Oct 2023 16:56:40 GMT"/>
										</outline>
									<outline text="});" created="Mon, 09 Oct 2023 16:56:04 GMT"/>
									</outline>
								<outline text="}" created="Mon, 09 Oct 2023 16:11:04 GMT"/>
								</outline>
							<outline text="});" created="Mon, 09 Oct 2023 16:09:40 GMT"/>
							</outline>
						<outline text="}" created="Sun, 08 Oct 2023 13:37:00 GMT"/>
						</outline>
					<outline text="function checkNextReadingListfReady (callback) { //10/10/23 by DW" created="Tue, 10 Oct 2023 21:34:05 GMT">
						<outline text="function updateReadingListMetadata (opmlUrl, callback) {" created="Thu, 12 Oct 2023 14:22:01 GMT">
							<outline text="Changes" isComment="true" created="Thu, 12 Oct 2023 14:22:19 GMT">
								<outline text="10/12/23; 10:22:24 AM by DW" created="Thu, 12 Oct 2023 14:22:23 GMT">
									<outline text="I added the title and description elements to a readinglist record very late in the development of reading lists." created="Thu, 12 Oct 2023 14:22:24 GMT"/>
									<outline text="I could make it that when we check a reading list, we would automatically update the metadata, but the code wasn't built to do that, and it would be risky to do it at this state." created="Thu, 12 Oct 2023 14:22:54 GMT"/>
									<outline text="Instead, a custom routine to do that, and we waste a read of the OPML file and replicate some code. Sorry. " created="Thu, 12 Oct 2023 14:23:36 GMT"/>
									</outline>
								</outline>
							<outline text="getOutlineFromOpml (opmlUrl, function (err, theOutline) {" created="Thu, 12 Oct 2023 13:22:05 GMT">
								<outline text="if (err) {" created="Thu, 12 Oct 2023 14:02:16 GMT">
									<outline text="callback (err);" created="Thu, 12 Oct 2023 14:02:25 GMT"/>
									<outline text="}" created="Thu, 12 Oct 2023 14:02:19 GMT"/>
									</outline>
								<outline text="else {" created="Thu, 12 Oct 2023 14:02:19 GMT">
									<outline text="var title, description;" created="Thu, 12 Oct 2023 14:03:24 GMT"/>
									<outline text="if (theOutline.opml.head !== undefined) {" created="Thu, 12 Oct 2023 14:03:44 GMT">
										<outline text="const title = theOutline.opml.head.title;" created="Thu, 12 Oct 2023 14:04:14 GMT"/>
										<outline text="const description = theOutline.opml.head.description;" created="Thu, 12 Oct 2023 14:04:15 GMT"/>
										<outline text="const sqltext = &quot;update readinglists set title = &quot; + davesql.encode (title) + &quot;, description = &quot; + davesql.encode (description) + &quot; where opmlUrl = &quot; + davesql.encode (opmlUrl); " created="Thu, 12 Oct 2023 14:34:26 GMT"/>
										<outline text="console.log (&quot;updateReadingListMetadata: title == &quot; + title + &quot;, description == &quot; + description + &quot;, opmlUrl == &quot; + opmlUrl);" isComment="true" created="Thu, 12 Oct 2023 14:40:17 GMT"/>
										<outline text="davesql.runSqltext (sqltext, function (err, result) {">
											<outline text="if (err) {" created="Sun, 08 Oct 2023 21:47:44 GMT">
												<outline text="callback (err);" created="Sun, 08 Oct 2023 21:47:54 GMT"/>
												<outline text="}" created="Sun, 08 Oct 2023 21:47:48 GMT"/>
												</outline>
											<outline text="else {" created="Sun, 08 Oct 2023 21:47:49 GMT">
												<outline text="callback ();" created="Sun, 08 Oct 2023 21:48:01 GMT"/>
												<outline text="}" created="Sun, 08 Oct 2023 21:47:51 GMT"/>
												</outline>
											<outline text="});"/>
											</outline>
										<outline text="}" created="Thu, 12 Oct 2023 14:03:53 GMT"/>
										</outline>
									<outline text="}" created="Thu, 12 Oct 2023 14:02:21 GMT"/>
									</outline>
								<outline text="});" created="Thu, 12 Oct 2023 13:22:09 GMT"/>
								</outline>
							<outline text="}" created="Thu, 12 Oct 2023 14:22:17 GMT"/>
							</outline>
						<outline text="function findLeastRecentlyCheckedReadingList (callback) { ">
							<outline text="const sqltext = &quot;select * from readinglists order by whenChecked asc limit 1;&quot;;" created="Tue, 10 Oct 2023 21:37:08 GMT"/>
							<outline text="davesql.runSqltext (sqltext, function (err, result) {">
								<outline text="if (err) {">
									<outline text="callback (err);"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="if (result.length &gt; 0) {">
										<outline text="callback (undefined, result [0]);"/>
										<outline text="}"/>
										</outline>
									<outline text="else {" created="Tue, 10 Oct 2023 21:39:04 GMT">
										<outline text="callback (undefined, undefined);" created="Tue, 10 Oct 2023 21:39:06 GMT"/>
										<outline text="}" created="Tue, 10 Oct 2023 21:39:12 GMT"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="findLeastRecentlyCheckedReadingList (function (err, listRec) {" created="Tue, 10 Oct 2023 21:39:48 GMT">
							<outline text="if (!err) {">
								<outline text="if (listRec !== undefined) {" created="Tue, 10 Oct 2023 21:40:51 GMT">
									<outline text="if (utils.secondsSince (listRec.whenChecked) &gt; config.minSecsBetwIndividualReadingListCheck) {" created="Thu, 07 Jul 2022 15:58:10 GMT">
										<outline text="listRec.whenChecked = new Date (); //8/31/22 by DW" created="Wed, 31 Aug 2022 20:14:28 GMT"/>
										<outline text="saveReadingList (listRec, function (err) {" created="Fri, 01 Apr 2022 14:17:29 GMT">
											<outline text="if (err) {" created="Tue, 10 Oct 2023 21:50:15 GMT">
												<outline text="callback (err);" created="Tue, 10 Oct 2023 21:45:39 GMT"/>
												<outline text="}" created="Tue, 10 Oct 2023 21:50:22 GMT"/>
												</outline>
											<outline text="else {" created="Tue, 10 Oct 2023 21:50:39 GMT">
												<outline text="checkReadingList (listRec.opmlUrl, function (err) {" created="Tue, 22 Mar 2022 15:34:38 GMT">
													<outline text="updateReadingListMetadata (listRec.opmlUrl, function (err) { //10/12/23 by DW" created="Thu, 12 Oct 2023 14:39:23 GMT">
														<outline text="if (callback !== undefined) {" created="Wed, 11 Oct 2023 12:14:42 GMT">
															<outline text="callback (err);" created="Tue, 10 Oct 2023 21:45:39 GMT"/>
															<outline text="}" created="Wed, 11 Oct 2023 12:14:48 GMT"/>
															</outline>
														<outline text="});" created="Thu, 12 Oct 2023 14:39:29 GMT"/>
														</outline>
													<outline text="});" created="Sat, 21 May 2022 16:25:08 GMT"/>
													</outline>
												<outline text="}" created="Tue, 10 Oct 2023 21:50:42 GMT"/>
												</outline>
											<outline text="});" created="Tue, 10 Oct 2023 21:50:11 GMT"/>
											</outline>
										<outline text="}" created="Thu, 07 Jul 2022 15:58:54 GMT"/>
										</outline>
									<outline text="}" created="Tue, 10 Oct 2023 21:40:55 GMT"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});" created="Tue, 10 Oct 2023 21:40:03 GMT"/>
							</outline>
						<outline text="}" created="Tue, 10 Oct 2023 21:34:23 GMT"/>
						</outline>
					<outline text="" created="Tue, 10 Oct 2023 21:34:06 GMT"/>
					<outline text="function testReadingListStuff (callback) {" isComment="true" created="Sun, 08 Oct 2023 14:48:08 GMT">
						<outline text="const opmlUrl = &quot;http://scripting.com/publicfolder/feedland/subscriptionLists/testlist.opml&quot;;" created="Sun, 08 Oct 2023 14:47:21 GMT"/>
						<outline text="console.log (&quot;testReadingListStuff&quot;);" created="Mon, 09 Oct 2023 14:44:49 GMT"/>
						<outline text="checkReadingList (opmlUrl, function (err) {" created="Sun, 08 Oct 2023 14:45:38 GMT">
							<outline text="});" created="Sun, 08 Oct 2023 14:45:51 GMT"/>
							</outline>
						<outline text="subscribeToReadingList (&quot;dave&quot;, opmlUrl, function (err, listRec, subsRec) {" isComment="true" created="Mon, 09 Oct 2023 13:22:08 GMT">
							<outline text="if (err) {" created="Mon, 09 Oct 2023 13:22:44 GMT">
								<outline text="console.log (err.message);" created="Mon, 09 Oct 2023 13:22:48 GMT"/>
								<outline text="}" created="Mon, 09 Oct 2023 13:22:54 GMT"/>
								</outline>
							<outline text="else {" created="Mon, 09 Oct 2023 13:22:55 GMT">
								<outline text="console.log (&quot;listRec == &quot; + utils.jsonStringify (listRec) + &quot;, \nsubsRec == &quot; + utils.jsonStringify (subsRec));" created="Mon, 09 Oct 2023 13:22:59 GMT"/>
								<outline text="}" created="Mon, 09 Oct 2023 13:22:57 GMT"/>
								</outline>
							<outline text="" created="Mon, 09 Oct 2023 14:44:24 GMT"/>
							<outline text="if (callback !== undefined) {" created="Mon, 09 Oct 2023 14:44:24 GMT">
								<outline text="callback ();" created="Mon, 09 Oct 2023 14:44:32 GMT"/>
								<outline text="}" created="Mon, 09 Oct 2023 14:44:35 GMT"/>
								</outline>
							<outline text="" created="Mon, 09 Oct 2023 14:44:24 GMT"/>
							<outline text="" created="Mon, 09 Oct 2023 14:44:24 GMT"/>
							<outline text="});" created="Mon, 09 Oct 2023 13:22:40 GMT"/>
							</outline>
						<outline text="}" created="Sun, 08 Oct 2023 14:48:11 GMT"/>
						</outline>
					</outline>
				<outline text="" created="Sun, 08 Oct 2023 14:48:27 GMT"/>
				<outline text="function start (options, callback) {" created="Sat, 19 Mar 2022 14:51:04 GMT">
					<outline text="function everySecond () {" created="Mon, 10 Oct 2022 14:00:48 GMT">
						<outline text="if (flRiverBuildLogChanged) { //10/10/22 by DW" created="Mon, 10 Oct 2022 14:03:13 GMT">
							<outline text="saveCurrentBuildLog ();" created="Mon, 10 Oct 2022 14:38:42 GMT"/>
							<outline text="flRiverBuildLogChanged = false;" created="Mon, 10 Oct 2022 14:03:19 GMT"/>
							<outline text="}" created="Mon, 10 Oct 2022 14:03:15 GMT"/>
							</outline>
						<outline text="}" created="Mon, 10 Oct 2022 14:00:57 GMT"/>
						</outline>
					<outline text="function everyMinute () {" created="Thu, 15 Sep 2022 14:04:17 GMT">
						<outline text="clearOldCachedRivers (); " created="Thu, 15 Sep 2022 14:05:59 GMT"/>
						<outline text="}" created="Thu, 15 Sep 2022 14:04:24 GMT"/>
						</outline>
					<outline text="" created="Thu, 15 Sep 2022 14:04:18 GMT"/>
					<outline text="initStats ();" created="Mon, 21 Mar 2022 16:29:48 GMT"/>
					<outline text="startBuildLog (); //10/10/22 AM by DW" created="Mon, 10 Oct 2022 15:07:20 GMT"/>
					<outline text="if (options !== undefined) {" created="Sat, 19 Mar 2022 14:51:26 GMT">
						<outline text="for (var x in options) {" created="Sat, 19 Mar 2022 14:51:52 GMT">
							<outline text="config [x] = options [x];" created="Sat, 19 Mar 2022 14:52:06 GMT"/>
							<outline text="}" created="Sat, 19 Mar 2022 14:52:21 GMT"/>
							</outline>
						<outline text="}" created="Sat, 19 Mar 2022 14:51:51 GMT"/>
						</outline>
					<outline text="" created="Wed, 25 Oct 2023 20:45:20 GMT"/>
					<outline text="if (callback !== undefined) {" created="Sat, 19 Mar 2022 14:51:26 GMT">
						<outline text="callback (undefined);" created="Sat, 19 Mar 2022 14:51:32 GMT"/>
						<outline text="}" created="Sat, 19 Mar 2022 14:51:35 GMT"/>
						</outline>
					<outline text="" created="Wed, 25 Oct 2023 20:35:57 GMT"/>
					<outline text="setInterval (everySecond, 1000); //10/10/22 by DW" created="Mon, 10 Oct 2022 14:01:02 GMT"/>
					<outline text="utils.runEveryMinute (everyMinute); //9/15/22 by DW" created="Thu, 15 Sep 2022 14:04:55 GMT"/>
					<outline text="" created="Wed, 25 Oct 2023 20:45:21 GMT"/>
					<outline text="upgradeReadingLists (function () {" isComment="true" created="Wed, 25 Oct 2023 20:45:20 GMT">
						<outline text="});" created="Wed, 25 Oct 2023 20:45:26 GMT"/>
						</outline>
					<outline text="testReadingListStuff (function () { //10/9/23 by DW" isComment="true" created="Sun, 08 Oct 2023 14:47:54 GMT">
						<outline text="testReadingListStuff ();" isComment="true" created="Mon, 09 Oct 2023 14:44:05 GMT"/>
						<outline text="});" created="Mon, 09 Oct 2023 14:44:00 GMT"/>
						</outline>
					<outline text="" created="Sun, 08 Oct 2023 14:45:39 GMT"/>
					<outline text="}" created="Sat, 19 Mar 2022 14:51:13 GMT"/>
					</outline>
				</outline>
			<outline text="readme.md" created="Mon, 27 Jun 2022 14:32:53 GMT">
				<outline text="# FeedLand database" created="Mon, 27 Jun 2022 14:32:56 GMT">
					<outline text="A database for storing feeds for FeedLand aggregators. " created="Mon, 27 Jun 2022 14:33:12 GMT"/>
					</outline>
				<outline text="### What is this?" created="Thu, 19 Jan 2023 15:29:36 GMT">
					<outline text="This is the source code for the NPM package &lt;a href=&quot;https://github.com/scripting/feedland/tree/main/database&quot;&gt;feedlanddatabase&lt;/a&gt;. " created="Thu, 19 Jan 2023 15:29:41 GMT"/>
					</outline>
				<outline text="#### Background" created="Tue, 30 Aug 2022 15:20:01 GMT">
					<outline text="It's part of the feedland server software, required by the feedland package. " created="Sat, 21 Jan 2023 19:36:26 GMT"/>
					<outline text="Licensed under GPL2 as is the feedland package." created="Sat, 21 Jan 2023 19:36:54 GMT"/>
					</outline>
				</outline>
			</outline>
		<outline text="/scripting.com/code/testing/stripmarkup2/" isComment="true" created="Sun, 24 Jul 2022 20:12:05 GMT">
			<outline text="package.json">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;stripmarkup2&quot;,"/>
					<outline text="&quot;description&quot;: &quot;A better way to strip markup from HTML text.&quot;,"/>
					<outline text="&quot;author&quot;: &quot;Dave Winer &lt;dave@scripting.com&gt;&quot;,"/>
					<outline text="&quot;main&quot;: &quot;stripmarkup.js&quot;,"/>
					<outline text="&quot;license&quot;: &quot;MIT&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.4.0&quot;,"/>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;daveutils&quot;: &quot;*&quot;,"/>
						<outline text="&quot;request&quot;: &quot;*&quot;,"/>
						<outline text="&quot;reallysimple&quot;: &quot;*&quot;,"/>
						<outline text="&quot;sanitize-html&quot;: &quot;*&quot;" created="Mon, 08 Mar 2021 15:15:44 GMT"/>
						<outline text="} "/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="template.html" created="Sun, 11 Sep 2022 13:55:08 GMT">
				<outline text="&lt;html&gt; " created="Sun, 11 Sep 2022 13:55:14 GMT">
					<outline text="&lt;head&gt;" created="Sun, 11 Sep 2022 13:55:14 GMT">
						<outline text="&lt;script src=&quot;http://s3.amazonaws.com/scripting.com/code/includes/jquery-1.9.1.min.js&quot;&gt;&lt;/script&gt;"/>
						<outline text="&lt;link href=&quot;http://s3.amazonaws.com/scripting.com/code/includes/bootstrap.css&quot; rel=&quot;stylesheet&quot;&gt;"/>
						<outline text="&lt;script src=&quot;http://s3.amazonaws.com/scripting.com/code/includes/bootstrap.min.js&quot;&gt;&lt;/script&gt;"/>
						<outline text=""/>
						<outline text="&lt;link rel=&quot;stylesheet&quot; href=&quot;http://s3.amazonaws.com/scripting.com/code/fontawesome/css/all.css&quot;&gt;"/>
						<outline text="&lt;link href=&quot;http://fonts.googleapis.com/css?family=Ubuntu:400,500i,700&quot; rel=&quot;stylesheet&quot;&gt;"/>
						<outline text="&lt;link href=&quot;http://fonts.googleapis.com/css?family=Rancho&quot; rel=&quot;stylesheet&quot;&gt;" isComment="true"/>
						<outline text=""/>
						<outline text="&lt;script src=&quot;http://s3.amazonaws.com/scripting.com/code/includes/basic/code.js&quot;&gt;&lt;/script&gt;" created="Thu, 08 May 2014 14:04:18 GMT" pgfnum="41269"/>
						<outline text="&lt;link href=&quot;http://s3.amazonaws.com/scripting.com/code/includes/basic/styles.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;"/>
						<outline text="&lt;style&gt;" created="Sun, 11 Sep 2022 13:56:09 GMT">
							<outline text="body {">
								<outline text="font-family: Ubuntu;"/>
								<outline text="font-size: 18px;"/>
								<outline text="background-color: whitesmoke;"/>
								<outline text="}"/>
								</outline>
							<outline text=".divPageBody {">
								<outline text="width: 600px;"/>
								<outline text="margin-top: 60px;"/>
								<outline text="margin-left: auto;"/>
								<outline text="margin-right: auto;"/>
								<outline text="font-size: 16px;"/>
								<outline text="}"/>
								</outline>
							<outline text=".divPageBody h3 {" created="Sun, 11 Sep 2022 14:07:40 GMT">
								<outline text="font-family: Ubuntu;"/>
								<outline text="font-size: 18px;"/>
								<outline text="line-height: 150%;"/>
								<outline text="}" created="Sun, 11 Sep 2022 14:07:49 GMT"/>
								</outline>
							<outline text=".divPageBody p {" created="Sun, 11 Sep 2022 14:07:40 GMT">
								<outline text="font-family: Ubuntu;"/>
								<outline text="font-size: 16px;"/>
								<outline text="line-height: 140%;"/>
								<outline text="}" created="Sun, 11 Sep 2022 14:07:49 GMT"/>
								</outline>
							<outline text="&lt;/style&gt;" created="Sun, 11 Sep 2022 13:56:14 GMT"/>
							</outline>
						<outline text="&lt;/head&gt;" created="Sun, 11 Sep 2022 13:55:18 GMT"/>
						</outline>
					<outline text="&lt;body&gt;" created="Sun, 11 Sep 2022 13:55:14 GMT">
						<outline text="&lt;div class=&quot;divPageBody&quot;&gt;" created="Sun, 11 Sep 2022 14:05:42 GMT">
							<outline text="[%bodytext%]" created="Sun, 11 Sep 2022 13:55:53 GMT"/>
							<outline text="&lt;/div&gt;" created="Sun, 11 Sep 2022 14:05:47 GMT"/>
							</outline>
						<outline text="&lt;/body&gt;" created="Sun, 11 Sep 2022 13:55:18 GMT"/>
						</outline>
					<outline text="&lt;/html&gt;" created="Sun, 11 Sep 2022 13:55:18 GMT"/>
					</outline>
				</outline>
			<outline text="stripmarkup.js">
				<outline text="const fs = require (&quot;fs&quot;);" created="Sat, 05 Mar 2022 17:19:07 GMT"/>
				<outline text="const utils = require (&quot;daveutils&quot;); "/>
				<outline text="const reallysimple = require (&quot;reallysimple&quot;);" created="Sat, 05 Mar 2022 17:19:07 GMT"/>
				<outline text="const sanitizeHtml = require (&quot;sanitize-html&quot;);" created="Sun, 11 Sep 2022 13:12:17 GMT"/>
				<outline text="" created="Tue, 02 Aug 2022 21:49:53 GMT"/>
				<outline text="const urlFeed = &quot;https://heathercoxrichardson.substack.com/feed&quot;;" created="Tue, 02 Aug 2022 21:49:54 GMT"/>
				<outline text="const urlFeed = &quot;https://www.westsiderag.com/feed&quot;;" isComment="true" created="Tue, 02 Aug 2022 21:49:54 GMT"/>
				<outline text="const urlFeed = &quot;https://thehill.com/news/feed/&quot;;" isComment="true" created="Tue, 02 Aug 2022 21:49:54 GMT"/>
				<outline text="const urlFeed = &quot;https://politicalwire.com/feed/&quot;;" isComment="true" created="Tue, 02 Aug 2022 21:49:54 GMT"/>
				<outline text="" created="Sun, 11 Sep 2022 14:15:42 GMT"/>
				<outline text="const legalTags = {" created="Sun, 11 Sep 2022 14:15:43 GMT">
					<outline text="allowedTags: [" created="Sun, 11 Sep 2022 14:16:06 GMT">
						<outline text="&quot;p&quot;, &quot;br&quot;" created="Sun, 11 Sep 2022 14:18:05 GMT"/>
						<outline text="]," created="Sun, 11 Sep 2022 14:17:09 GMT"/>
						</outline>
					<outline text="allowedAttributes: {" created="Sun, 11 Sep 2022 14:16:17 GMT">
						<outline text="a: [&quot;href&quot;, &quot;name&quot;, &quot;target&quot;]" isComment="true" created="Sun, 11 Sep 2022 14:24:50 GMT"/>
						<outline text="}" created="Sun, 11 Sep 2022 14:16:27 GMT"/>
						</outline>
					<outline text="};" created="Sun, 11 Sep 2022 14:15:53 GMT"/>
					</outline>
				<outline text="" created="Tue, 02 Aug 2022 22:05:10 GMT"/>
				<outline text="reallysimple.readFeed (urlFeed, function (err, theFeed) {" created="Sat, 05 Mar 2022 17:19:59 GMT">
					<outline text="if (err) {" created="Sat, 05 Mar 2022 17:27:06 GMT">
						<outline text="console.log (err.message);" created="Sat, 05 Mar 2022 17:27:08 GMT"/>
						<outline text="}" created="Sat, 05 Mar 2022 17:27:14 GMT"/>
						</outline>
					<outline text="else {" created="Sat, 05 Mar 2022 17:27:15 GMT">
						<outline text="var htmltext = &quot;&quot;;" created="Sun, 11 Sep 2022 13:20:08 GMT"/>
						<outline text="function add (s) {" created="Sun, 11 Sep 2022 13:31:21 GMT">
							<outline text="htmltext += s + &quot;\n&quot;;" created="Sun, 11 Sep 2022 13:31:26 GMT"/>
							<outline text="}" created="Sun, 11 Sep 2022 13:31:25 GMT"/>
							</outline>
						<outline text="theFeed.items.forEach (function (item) {" created="Sun, 11 Sep 2022 13:20:08 GMT">
							<outline text="add (&quot;&lt;h3&gt;&quot; + item.title + &quot;&lt;/h3&gt;&quot;);" created="Sun, 11 Sep 2022 13:31:43 GMT"/>
							<outline text="" created="Sun, 11 Sep 2022 13:35:40 GMT"/>
							<outline text="const whenstart = new Date ();" created="Sun, 11 Sep 2022 13:35:40 GMT"/>
							<outline text="add (sanitizeHtml (item.description, legalTags));" created="Sun, 11 Sep 2022 13:31:43 GMT"/>
							<outline text="console.log (item.title + &quot;, &quot; + utils.secondsSince (whenstart) + &quot; secs.&quot;);" created="Sun, 11 Sep 2022 13:20:49 GMT"/>
							<outline text="" created="Sun, 11 Sep 2022 13:35:40 GMT"/>
							<outline text="add (&quot;&lt;br&gt;&lt;br&gt;&quot;);" created="Sun, 11 Sep 2022 13:20:49 GMT"/>
							<outline text="});" created="Sun, 11 Sep 2022 13:20:47 GMT"/>
							</outline>
						<outline text="" created="Sun, 11 Sep 2022 13:57:47 GMT"/>
						<outline text="fs.readFile (&quot;template.html&quot;, function (err, templatetext) {" created="Sun, 11 Sep 2022 13:57:48 GMT">
							<outline text="if (err) {" created="Mon, 07 Mar 2022 15:36:43 GMT">
								<outline text="console.log (err.message);" created="Mon, 07 Mar 2022 15:36:57 GMT"/>
								<outline text="}" created="Mon, 07 Mar 2022 15:36:46 GMT"/>
								</outline>
							<outline text="else {" created="Sun, 11 Sep 2022 13:59:59 GMT">
								<outline text="const pagetable = {" created="Sun, 11 Sep 2022 13:58:18 GMT">
									<outline text="bodytext: htmltext" created="Sun, 11 Sep 2022 13:58:33 GMT"/>
									<outline text="};" created="Sun, 11 Sep 2022 13:58:25 GMT"/>
									</outline>
								<outline text="var pagetext = utils.multipleReplaceAll (templatetext.toString (), pagetable, false, &quot;[%&quot;, &quot;%]&quot;);"/>
								<outline text="fs.writeFile (&quot;test2.html&quot;, pagetext, function (err) {" created="Mon, 07 Mar 2022 15:36:03 GMT">
									<outline text="if (err) {" created="Mon, 07 Mar 2022 15:36:43 GMT">
										<outline text="console.log (err.message);" created="Mon, 07 Mar 2022 15:36:57 GMT"/>
										<outline text="}" created="Mon, 07 Mar 2022 15:36:46 GMT"/>
										</outline>
									<outline text="});" created="Mon, 07 Mar 2022 15:36:38 GMT"/>
									</outline>
								<outline text="}" created="Sun, 11 Sep 2022 14:00:00 GMT"/>
								</outline>
							<outline text="});" created="Sun, 11 Sep 2022 13:58:13 GMT"/>
							</outline>
						<outline text="" created="Sun, 11 Sep 2022 13:57:49 GMT"/>
						<outline text="fs.writeFile (&quot;test2.json&quot;, utils.jsonStringify (theFeed), function (err) {" created="Mon, 07 Mar 2022 15:36:03 GMT">
							<outline text="if (err) {" created="Mon, 07 Mar 2022 15:36:43 GMT">
								<outline text="console.log (err.message);" created="Mon, 07 Mar 2022 15:36:57 GMT"/>
								<outline text="}" created="Mon, 07 Mar 2022 15:36:46 GMT"/>
								</outline>
							<outline text="});" created="Mon, 07 Mar 2022 15:36:38 GMT"/>
							</outline>
						<outline text="}" created="Sat, 05 Mar 2022 17:27:17 GMT"/>
						</outline>
					<outline text="});" created="Sat, 05 Mar 2022 17:20:19 GMT"/>
					</outline>
				</outline>
			</outline>
		<outline text="build script" created="Mon, 27 Jun 2022 14:33:33 GMT">
			<outline text="nodeEditorSuite.utilities.buildFeedlandDatabase ()" created="Mon, 27 Jun 2022 14:33:38 GMT"/>
			</outline>
		</body>
	</opml>
